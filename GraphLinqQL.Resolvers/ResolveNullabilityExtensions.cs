using GraphLinqQL.Resolution;
using System;
using System.Linq.Expressions;

namespace GraphLinqQL
{
    public static class ResolveNullabilityExtensions
    {
        public static IGraphQlScalarResult<TContract> Nullable<TInput, TContract>(this IGraphQlScalarResult<TInput?> original, Func<IGraphQlResultFactory<TInput>, IGraphQlScalarResult<TContract>> func)
            where TInput : class
            where TContract : class
        {
            var newResult = func(new GraphQlResultFactory<TInput>(original.FieldContext));
            var constructedDeferred = newResult.ConstructResult();


            var newScalar = original.AddResolve<TContract>(p => Expression.Lambda(p.IfNotNull(constructedDeferred.Inline(p)), p));

            return newScalar.Catch();
        }

        public static IGraphQlObjectResult<TContract?> Nullable<TInput, TContract>(this IGraphQlScalarResult<TInput?> original, Func<IGraphQlResultFactory<TInput>, IGraphQlObjectResult<TContract>> func)
            where TInput : class
            where TContract : class
        {
            var newResult = func(new GraphQlResultFactory<TInput>(original.FieldContext));
            var constructedDeferred = newResult.Resolution.ConstructResult();

            var newScalar = original.AddResolve<object>(p => Expression.Lambda(p.IfNotNull(constructedDeferred.Inline(p)), p))
                                    .Catch();
            return newResult.AdjustResolution<TContract?>(_ => newScalar);
        }

        public static IGraphQlScalarResult<T> Catch<T>(this IGraphQlScalarResult<T> original)
            where T : class
        {
            var factory = new CatchFinalizerFactory(original.FieldContext);
            // EFCore works better when it works off of anonymous objects generated by the compiler. Expression.Constant on the factory causes an error here
            // The commented-out expression is great for debugging but makes worse queries
            Expression<Func<Func<T>, Expression<Func<T>>, IFinalizer>> expression = (func, exp) => factory.Catch(func, exp);

            return original.AddResolve<T>(p => Expression.Lambda(expression.Inline(Expression.Lambda<Func<T>>(p), Expression.Quote(Expression.Lambda<Func<T>>(p))), p));
        }
    }
}
