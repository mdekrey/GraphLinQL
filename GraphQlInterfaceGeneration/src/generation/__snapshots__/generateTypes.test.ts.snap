// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`can generate v3 types 1`] = `
"
/// <summary>
/// The query type, represents all of the entry points into our object graph
/// </summary>
public abstract class Query : IGraphQlResolvable
{
    private Query() { }
    public abstract IGraphQlResult<Character?> hero(Episode? episode);
    public abstract IGraphQlResult<IEnumerable<Review?>?> reviews(Episode episode);
    public abstract IGraphQlResult<IEnumerable?> search(string? text);
    public abstract IGraphQlResult<Character?> character(string id);
    public abstract IGraphQlResult<Droid?> droid(string id);
    public abstract IGraphQlResult<Human?> human(string id);
    public abstract IGraphQlResult<Starship?> starship(string id);

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Query\\");
            case \\"hero\\": return this.hero(
                episode: (parameters.HasParameter(\\"episode\\") ? parameters.GetParameter<Episode?>(\\"episode\\") : null));
            case \\"reviews\\": return this.reviews(
                episode: parameters.GetParameter<Episode>(\\"episode\\"));
            case \\"search\\": return this.search(
                text: (parameters.HasParameter(\\"text\\") ? parameters.GetParameter<string?>(\\"text\\") : null));
            case \\"character\\": return this.character(
                id: parameters.GetParameter<string>(\\"id\\"));
            case \\"droid\\": return this.droid(
                id: parameters.GetParameter<string>(\\"id\\"));
            case \\"human\\": return this.human(
                id: parameters.GetParameter<string>(\\"id\\"));
            case \\"starship\\": return this.starship(
                id: parameters.GetParameter<string>(\\"id\\"));
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Query\\";
    }

    public abstract class GraphQlContract<T> : Query, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// The episodes in the Star Wars trilogy
/// </summary>
public enum Episode
{
    
    /// <summary>
    /// Star Wars Episode IV: A New Hope, released in 1977.
    /// </summary>
    NEWHOPE,
    
    /// <summary>
    /// Star Wars Episode V: The Empire Strikes Back, released in 1980.
    /// </summary>
    EMPIRE,
    
    /// <summary>
    /// Star Wars Episode VI: Return of the Jedi, released in 1983.
    /// </summary>
    JEDI
}


/// <summary>
/// A character from the Star Wars universe
/// </summary>
public interface Character : IGraphQlResolvable
{
    
      /// <summary>
      /// The ID of the character
      /// </summary>
      IGraphQlResult<string> id();
    
      /// <summary>
      /// The name of the character
      /// </summary>
      IGraphQlResult<string> name();
    
      /// <summary>
      /// The friends of the character, or an empty list if they have none
      /// </summary>
      IGraphQlResult<IEnumerable<Character?>?> friends();
    
      /// <summary>
      /// The friends of the character exposed as a connection with edges
      /// </summary>
      IGraphQlResult<FriendsConnection> friendsConnection(int? first, string? after);
    
      /// <summary>
      /// The movies this character appears in
      /// </summary>
      IGraphQlResult<IEnumerable<Episode?>> appearsIn();
}


/// <summary>
/// A connection object for a character's friends
/// </summary>
public abstract class FriendsConnection : IGraphQlResolvable
{
    private FriendsConnection() { }
    
    /// <summary>
    /// The total number of friends
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// The edges for each of the character's friends.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<FriendsEdge?>?> edges();
    
    /// <summary>
    /// A list of the friends, as a convenience when edges are not needed.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Character?>?> friends();
    
    /// <summary>
    /// Information for paginating this connection
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FriendsConnection\\");
            case \\"totalCount\\": return this.totalCount();
            case \\"edges\\": return this.edges();
            case \\"friends\\": return this.friends();
            case \\"pageInfo\\": return this.pageInfo();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FriendsConnection\\";
    }

    public abstract class GraphQlContract<T> : FriendsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge object for a character's friends
/// </summary>
public abstract class FriendsEdge : IGraphQlResolvable
{
    private FriendsEdge() { }
    
    /// <summary>
    /// A cursor used for pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();
    
    /// <summary>
    /// The character represented by this friendship edge
    /// </summary>
    public abstract IGraphQlResult<Character?> node();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FriendsEdge\\");
            case \\"cursor\\": return this.cursor();
            case \\"node\\": return this.node();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FriendsEdge\\";
    }

    public abstract class GraphQlContract<T> : FriendsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// Information for paginating this connection
/// </summary>
public abstract class PageInfo : IGraphQlResolvable
{
    private PageInfo() { }
    public abstract IGraphQlResult<string?> startCursor();
    public abstract IGraphQlResult<string?> endCursor();
    public abstract IGraphQlResult<bool> hasNextPage();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PageInfo\\");
            case \\"startCursor\\": return this.startCursor();
            case \\"endCursor\\": return this.endCursor();
            case \\"hasNextPage\\": return this.hasNextPage();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PageInfo\\";
    }

    public abstract class GraphQlContract<T> : PageInfo, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// Represents a review for a movie
/// </summary>
public abstract class Review : IGraphQlResolvable
{
    private Review() { }
    
    /// <summary>
    /// The movie
    /// </summary>
    public abstract IGraphQlResult<Episode?> episode();
    
    /// <summary>
    /// The number of stars this review gave, 1-5
    /// </summary>
    public abstract IGraphQlResult<int> stars();
    
    /// <summary>
    /// Comment about the movie
    /// </summary>
    public abstract IGraphQlResult<string?> commentary();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Review\\");
            case \\"episode\\": return this.episode();
            case \\"stars\\": return this.stars();
            case \\"commentary\\": return this.commentary();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Review\\";
    }

    public abstract class GraphQlContract<T> : Review, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}

// Union: SearchResult

/// <summary>
/// A humanoid creature from the Star Wars universe
/// </summary>
public abstract class Human : IGraphQlResolvable, Character
{
    private Human() { }
    
    /// <summary>
    /// The ID of the human
    /// </summary>
    public abstract IGraphQlResult<string> id();
    
    /// <summary>
    /// What this human calls themselves
    /// </summary>
    public abstract IGraphQlResult<string> name();
    
    /// <summary>
    /// The home planet of the human, or null if unknown
    /// </summary>
    public abstract IGraphQlResult<string?> homePlanet();
    
    /// <summary>
    /// Height in the preferred unit, default is meters
    /// </summary>
    public abstract IGraphQlResult<double?> height(LengthUnit? unit);
    
    /// <summary>
    /// Mass in kilograms, or null if unknown
    /// </summary>
    public abstract IGraphQlResult<double?> mass();
    
    /// <summary>
    /// This human's friends, or an empty list if they have none
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Character?>?> friends();
    
    /// <summary>
    /// The friends of the human exposed as a connection with edges
    /// </summary>
    public abstract IGraphQlResult<FriendsConnection> friendsConnection(int? first, string? after);
    
    /// <summary>
    /// The movies this human appears in
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Episode?>> appearsIn();
    
    /// <summary>
    /// A list of starships this person has piloted, or an empty list if none
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Starship?>?> starships();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Human\\");
            case \\"id\\": return this.id();
            case \\"name\\": return this.name();
            case \\"homePlanet\\": return this.homePlanet();
            case \\"height\\": return this.height(
                unit: (parameters.HasParameter(\\"unit\\") ? parameters.GetParameter<LengthUnit?>(\\"unit\\") : null) ?? GraphLinqQL.Interfaces.LengthUnit.METER);
            case \\"mass\\": return this.mass();
            case \\"friends\\": return this.friends();
            case \\"friendsConnection\\": return this.friendsConnection(
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null));
            case \\"appearsIn\\": return this.appearsIn();
            case \\"starships\\": return this.starships();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Human\\" || value == \\"Character\\";
    }

    public abstract class GraphQlContract<T> : Human, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// Units of height
/// </summary>
public enum LengthUnit
{
    
    /// <summary>
    /// The standard unit around the world
    /// </summary>
    METER,
    
    /// <summary>
    /// Primarily used in the United States
    /// </summary>
    FOOT
}



public abstract class Starship : IGraphQlResolvable
{
    private Starship() { }
    
    /// <summary>
    /// The ID of the starship
    /// </summary>
    public abstract IGraphQlResult<string> id();
    
    /// <summary>
    /// The name of the starship
    /// </summary>
    public abstract IGraphQlResult<string> name();
    
    /// <summary>
    /// Length of the starship, along the longest axis
    /// </summary>
    public abstract IGraphQlResult<double?> length(LengthUnit? unit);
    public abstract IGraphQlResult<IEnumerable<IEnumerable<double>>?> coordinates();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Starship\\");
            case \\"id\\": return this.id();
            case \\"name\\": return this.name();
            case \\"length\\": return this.length(
                unit: (parameters.HasParameter(\\"unit\\") ? parameters.GetParameter<LengthUnit?>(\\"unit\\") : null) ?? GraphLinqQL.Interfaces.LengthUnit.METER);
            case \\"coordinates\\": return this.coordinates();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Starship\\";
    }

    public abstract class GraphQlContract<T> : Starship, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An autonomous mechanical character in the Star Wars universe
/// </summary>
public abstract class Droid : IGraphQlResolvable, Character
{
    private Droid() { }
    
    /// <summary>
    /// The ID of the droid
    /// </summary>
    public abstract IGraphQlResult<string> id();
    
    /// <summary>
    /// What others call this droid
    /// </summary>
    public abstract IGraphQlResult<string> name();
    
    /// <summary>
    /// This droid's friends, or an empty list if they have none
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Character?>?> friends();
    
    /// <summary>
    /// The friends of the droid exposed as a connection with edges
    /// </summary>
    public abstract IGraphQlResult<FriendsConnection> friendsConnection(int? first, string? after);
    
    /// <summary>
    /// The movies this droid appears in
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Episode?>> appearsIn();
    
    /// <summary>
    /// This droid's primary function
    /// </summary>
    public abstract IGraphQlResult<string?> primaryFunction();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Droid\\");
            case \\"id\\": return this.id();
            case \\"name\\": return this.name();
            case \\"friends\\": return this.friends();
            case \\"friendsConnection\\": return this.friendsConnection(
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null));
            case \\"appearsIn\\": return this.appearsIn();
            case \\"primaryFunction\\": return this.primaryFunction();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Droid\\" || value == \\"Character\\";
    }

    public abstract class GraphQlContract<T> : Droid, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// The mutation type, represents all updates we can make to our data
/// </summary>
public abstract class Mutation : IGraphQlResolvable
{
    private Mutation() { }
    public abstract IGraphQlResult<Review?> createReview(Episode? episode, ReviewInput review);

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Mutation\\");
            case \\"createReview\\": return this.createReview(
                episode: (parameters.HasParameter(\\"episode\\") ? parameters.GetParameter<Episode?>(\\"episode\\") : null),
                review: parameters.GetParameter<ReviewInput>(\\"review\\"));
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Mutation\\";
    }

    public abstract class GraphQlContract<T> : Mutation, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// The input object sent when someone is creating a new review
/// </summary>
public class ReviewInput
{
    
      /// <summary>
      /// 0-5 stars
      /// </summary>
      public int stars { get; set; }
    
      /// <summary>
      /// Comment about the movie, optional
      /// </summary>
      public string? commentary { get; set; }
    
      /// <summary>
      /// Favorite color, optional
      /// </summary>
      public ColorInput? favorite_color { get; set; }
}


/// <summary>
/// The input object sent when passing in a color
/// </summary>
public class ColorInput
{
    public int red { get; set; }
    public int green { get; set; }
    public int blue { get; set; }
}


/// <summary>
/// The subscription type, represents all subscriptions we can make to our data
/// </summary>
public abstract class Subscription : IGraphQlResolvable
{
    private Subscription() { }
    public abstract IGraphQlResult<Review?> reviewAdded(Episode? episode);

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Subscription\\");
            case \\"reviewAdded\\": return this.reviewAdded(
                episode: (parameters.HasParameter(\\"episode\\") ? parameters.GetParameter<Episode?>(\\"episode\\") : null));
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Subscription\\";
    }

    public abstract class GraphQlContract<T> : Subscription, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}
"
`;

exports[`can generate v3 types with deprecations 1`] = `
"
/// <summary>
/// The query type, represents all of the entry points into our object graph
/// </summary>
public abstract class Query : IGraphQlResolvable
{
    private Query() { }
    [Obsolete(\\"Was too subjective\\")]
    public abstract IGraphQlResult<Character?> hero(Episode? episode);
    [Obsolete(\\"No longer supported\\")]
    public abstract IGraphQlResult<IEnumerable<Review?>?> reviews(Episode episode);
    public abstract IGraphQlResult<IEnumerable?> search(string? text);
    public abstract IGraphQlResult<Character?> character(string id);
    public abstract IGraphQlResult<Droid?> droid(string id);
    public abstract IGraphQlResult<Human?> human(string id);
    public abstract IGraphQlResult<Starship?> starship(string id);

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Query\\");
            case \\"hero\\": return this.hero(
                episode: (parameters.HasParameter(\\"episode\\") ? parameters.GetParameter<Episode?>(\\"episode\\") : null));
            case \\"reviews\\": return this.reviews(
                episode: parameters.GetParameter<Episode>(\\"episode\\"));
            case \\"search\\": return this.search(
                text: (parameters.HasParameter(\\"text\\") ? parameters.GetParameter<string?>(\\"text\\") : null));
            case \\"character\\": return this.character(
                id: parameters.GetParameter<string>(\\"id\\"));
            case \\"droid\\": return this.droid(
                id: parameters.GetParameter<string>(\\"id\\"));
            case \\"human\\": return this.human(
                id: parameters.GetParameter<string>(\\"id\\"));
            case \\"starship\\": return this.starship(
                id: parameters.GetParameter<string>(\\"id\\"));
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Query\\";
    }

    public abstract class GraphQlContract<T> : Query, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// The episodes in the Star Wars trilogy
/// </summary>
public enum Episode
{
    
    /// <summary>
    /// Star Wars Episode IV: A New Hope, released in 1977.
    /// </summary>
    NEWHOPE,
    
    /// <summary>
    /// Star Wars Episode V: The Empire Strikes Back, released in 1980.
    /// </summary>
    EMPIRE,
    
    /// <summary>
    /// Star Wars Episode VI: Return of the Jedi, released in 1983.
    /// </summary>
    JEDI
}


/// <summary>
/// A character from the Star Wars universe
/// </summary>
public interface Character : IGraphQlResolvable
{
    
      /// <summary>
      /// The ID of the character
      /// </summary>
      IGraphQlResult<string> id();
    
      /// <summary>
      /// The name of the character
      /// </summary>
      IGraphQlResult<string> name();
    
      /// <summary>
      /// The friends of the character, or an empty list if they have none
      /// </summary>
      IGraphQlResult<IEnumerable<Character?>?> friends();
    
      /// <summary>
      /// The friends of the character exposed as a connection with edges
      /// </summary>
      IGraphQlResult<FriendsConnection> friendsConnection(int? first, string? after);
    
      /// <summary>
      /// The movies this character appears in
      /// </summary>
      IGraphQlResult<IEnumerable<Episode?>> appearsIn();
}


/// <summary>
/// A connection object for a character's friends
/// </summary>
public abstract class FriendsConnection : IGraphQlResolvable
{
    private FriendsConnection() { }
    
    /// <summary>
    /// The total number of friends
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// The edges for each of the character's friends.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<FriendsEdge?>?> edges();
    
    /// <summary>
    /// A list of the friends, as a convenience when edges are not needed.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Character?>?> friends();
    
    /// <summary>
    /// Information for paginating this connection
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FriendsConnection\\");
            case \\"totalCount\\": return this.totalCount();
            case \\"edges\\": return this.edges();
            case \\"friends\\": return this.friends();
            case \\"pageInfo\\": return this.pageInfo();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FriendsConnection\\";
    }

    public abstract class GraphQlContract<T> : FriendsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge object for a character's friends
/// </summary>
public abstract class FriendsEdge : IGraphQlResolvable
{
    private FriendsEdge() { }
    
    /// <summary>
    /// A cursor used for pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();
    
    /// <summary>
    /// The character represented by this friendship edge
    /// </summary>
    public abstract IGraphQlResult<Character?> node();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FriendsEdge\\");
            case \\"cursor\\": return this.cursor();
            case \\"node\\": return this.node();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FriendsEdge\\";
    }

    public abstract class GraphQlContract<T> : FriendsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// Information for paginating this connection
/// </summary>
public abstract class PageInfo : IGraphQlResolvable
{
    private PageInfo() { }
    public abstract IGraphQlResult<string?> startCursor();
    public abstract IGraphQlResult<string?> endCursor();
    public abstract IGraphQlResult<bool> hasNextPage();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PageInfo\\");
            case \\"startCursor\\": return this.startCursor();
            case \\"endCursor\\": return this.endCursor();
            case \\"hasNextPage\\": return this.hasNextPage();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PageInfo\\";
    }

    public abstract class GraphQlContract<T> : PageInfo, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// Represents a review for a movie
/// </summary>
public abstract class Review : IGraphQlResolvable
{
    private Review() { }
    
    /// <summary>
    /// The movie
    /// </summary>
    public abstract IGraphQlResult<Episode?> episode();
    
    /// <summary>
    /// The number of stars this review gave, 1-5
    /// </summary>
    public abstract IGraphQlResult<int> stars();
    
    /// <summary>
    /// Comment about the movie
    /// </summary>
    public abstract IGraphQlResult<string?> commentary();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Review\\");
            case \\"episode\\": return this.episode();
            case \\"stars\\": return this.stars();
            case \\"commentary\\": return this.commentary();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Review\\";
    }

    public abstract class GraphQlContract<T> : Review, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}

// Union: SearchResult

/// <summary>
/// A humanoid creature from the Star Wars universe
/// </summary>
public abstract class Human : IGraphQlResolvable, Character
{
    private Human() { }
    
    /// <summary>
    /// The ID of the human
    /// </summary>
    public abstract IGraphQlResult<string> id();
    
    /// <summary>
    /// What this human calls themselves
    /// </summary>
    public abstract IGraphQlResult<string> name();
    
    /// <summary>
    /// The home planet of the human, or null if unknown
    /// </summary>
    public abstract IGraphQlResult<string?> homePlanet();
    
    /// <summary>
    /// Height in the preferred unit, default is meters
    /// </summary>
    public abstract IGraphQlResult<double?> height(LengthUnit? unit);
    
    /// <summary>
    /// Mass in kilograms, or null if unknown
    /// </summary>
    public abstract IGraphQlResult<double?> mass();
    
    /// <summary>
    /// This human's friends, or an empty list if they have none
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Character?>?> friends();
    
    /// <summary>
    /// The friends of the human exposed as a connection with edges
    /// </summary>
    public abstract IGraphQlResult<FriendsConnection> friendsConnection(int? first, string? after);
    
    /// <summary>
    /// The movies this human appears in
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Episode?>> appearsIn();
    
    /// <summary>
    /// A list of starships this person has piloted, or an empty list if none
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Starship?>?> starships();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Human\\");
            case \\"id\\": return this.id();
            case \\"name\\": return this.name();
            case \\"homePlanet\\": return this.homePlanet();
            case \\"height\\": return this.height(
                unit: (parameters.HasParameter(\\"unit\\") ? parameters.GetParameter<LengthUnit?>(\\"unit\\") : null) ?? GraphLinqQL.Interfaces.LengthUnit.METER);
            case \\"mass\\": return this.mass();
            case \\"friends\\": return this.friends();
            case \\"friendsConnection\\": return this.friendsConnection(
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null));
            case \\"appearsIn\\": return this.appearsIn();
            case \\"starships\\": return this.starships();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Human\\" || value == \\"Character\\";
    }

    public abstract class GraphQlContract<T> : Human, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// Units of height
/// </summary>
public enum LengthUnit
{
    
    /// <summary>
    /// The standard unit around the world
    /// </summary>
    METER,
    
    /// <summary>
    /// Primarily used in the United States
    /// </summary>
    FOOT
}



public abstract class Starship : IGraphQlResolvable
{
    private Starship() { }
    
    /// <summary>
    /// The ID of the starship
    /// </summary>
    public abstract IGraphQlResult<string> id();
    
    /// <summary>
    /// The name of the starship
    /// </summary>
    public abstract IGraphQlResult<string> name();
    
    /// <summary>
    /// Length of the starship, along the longest axis
    /// </summary>
    public abstract IGraphQlResult<double?> length(LengthUnit? unit);
    public abstract IGraphQlResult<IEnumerable<IEnumerable<double>>?> coordinates();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Starship\\");
            case \\"id\\": return this.id();
            case \\"name\\": return this.name();
            case \\"length\\": return this.length(
                unit: (parameters.HasParameter(\\"unit\\") ? parameters.GetParameter<LengthUnit?>(\\"unit\\") : null) ?? GraphLinqQL.Interfaces.LengthUnit.METER);
            case \\"coordinates\\": return this.coordinates();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Starship\\";
    }

    public abstract class GraphQlContract<T> : Starship, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An autonomous mechanical character in the Star Wars universe
/// </summary>
public abstract class Droid : IGraphQlResolvable, Character
{
    private Droid() { }
    
    /// <summary>
    /// The ID of the droid
    /// </summary>
    public abstract IGraphQlResult<string> id();
    
    /// <summary>
    /// What others call this droid
    /// </summary>
    public abstract IGraphQlResult<string> name();
    
    /// <summary>
    /// This droid's friends, or an empty list if they have none
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Character?>?> friends();
    
    /// <summary>
    /// The friends of the droid exposed as a connection with edges
    /// </summary>
    public abstract IGraphQlResult<FriendsConnection> friendsConnection(int? first, string? after);
    
    /// <summary>
    /// The movies this droid appears in
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Episode?>> appearsIn();
    
    /// <summary>
    /// This droid's primary function
    /// </summary>
    public abstract IGraphQlResult<string?> primaryFunction();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Droid\\");
            case \\"id\\": return this.id();
            case \\"name\\": return this.name();
            case \\"friends\\": return this.friends();
            case \\"friendsConnection\\": return this.friendsConnection(
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null));
            case \\"appearsIn\\": return this.appearsIn();
            case \\"primaryFunction\\": return this.primaryFunction();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Droid\\" || value == \\"Character\\";
    }

    public abstract class GraphQlContract<T> : Droid, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// The mutation type, represents all updates we can make to our data
/// </summary>
public abstract class Mutation : IGraphQlResolvable
{
    private Mutation() { }
    public abstract IGraphQlResult<Review?> createReview(Episode? episode, ReviewInput review);

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Mutation\\");
            case \\"createReview\\": return this.createReview(
                episode: (parameters.HasParameter(\\"episode\\") ? parameters.GetParameter<Episode?>(\\"episode\\") : null),
                review: parameters.GetParameter<ReviewInput>(\\"review\\"));
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Mutation\\";
    }

    public abstract class GraphQlContract<T> : Mutation, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// The input object sent when someone is creating a new review
/// </summary>
public class ReviewInput
{
    
      /// <summary>
      /// 0-5 stars
      /// </summary>
      public int stars { get; set; }
    
      /// <summary>
      /// Comment about the movie, optional
      /// </summary>
      public string? commentary { get; set; }
    
      /// <summary>
      /// Favorite color, optional
      /// </summary>
      public ColorInput? favorite_color { get; set; }
}


/// <summary>
/// The input object sent when passing in a color
/// </summary>
public class ColorInput
{
    public int red { get; set; }
    public int green { get; set; }
    public int blue { get; set; }
}


/// <summary>
/// The subscription type, represents all subscriptions we can make to our data
/// </summary>
public abstract class Subscription : IGraphQlResolvable
{
    private Subscription() { }
    public abstract IGraphQlResult<Review?> reviewAdded(Episode? episode);

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Subscription\\");
            case \\"reviewAdded\\": return this.reviewAdded(
                episode: (parameters.HasParameter(\\"episode\\") ? parameters.GetParameter<Episode?>(\\"episode\\") : null));
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Subscription\\";
    }

    public abstract class GraphQlContract<T> : Subscription, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}
"
`;

exports[`can generate v4 types 1`] = `
"

public abstract class Root : IGraphQlResolvable
{
    private Root() { }
    public abstract IGraphQlResult<FilmsConnection?> allFilms(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<Film?> film(string? id, string? filmID);
    public abstract IGraphQlResult<PeopleConnection?> allPeople(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<Person?> person(string? id, string? personID);
    public abstract IGraphQlResult<PlanetsConnection?> allPlanets(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<Planet?> planet(string? id, string? planetID);
    public abstract IGraphQlResult<SpeciesConnection?> allSpecies(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<Species?> species(string? id, string? speciesID);
    public abstract IGraphQlResult<StarshipsConnection?> allStarships(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<Starship?> starship(string? id, string? starshipID);
    public abstract IGraphQlResult<VehiclesConnection?> allVehicles(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<Vehicle?> vehicle(string? id, string? vehicleID);
    
    /// <summary>
    /// Fetches an object given its ID
    /// </summary>
    public abstract IGraphQlResult<Node?> node(string id);

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Root\\");
            case \\"allFilms\\": return this.allFilms(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"film\\": return this.film(
                id: (parameters.HasParameter(\\"id\\") ? parameters.GetParameter<string?>(\\"id\\") : null),
                filmID: (parameters.HasParameter(\\"filmID\\") ? parameters.GetParameter<string?>(\\"filmID\\") : null));
            case \\"allPeople\\": return this.allPeople(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"person\\": return this.person(
                id: (parameters.HasParameter(\\"id\\") ? parameters.GetParameter<string?>(\\"id\\") : null),
                personID: (parameters.HasParameter(\\"personID\\") ? parameters.GetParameter<string?>(\\"personID\\") : null));
            case \\"allPlanets\\": return this.allPlanets(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"planet\\": return this.planet(
                id: (parameters.HasParameter(\\"id\\") ? parameters.GetParameter<string?>(\\"id\\") : null),
                planetID: (parameters.HasParameter(\\"planetID\\") ? parameters.GetParameter<string?>(\\"planetID\\") : null));
            case \\"allSpecies\\": return this.allSpecies(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"species\\": return this.species(
                id: (parameters.HasParameter(\\"id\\") ? parameters.GetParameter<string?>(\\"id\\") : null),
                speciesID: (parameters.HasParameter(\\"speciesID\\") ? parameters.GetParameter<string?>(\\"speciesID\\") : null));
            case \\"allStarships\\": return this.allStarships(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"starship\\": return this.starship(
                id: (parameters.HasParameter(\\"id\\") ? parameters.GetParameter<string?>(\\"id\\") : null),
                starshipID: (parameters.HasParameter(\\"starshipID\\") ? parameters.GetParameter<string?>(\\"starshipID\\") : null));
            case \\"allVehicles\\": return this.allVehicles(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"vehicle\\": return this.vehicle(
                id: (parameters.HasParameter(\\"id\\") ? parameters.GetParameter<string?>(\\"id\\") : null),
                vehicleID: (parameters.HasParameter(\\"vehicleID\\") ? parameters.GetParameter<string?>(\\"vehicleID\\") : null));
            case \\"node\\": return this.node(
                id: parameters.GetParameter<string>(\\"id\\"));
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Root\\";
    }

    public abstract class GraphQlContract<T> : Root, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class FilmsConnection : IGraphQlResolvable
{
    private FilmsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<FilmsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Film?>?> films();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FilmsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"films\\": return this.films();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FilmsConnection\\";
    }

    public abstract class GraphQlContract<T> : FilmsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// Information about pagination in a connection.
/// </summary>
public abstract class PageInfo : IGraphQlResolvable
{
    private PageInfo() { }
    
    /// <summary>
    /// When paginating forwards, are there more items?
    /// </summary>
    public abstract IGraphQlResult<bool> hasNextPage();
    
    /// <summary>
    /// When paginating backwards, are there more items?
    /// </summary>
    public abstract IGraphQlResult<bool> hasPreviousPage();
    
    /// <summary>
    /// When paginating backwards, the cursor to continue.
    /// </summary>
    public abstract IGraphQlResult<string?> startCursor();
    
    /// <summary>
    /// When paginating forwards, the cursor to continue.
    /// </summary>
    public abstract IGraphQlResult<string?> endCursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PageInfo\\");
            case \\"hasNextPage\\": return this.hasNextPage();
            case \\"hasPreviousPage\\": return this.hasPreviousPage();
            case \\"startCursor\\": return this.startCursor();
            case \\"endCursor\\": return this.endCursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PageInfo\\";
    }

    public abstract class GraphQlContract<T> : PageInfo, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class FilmsEdge : IGraphQlResolvable
{
    private FilmsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Film?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FilmsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FilmsEdge\\";
    }

    public abstract class GraphQlContract<T> : FilmsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A single film.
/// </summary>
public abstract class Film : IGraphQlResolvable, Node
{
    private Film() { }
    
    /// <summary>
    /// The title of this film.
    /// </summary>
    public abstract IGraphQlResult<string?> title();
    
    /// <summary>
    /// The episode number of this film.
    /// </summary>
    public abstract IGraphQlResult<int?> episodeID();
    
    /// <summary>
    /// The opening paragraphs at the beginning of this film.
    /// </summary>
    public abstract IGraphQlResult<string?> openingCrawl();
    
    /// <summary>
    /// The name of the director of this film.
    /// </summary>
    public abstract IGraphQlResult<string?> director();
    
    /// <summary>
    /// The name(s) of the producer(s) of this film.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<string?>?> producers();
    
    /// <summary>
    /// The ISO 8601 date format of film release at original creator country.
    /// </summary>
    public abstract IGraphQlResult<string?> releaseDate();
    public abstract IGraphQlResult<FilmSpeciesConnection?> speciesConnection(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<FilmStarshipsConnection?> starshipConnection(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<FilmVehiclesConnection?> vehicleConnection(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<FilmCharactersConnection?> characterConnection(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<FilmPlanetsConnection?> planetConnection(string? after, int? first, string? before, int? last);
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was created.
    /// </summary>
    public abstract IGraphQlResult<string?> created();
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was edited.
    /// </summary>
    public abstract IGraphQlResult<string?> edited();
    
    /// <summary>
    /// The ID of an object
    /// </summary>
    public abstract IGraphQlResult<string> id();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Film\\");
            case \\"title\\": return this.title();
            case \\"episodeID\\": return this.episodeID();
            case \\"openingCrawl\\": return this.openingCrawl();
            case \\"director\\": return this.director();
            case \\"producers\\": return this.producers();
            case \\"releaseDate\\": return this.releaseDate();
            case \\"speciesConnection\\": return this.speciesConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"starshipConnection\\": return this.starshipConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"vehicleConnection\\": return this.vehicleConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"characterConnection\\": return this.characterConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"planetConnection\\": return this.planetConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"created\\": return this.created();
            case \\"edited\\": return this.edited();
            case \\"id\\": return this.id();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Film\\" || value == \\"Node\\";
    }

    public abstract class GraphQlContract<T> : Film, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An object with an ID
/// </summary>
public interface Node : IGraphQlResolvable
{
    
      /// <summary>
      /// The id of the object.
      /// </summary>
      IGraphQlResult<string> id();
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class FilmSpeciesConnection : IGraphQlResolvable
{
    private FilmSpeciesConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<FilmSpeciesEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Species?>?> species();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FilmSpeciesConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"species\\": return this.species();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FilmSpeciesConnection\\";
    }

    public abstract class GraphQlContract<T> : FilmSpeciesConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class FilmSpeciesEdge : IGraphQlResolvable
{
    private FilmSpeciesEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Species?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FilmSpeciesEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FilmSpeciesEdge\\";
    }

    public abstract class GraphQlContract<T> : FilmSpeciesEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A type of person or character within the Star Wars Universe.
/// </summary>
public abstract class Species : IGraphQlResolvable, Node
{
    private Species() { }
    
    /// <summary>
    /// The name of this species.
    /// </summary>
    public abstract IGraphQlResult<string?> name();
    
    /// <summary>
    /// The classification of this species, such as \\"mammal\\" or \\"reptile\\".
    /// </summary>
    public abstract IGraphQlResult<string?> classification();
    
    /// <summary>
    /// The designation of this species, such as \\"sentient\\".
    /// </summary>
    public abstract IGraphQlResult<string?> designation();
    
    /// <summary>
    /// The average height of this species in centimeters.
    /// </summary>
    public abstract IGraphQlResult<double?> averageHeight();
    
    /// <summary>
    /// The average lifespan of this species in years, null if unknown.
    /// </summary>
    public abstract IGraphQlResult<int?> averageLifespan();
    
    /// <summary>
    /// Common eye colors for this species, null if this species does not typically
    /// have eyes.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<string?>?> eyeColors();
    
    /// <summary>
    /// Common hair colors for this species, null if this species does not typically
    /// have hair.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<string?>?> hairColors();
    
    /// <summary>
    /// Common skin colors for this species, null if this species does not typically
    /// have skin.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<string?>?> skinColors();
    
    /// <summary>
    /// The language commonly spoken by this species.
    /// </summary>
    public abstract IGraphQlResult<string?> language();
    
    /// <summary>
    /// A planet that this species originates from.
    /// </summary>
    public abstract IGraphQlResult<Planet?> homeworld();
    public abstract IGraphQlResult<SpeciesPeopleConnection?> personConnection(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<SpeciesFilmsConnection?> filmConnection(string? after, int? first, string? before, int? last);
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was created.
    /// </summary>
    public abstract IGraphQlResult<string?> created();
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was edited.
    /// </summary>
    public abstract IGraphQlResult<string?> edited();
    
    /// <summary>
    /// The ID of an object
    /// </summary>
    public abstract IGraphQlResult<string> id();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Species\\");
            case \\"name\\": return this.name();
            case \\"classification\\": return this.classification();
            case \\"designation\\": return this.designation();
            case \\"averageHeight\\": return this.averageHeight();
            case \\"averageLifespan\\": return this.averageLifespan();
            case \\"eyeColors\\": return this.eyeColors();
            case \\"hairColors\\": return this.hairColors();
            case \\"skinColors\\": return this.skinColors();
            case \\"language\\": return this.language();
            case \\"homeworld\\": return this.homeworld();
            case \\"personConnection\\": return this.personConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"filmConnection\\": return this.filmConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"created\\": return this.created();
            case \\"edited\\": return this.edited();
            case \\"id\\": return this.id();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Species\\" || value == \\"Node\\";
    }

    public abstract class GraphQlContract<T> : Species, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A large mass, planet or planetoid in the Star Wars Universe, at the time of
/// 0 ABY.
/// </summary>
public abstract class Planet : IGraphQlResolvable, Node
{
    private Planet() { }
    
    /// <summary>
    /// The name of this planet.
    /// </summary>
    public abstract IGraphQlResult<string?> name();
    
    /// <summary>
    /// The diameter of this planet in kilometers.
    /// </summary>
    public abstract IGraphQlResult<int?> diameter();
    
    /// <summary>
    /// The number of standard hours it takes for this planet to complete a single
    /// rotation on its axis.
    /// </summary>
    public abstract IGraphQlResult<int?> rotationPeriod();
    
    /// <summary>
    /// The number of standard days it takes for this planet to complete a single orbit
    /// of its local star.
    /// </summary>
    public abstract IGraphQlResult<int?> orbitalPeriod();
    
    /// <summary>
    /// A number denoting the gravity of this planet, where \\"1\\" is normal or 1 standard
    /// G. \\"2\\" is twice or 2 standard Gs. \\"0.5\\" is half or 0.5 standard Gs.
    /// </summary>
    public abstract IGraphQlResult<string?> gravity();
    
    /// <summary>
    /// The average population of sentient beings inhabiting this planet.
    /// </summary>
    public abstract IGraphQlResult<double?> population();
    
    /// <summary>
    /// The climates of this planet.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<string?>?> climates();
    
    /// <summary>
    /// The terrains of this planet.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<string?>?> terrains();
    
    /// <summary>
    /// The percentage of the planet surface that is naturally occuring water or bodies
    /// of water.
    /// </summary>
    public abstract IGraphQlResult<double?> surfaceWater();
    public abstract IGraphQlResult<PlanetResidentsConnection?> residentConnection(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<PlanetFilmsConnection?> filmConnection(string? after, int? first, string? before, int? last);
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was created.
    /// </summary>
    public abstract IGraphQlResult<string?> created();
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was edited.
    /// </summary>
    public abstract IGraphQlResult<string?> edited();
    
    /// <summary>
    /// The ID of an object
    /// </summary>
    public abstract IGraphQlResult<string> id();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Planet\\");
            case \\"name\\": return this.name();
            case \\"diameter\\": return this.diameter();
            case \\"rotationPeriod\\": return this.rotationPeriod();
            case \\"orbitalPeriod\\": return this.orbitalPeriod();
            case \\"gravity\\": return this.gravity();
            case \\"population\\": return this.population();
            case \\"climates\\": return this.climates();
            case \\"terrains\\": return this.terrains();
            case \\"surfaceWater\\": return this.surfaceWater();
            case \\"residentConnection\\": return this.residentConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"filmConnection\\": return this.filmConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"created\\": return this.created();
            case \\"edited\\": return this.edited();
            case \\"id\\": return this.id();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Planet\\" || value == \\"Node\\";
    }

    public abstract class GraphQlContract<T> : Planet, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class PlanetResidentsConnection : IGraphQlResolvable
{
    private PlanetResidentsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<PlanetResidentsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Person?>?> residents();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PlanetResidentsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"residents\\": return this.residents();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PlanetResidentsConnection\\";
    }

    public abstract class GraphQlContract<T> : PlanetResidentsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class PlanetResidentsEdge : IGraphQlResolvable
{
    private PlanetResidentsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Person?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PlanetResidentsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PlanetResidentsEdge\\";
    }

    public abstract class GraphQlContract<T> : PlanetResidentsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An individual person or character within the Star Wars universe.
/// </summary>
public abstract class Person : IGraphQlResolvable, Node
{
    private Person() { }
    
    /// <summary>
    /// The name of this person.
    /// </summary>
    public abstract IGraphQlResult<string?> name();
    
    /// <summary>
    /// The birth year of the person, using the in-universe standard of BBY or ABY -
    /// Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is
    /// a battle that occurs at the end of Star Wars episode IV: A New Hope.
    /// </summary>
    public abstract IGraphQlResult<string?> birthYear();
    
    /// <summary>
    /// The eye color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
    /// person does not have an eye.
    /// </summary>
    public abstract IGraphQlResult<string?> eyeColor();
    
    /// <summary>
    /// The gender of this person. Either \\"Male\\", \\"Female\\" or \\"unknown\\",
    /// \\"n/a\\" if the person does not have a gender.
    /// </summary>
    public abstract IGraphQlResult<string?> gender();
    
    /// <summary>
    /// The hair color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
    /// person does not have hair.
    /// </summary>
    public abstract IGraphQlResult<string?> hairColor();
    
    /// <summary>
    /// The height of the person in centimeters.
    /// </summary>
    public abstract IGraphQlResult<int?> height();
    
    /// <summary>
    /// The mass of the person in kilograms.
    /// </summary>
    public abstract IGraphQlResult<double?> mass();
    
    /// <summary>
    /// The skin color of this person.
    /// </summary>
    public abstract IGraphQlResult<string?> skinColor();
    
    /// <summary>
    /// A planet that this person was born on or inhabits.
    /// </summary>
    public abstract IGraphQlResult<Planet?> homeworld();
    public abstract IGraphQlResult<PersonFilmsConnection?> filmConnection(string? after, int? first, string? before, int? last);
    
    /// <summary>
    /// The species that this person belongs to, or null if unknown.
    /// </summary>
    public abstract IGraphQlResult<Species?> species();
    public abstract IGraphQlResult<PersonStarshipsConnection?> starshipConnection(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<PersonVehiclesConnection?> vehicleConnection(string? after, int? first, string? before, int? last);
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was created.
    /// </summary>
    public abstract IGraphQlResult<string?> created();
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was edited.
    /// </summary>
    public abstract IGraphQlResult<string?> edited();
    
    /// <summary>
    /// The ID of an object
    /// </summary>
    public abstract IGraphQlResult<string> id();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Person\\");
            case \\"name\\": return this.name();
            case \\"birthYear\\": return this.birthYear();
            case \\"eyeColor\\": return this.eyeColor();
            case \\"gender\\": return this.gender();
            case \\"hairColor\\": return this.hairColor();
            case \\"height\\": return this.height();
            case \\"mass\\": return this.mass();
            case \\"skinColor\\": return this.skinColor();
            case \\"homeworld\\": return this.homeworld();
            case \\"filmConnection\\": return this.filmConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"species\\": return this.species();
            case \\"starshipConnection\\": return this.starshipConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"vehicleConnection\\": return this.vehicleConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"created\\": return this.created();
            case \\"edited\\": return this.edited();
            case \\"id\\": return this.id();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Person\\" || value == \\"Node\\";
    }

    public abstract class GraphQlContract<T> : Person, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class PersonFilmsConnection : IGraphQlResolvable
{
    private PersonFilmsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<PersonFilmsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Film?>?> films();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PersonFilmsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"films\\": return this.films();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PersonFilmsConnection\\";
    }

    public abstract class GraphQlContract<T> : PersonFilmsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class PersonFilmsEdge : IGraphQlResolvable
{
    private PersonFilmsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Film?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PersonFilmsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PersonFilmsEdge\\";
    }

    public abstract class GraphQlContract<T> : PersonFilmsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class PersonStarshipsConnection : IGraphQlResolvable
{
    private PersonStarshipsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<PersonStarshipsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Starship?>?> starships();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PersonStarshipsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"starships\\": return this.starships();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PersonStarshipsConnection\\";
    }

    public abstract class GraphQlContract<T> : PersonStarshipsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class PersonStarshipsEdge : IGraphQlResolvable
{
    private PersonStarshipsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Starship?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PersonStarshipsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PersonStarshipsEdge\\";
    }

    public abstract class GraphQlContract<T> : PersonStarshipsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A single transport craft that has hyperdrive capability.
/// </summary>
public abstract class Starship : IGraphQlResolvable, Node
{
    private Starship() { }
    
    /// <summary>
    /// The name of this starship. The common name, such as \\"Death Star\\".
    /// </summary>
    public abstract IGraphQlResult<string?> name();
    
    /// <summary>
    /// The model or official name of this starship. Such as \\"T-65 X-wing\\" or \\"DS-1
    /// Orbital Battle Station\\".
    /// </summary>
    public abstract IGraphQlResult<string?> model();
    
    /// <summary>
    /// The class of this starship, such as \\"Starfighter\\" or \\"Deep Space Mobile
    /// Battlestation\\"
    /// </summary>
    public abstract IGraphQlResult<string?> starshipClass();
    
    /// <summary>
    /// The manufacturers of this starship.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<string?>?> manufacturers();
    
    /// <summary>
    /// The cost of this starship new, in galactic credits.
    /// </summary>
    public abstract IGraphQlResult<double?> costInCredits();
    
    /// <summary>
    /// The length of this starship in meters.
    /// </summary>
    public abstract IGraphQlResult<double?> length();
    
    /// <summary>
    /// The number of personnel needed to run or pilot this starship.
    /// </summary>
    public abstract IGraphQlResult<string?> crew();
    
    /// <summary>
    /// The number of non-essential people this starship can transport.
    /// </summary>
    public abstract IGraphQlResult<string?> passengers();
    
    /// <summary>
    /// The maximum speed of this starship in atmosphere. null if this starship is
    /// incapable of atmosphering flight.
    /// </summary>
    public abstract IGraphQlResult<int?> maxAtmospheringSpeed();
    
    /// <summary>
    /// The class of this starships hyperdrive.
    /// </summary>
    public abstract IGraphQlResult<double?> hyperdriveRating();
    
    /// <summary>
    /// The Maximum number of Megalights this starship can travel in a standard hour.
    /// A \\"Megalight\\" is a standard unit of distance and has never been defined before
    /// within the Star Wars universe. This figure is only really useful for measuring
    /// the difference in speed of starships. We can assume it is similar to AU, the
    /// distance between our Sun (Sol) and Earth.
    /// </summary>
    public abstract IGraphQlResult<int?> MGLT();
    
    /// <summary>
    /// The maximum number of kilograms that this starship can transport.
    /// </summary>
    public abstract IGraphQlResult<double?> cargoCapacity();
    
    /// <summary>
    /// The maximum length of time that this starship can provide consumables for its
    /// entire crew without having to resupply.
    /// </summary>
    public abstract IGraphQlResult<string?> consumables();
    public abstract IGraphQlResult<StarshipPilotsConnection?> pilotConnection(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<StarshipFilmsConnection?> filmConnection(string? after, int? first, string? before, int? last);
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was created.
    /// </summary>
    public abstract IGraphQlResult<string?> created();
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was edited.
    /// </summary>
    public abstract IGraphQlResult<string?> edited();
    
    /// <summary>
    /// The ID of an object
    /// </summary>
    public abstract IGraphQlResult<string> id();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Starship\\");
            case \\"name\\": return this.name();
            case \\"model\\": return this.model();
            case \\"starshipClass\\": return this.starshipClass();
            case \\"manufacturers\\": return this.manufacturers();
            case \\"costInCredits\\": return this.costInCredits();
            case \\"length\\": return this.length();
            case \\"crew\\": return this.crew();
            case \\"passengers\\": return this.passengers();
            case \\"maxAtmospheringSpeed\\": return this.maxAtmospheringSpeed();
            case \\"hyperdriveRating\\": return this.hyperdriveRating();
            case \\"MGLT\\": return this.MGLT();
            case \\"cargoCapacity\\": return this.cargoCapacity();
            case \\"consumables\\": return this.consumables();
            case \\"pilotConnection\\": return this.pilotConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"filmConnection\\": return this.filmConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"created\\": return this.created();
            case \\"edited\\": return this.edited();
            case \\"id\\": return this.id();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Starship\\" || value == \\"Node\\";
    }

    public abstract class GraphQlContract<T> : Starship, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class StarshipPilotsConnection : IGraphQlResolvable
{
    private StarshipPilotsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<StarshipPilotsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Person?>?> pilots();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"StarshipPilotsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"pilots\\": return this.pilots();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"StarshipPilotsConnection\\";
    }

    public abstract class GraphQlContract<T> : StarshipPilotsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class StarshipPilotsEdge : IGraphQlResolvable
{
    private StarshipPilotsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Person?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"StarshipPilotsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"StarshipPilotsEdge\\";
    }

    public abstract class GraphQlContract<T> : StarshipPilotsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class StarshipFilmsConnection : IGraphQlResolvable
{
    private StarshipFilmsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<StarshipFilmsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Film?>?> films();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"StarshipFilmsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"films\\": return this.films();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"StarshipFilmsConnection\\";
    }

    public abstract class GraphQlContract<T> : StarshipFilmsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class StarshipFilmsEdge : IGraphQlResolvable
{
    private StarshipFilmsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Film?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"StarshipFilmsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"StarshipFilmsEdge\\";
    }

    public abstract class GraphQlContract<T> : StarshipFilmsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class PersonVehiclesConnection : IGraphQlResolvable
{
    private PersonVehiclesConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<PersonVehiclesEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Vehicle?>?> vehicles();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PersonVehiclesConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"vehicles\\": return this.vehicles();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PersonVehiclesConnection\\";
    }

    public abstract class GraphQlContract<T> : PersonVehiclesConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class PersonVehiclesEdge : IGraphQlResolvable
{
    private PersonVehiclesEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Vehicle?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PersonVehiclesEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PersonVehiclesEdge\\";
    }

    public abstract class GraphQlContract<T> : PersonVehiclesEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A single transport craft that does not have hyperdrive capability
/// </summary>
public abstract class Vehicle : IGraphQlResolvable, Node
{
    private Vehicle() { }
    
    /// <summary>
    /// The name of this vehicle. The common name, such as \\"Sand Crawler\\" or \\"Speeder
    /// bike\\".
    /// </summary>
    public abstract IGraphQlResult<string?> name();
    
    /// <summary>
    /// The model or official name of this vehicle. Such as \\"All-Terrain Attack
    /// Transport\\".
    /// </summary>
    public abstract IGraphQlResult<string?> model();
    
    /// <summary>
    /// The class of this vehicle, such as \\"Wheeled\\" or \\"Repulsorcraft\\".
    /// </summary>
    public abstract IGraphQlResult<string?> vehicleClass();
    
    /// <summary>
    /// The manufacturers of this vehicle.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<string?>?> manufacturers();
    
    /// <summary>
    /// The cost of this vehicle new, in Galactic Credits.
    /// </summary>
    public abstract IGraphQlResult<double?> costInCredits();
    
    /// <summary>
    /// The length of this vehicle in meters.
    /// </summary>
    public abstract IGraphQlResult<double?> length();
    
    /// <summary>
    /// The number of personnel needed to run or pilot this vehicle.
    /// </summary>
    public abstract IGraphQlResult<string?> crew();
    
    /// <summary>
    /// The number of non-essential people this vehicle can transport.
    /// </summary>
    public abstract IGraphQlResult<string?> passengers();
    
    /// <summary>
    /// The maximum speed of this vehicle in atmosphere.
    /// </summary>
    public abstract IGraphQlResult<int?> maxAtmospheringSpeed();
    
    /// <summary>
    /// The maximum number of kilograms that this vehicle can transport.
    /// </summary>
    public abstract IGraphQlResult<double?> cargoCapacity();
    
    /// <summary>
    /// The maximum length of time that this vehicle can provide consumables for its
    /// entire crew without having to resupply.
    /// </summary>
    public abstract IGraphQlResult<string?> consumables();
    public abstract IGraphQlResult<VehiclePilotsConnection?> pilotConnection(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<VehicleFilmsConnection?> filmConnection(string? after, int? first, string? before, int? last);
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was created.
    /// </summary>
    public abstract IGraphQlResult<string?> created();
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was edited.
    /// </summary>
    public abstract IGraphQlResult<string?> edited();
    
    /// <summary>
    /// The ID of an object
    /// </summary>
    public abstract IGraphQlResult<string> id();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"Vehicle\\");
            case \\"name\\": return this.name();
            case \\"model\\": return this.model();
            case \\"vehicleClass\\": return this.vehicleClass();
            case \\"manufacturers\\": return this.manufacturers();
            case \\"costInCredits\\": return this.costInCredits();
            case \\"length\\": return this.length();
            case \\"crew\\": return this.crew();
            case \\"passengers\\": return this.passengers();
            case \\"maxAtmospheringSpeed\\": return this.maxAtmospheringSpeed();
            case \\"cargoCapacity\\": return this.cargoCapacity();
            case \\"consumables\\": return this.consumables();
            case \\"pilotConnection\\": return this.pilotConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"filmConnection\\": return this.filmConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null));
            case \\"created\\": return this.created();
            case \\"edited\\": return this.edited();
            case \\"id\\": return this.id();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"Vehicle\\" || value == \\"Node\\";
    }

    public abstract class GraphQlContract<T> : Vehicle, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class VehiclePilotsConnection : IGraphQlResolvable
{
    private VehiclePilotsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<VehiclePilotsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Person?>?> pilots();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"VehiclePilotsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"pilots\\": return this.pilots();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"VehiclePilotsConnection\\";
    }

    public abstract class GraphQlContract<T> : VehiclePilotsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class VehiclePilotsEdge : IGraphQlResolvable
{
    private VehiclePilotsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Person?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"VehiclePilotsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"VehiclePilotsEdge\\";
    }

    public abstract class GraphQlContract<T> : VehiclePilotsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class VehicleFilmsConnection : IGraphQlResolvable
{
    private VehicleFilmsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<VehicleFilmsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Film?>?> films();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"VehicleFilmsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"films\\": return this.films();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"VehicleFilmsConnection\\";
    }

    public abstract class GraphQlContract<T> : VehicleFilmsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class VehicleFilmsEdge : IGraphQlResolvable
{
    private VehicleFilmsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Film?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"VehicleFilmsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"VehicleFilmsEdge\\";
    }

    public abstract class GraphQlContract<T> : VehicleFilmsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class PlanetFilmsConnection : IGraphQlResolvable
{
    private PlanetFilmsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<PlanetFilmsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Film?>?> films();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PlanetFilmsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"films\\": return this.films();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PlanetFilmsConnection\\";
    }

    public abstract class GraphQlContract<T> : PlanetFilmsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class PlanetFilmsEdge : IGraphQlResolvable
{
    private PlanetFilmsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Film?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PlanetFilmsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PlanetFilmsEdge\\";
    }

    public abstract class GraphQlContract<T> : PlanetFilmsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class SpeciesPeopleConnection : IGraphQlResolvable
{
    private SpeciesPeopleConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<SpeciesPeopleEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Person?>?> people();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"SpeciesPeopleConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"people\\": return this.people();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"SpeciesPeopleConnection\\";
    }

    public abstract class GraphQlContract<T> : SpeciesPeopleConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class SpeciesPeopleEdge : IGraphQlResolvable
{
    private SpeciesPeopleEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Person?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"SpeciesPeopleEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"SpeciesPeopleEdge\\";
    }

    public abstract class GraphQlContract<T> : SpeciesPeopleEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class SpeciesFilmsConnection : IGraphQlResolvable
{
    private SpeciesFilmsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<SpeciesFilmsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Film?>?> films();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"SpeciesFilmsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"films\\": return this.films();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"SpeciesFilmsConnection\\";
    }

    public abstract class GraphQlContract<T> : SpeciesFilmsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class SpeciesFilmsEdge : IGraphQlResolvable
{
    private SpeciesFilmsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Film?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"SpeciesFilmsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"SpeciesFilmsEdge\\";
    }

    public abstract class GraphQlContract<T> : SpeciesFilmsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class FilmStarshipsConnection : IGraphQlResolvable
{
    private FilmStarshipsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<FilmStarshipsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Starship?>?> starships();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FilmStarshipsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"starships\\": return this.starships();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FilmStarshipsConnection\\";
    }

    public abstract class GraphQlContract<T> : FilmStarshipsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class FilmStarshipsEdge : IGraphQlResolvable
{
    private FilmStarshipsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Starship?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FilmStarshipsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FilmStarshipsEdge\\";
    }

    public abstract class GraphQlContract<T> : FilmStarshipsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class FilmVehiclesConnection : IGraphQlResolvable
{
    private FilmVehiclesConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<FilmVehiclesEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Vehicle?>?> vehicles();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FilmVehiclesConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"vehicles\\": return this.vehicles();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FilmVehiclesConnection\\";
    }

    public abstract class GraphQlContract<T> : FilmVehiclesConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class FilmVehiclesEdge : IGraphQlResolvable
{
    private FilmVehiclesEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Vehicle?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FilmVehiclesEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FilmVehiclesEdge\\";
    }

    public abstract class GraphQlContract<T> : FilmVehiclesEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class FilmCharactersConnection : IGraphQlResolvable
{
    private FilmCharactersConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<FilmCharactersEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Person?>?> characters();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FilmCharactersConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"characters\\": return this.characters();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FilmCharactersConnection\\";
    }

    public abstract class GraphQlContract<T> : FilmCharactersConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class FilmCharactersEdge : IGraphQlResolvable
{
    private FilmCharactersEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Person?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FilmCharactersEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FilmCharactersEdge\\";
    }

    public abstract class GraphQlContract<T> : FilmCharactersEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class FilmPlanetsConnection : IGraphQlResolvable
{
    private FilmPlanetsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<FilmPlanetsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Planet?>?> planets();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FilmPlanetsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"planets\\": return this.planets();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FilmPlanetsConnection\\";
    }

    public abstract class GraphQlContract<T> : FilmPlanetsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class FilmPlanetsEdge : IGraphQlResolvable
{
    private FilmPlanetsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Planet?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"FilmPlanetsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"FilmPlanetsEdge\\";
    }

    public abstract class GraphQlContract<T> : FilmPlanetsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class PeopleConnection : IGraphQlResolvable
{
    private PeopleConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<PeopleEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Person?>?> people();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PeopleConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"people\\": return this.people();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PeopleConnection\\";
    }

    public abstract class GraphQlContract<T> : PeopleConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class PeopleEdge : IGraphQlResolvable
{
    private PeopleEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Person?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PeopleEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PeopleEdge\\";
    }

    public abstract class GraphQlContract<T> : PeopleEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class PlanetsConnection : IGraphQlResolvable
{
    private PlanetsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<PlanetsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Planet?>?> planets();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PlanetsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"planets\\": return this.planets();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PlanetsConnection\\";
    }

    public abstract class GraphQlContract<T> : PlanetsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class PlanetsEdge : IGraphQlResolvable
{
    private PlanetsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Planet?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"PlanetsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"PlanetsEdge\\";
    }

    public abstract class GraphQlContract<T> : PlanetsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class SpeciesConnection : IGraphQlResolvable
{
    private SpeciesConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<SpeciesEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Species?>?> species();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"SpeciesConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"species\\": return this.species();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"SpeciesConnection\\";
    }

    public abstract class GraphQlContract<T> : SpeciesConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class SpeciesEdge : IGraphQlResolvable
{
    private SpeciesEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Species?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"SpeciesEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"SpeciesEdge\\";
    }

    public abstract class GraphQlContract<T> : SpeciesEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class StarshipsConnection : IGraphQlResolvable
{
    private StarshipsConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<StarshipsEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Starship?>?> starships();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"StarshipsConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"starships\\": return this.starships();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"StarshipsConnection\\";
    }

    public abstract class GraphQlContract<T> : StarshipsConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class StarshipsEdge : IGraphQlResolvable
{
    private StarshipsEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Starship?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"StarshipsEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"StarshipsEdge\\";
    }

    public abstract class GraphQlContract<T> : StarshipsEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// A connection to a list of items.
/// </summary>
public abstract class VehiclesConnection : IGraphQlResolvable
{
    private VehiclesConnection() { }
    
    /// <summary>
    /// Information to aid in pagination.
    /// </summary>
    public abstract IGraphQlResult<PageInfo> pageInfo();
    
    /// <summary>
    /// A list of edges.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<VehiclesEdge?>?> edges();
    
    /// <summary>
    /// A count of the total number of objects in this connection, ignoring pagination.
    /// This allows a client to fetch the first five objects by passing \\"5\\" as the
    /// argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
    /// for example.
    /// </summary>
    public abstract IGraphQlResult<int?> totalCount();
    
    /// <summary>
    /// A list of all of the objects returned in the connection. This is a convenience
    /// field provided for quickly exploring the API; rather than querying for
    /// \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
    /// instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
    /// the edge to enable efficient pagination, this shortcut cannot be used, and the
    /// full \\"{ edges { node } }\\" version should be used instead.
    /// </summary>
    public abstract IGraphQlResult<IEnumerable<Vehicle?>?> vehicles();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"VehiclesConnection\\");
            case \\"pageInfo\\": return this.pageInfo();
            case \\"edges\\": return this.edges();
            case \\"totalCount\\": return this.totalCount();
            case \\"vehicles\\": return this.vehicles();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"VehiclesConnection\\";
    }

    public abstract class GraphQlContract<T> : VehiclesConnection, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}


/// <summary>
/// An edge in a connection.
/// </summary>
public abstract class VehiclesEdge : IGraphQlResolvable
{
    private VehiclesEdge() { }
    
    /// <summary>
    /// The item at the end of the edge
    /// </summary>
    public abstract IGraphQlResult<Vehicle?> node();
    
    /// <summary>
    /// A cursor for use in pagination
    /// </summary>
    public abstract IGraphQlResult<string> cursor();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters)
    {
        switch (name)
        {
            case \\"__typename\\": return GraphQlConstantResult.Construct(\\"VehiclesEdge\\");
            case \\"node\\": return this.node();
            case \\"cursor\\": return this.cursor();
            default: throw new ArgumentException(\\"Unknown property \\" + name, \\"name\\");
        };
    }

    bool IGraphQlResolvable.IsType(string value)
    {
        return value == \\"VehiclesEdge\\";
    }

    public abstract class GraphQlContract<T> : VehiclesEdge, IGraphQlAccepts<T>
    {
        public IGraphQlResultFactory<T> Original { get; set; }
        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
    }
}
"
`;
