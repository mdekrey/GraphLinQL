// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`can generate v4 types 1`] = `
"
/// <summary>
/// An individual person or character within the Star Wars universe.
/// </summary>
public abstract class Person : Node
{
    private Person() { }
    
    /// <summary>
    /// The name of this person.
    /// </summary>
    public abstract IGraphQlResult<string?> name();
    
    /// <summary>
    /// The birth year of the person, using the in-universe standard of BBY or ABY -
    /// Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is
    /// a battle that occurs at the end of Star Wars episode IV: A New Hope.
    /// </summary>
    public abstract IGraphQlResult<string?> birthYear();
    
    /// <summary>
    /// The eye color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
    /// person does not have an eye.
    /// </summary>
    public abstract IGraphQlResult<string?> eyeColor();
    
    /// <summary>
    /// The gender of this person. Either \\"Male\\", \\"Female\\" or \\"unknown\\",
    /// \\"n/a\\" if the person does not have a gender.
    /// </summary>
    public abstract IGraphQlResult<string?> gender();
    
    /// <summary>
    /// The hair color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
    /// person does not have hair.
    /// </summary>
    public abstract IGraphQlResult<string?> hairColor();
    
    /// <summary>
    /// The height of the person in centimeters.
    /// </summary>
    public abstract IGraphQlResult<int?> height();
    
    /// <summary>
    /// The mass of the person in kilograms.
    /// </summary>
    public abstract IGraphQlResult<double?> mass();
    
    /// <summary>
    /// The skin color of this person.
    /// </summary>
    public abstract IGraphQlResult<string?> skinColor();
    
    /// <summary>
    /// A planet that this person was born on or inhabits.
    /// </summary>
    public abstract IGraphQlResult<Planet?> homeworld();
    public abstract IGraphQlResult<PersonFilmsConnection?> filmConnection(string? after, int? first, string? before, int? last);
    
    /// <summary>
    /// The species that this person belongs to, or null if unknown.
    /// </summary>
    public abstract IGraphQlResult<Species?> species();
    public abstract IGraphQlResult<PersonStarshipsConnection?> starshipConnection(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<PersonVehiclesConnection?> vehicleConnection(string? after, int? first, string? before, int? last);
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was created.
    /// </summary>
    public abstract IGraphQlResult<string?> created();
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was edited.
    /// </summary>
    public abstract IGraphQlResult<string?> edited();
    
    /// <summary>
    /// The ID of an object
    /// </summary>
    public abstract IGraphQlResult<GraphQlResolver.CommonTypes.GraphQlId> id();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IDictionary<string, object> parameters) =>
        name switch
        {
            \\"name\\" => name(),
            \\"birthYear\\" => birthYear(),
            \\"eyeColor\\" => eyeColor(),
            \\"gender\\" => gender(),
            \\"hairColor\\" => hairColor(),
            \\"height\\" => height(),
            \\"mass\\" => mass(),
            \\"skinColor\\" => skinColor(),
            \\"homeworld\\" => homeworld(),
            \\"filmConnection\\" => filmConnection(
                after: (parameters.TryGetValue(\\"after\\", out var after) ? (string?)after : null),
                first: (parameters.TryGetValue(\\"first\\", out var first) ? (int?)first : null),
                before: (parameters.TryGetValue(\\"before\\", out var before) ? (string?)before : null),
                last: (parameters.TryGetValue(\\"last\\", out var last) ? (int?)last : null)),
            \\"species\\" => species(),
            \\"starshipConnection\\" => starshipConnection(
                after: (parameters.TryGetValue(\\"after\\", out var after) ? (string?)after : null),
                first: (parameters.TryGetValue(\\"first\\", out var first) ? (int?)first : null),
                before: (parameters.TryGetValue(\\"before\\", out var before) ? (string?)before : null),
                last: (parameters.TryGetValue(\\"last\\", out var last) ? (int?)last : null)),
            \\"vehicleConnection\\" => vehicleConnection(
                after: (parameters.TryGetValue(\\"after\\", out var after) ? (string?)after : null),
                first: (parameters.TryGetValue(\\"first\\", out var first) ? (int?)first : null),
                before: (parameters.TryGetValue(\\"before\\", out var before) ? (string?)before : null),
                last: (parameters.TryGetValue(\\"last\\", out var last) ? (int?)last : null)),
            \\"created\\" => created(),
            \\"edited\\" => edited(),
            \\"id\\" => id(),
            _ => throw new ArgumentException(\\"Unknown property \\" + name, nameof(name))
        };

    bool IGraphQlResolvable.IsType(string value) =>
      value == \\"Person\\";

    public abstract class GraphQlContract<T> : Person, IGraphQlAccepts<T>
    {
#nullable disable
        public IGraphQlResultFactory<T> Original { get; set; }
#nullable restore

        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
        Type IGraphQlAccepts.ModelType => typeof(T);
    }
}
"
`;
