// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`can generate v4 types 1`] = `
"
/// <summary>
/// An individual person or character within the Star Wars universe.
/// </summary>
public abstract class Person : IGraphQlResolvable, Node
{
    private Person() { }
    
    /// <summary>
    /// The name of this person.
    /// </summary>
    public abstract IGraphQlResult<string?> name();
    
    /// <summary>
    /// The birth year of the person, using the in-universe standard of BBY or ABY -
    /// Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is
    /// a battle that occurs at the end of Star Wars episode IV: A New Hope.
    /// </summary>
    public abstract IGraphQlResult<string?> birthYear();
    
    /// <summary>
    /// The eye color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
    /// person does not have an eye.
    /// </summary>
    public abstract IGraphQlResult<string?> eyeColor();
    
    /// <summary>
    /// The gender of this person. Either \\"Male\\", \\"Female\\" or \\"unknown\\",
    /// \\"n/a\\" if the person does not have a gender.
    /// </summary>
    public abstract IGraphQlResult<string?> gender();
    
    /// <summary>
    /// The hair color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
    /// person does not have hair.
    /// </summary>
    public abstract IGraphQlResult<string?> hairColor();
    
    /// <summary>
    /// The height of the person in centimeters.
    /// </summary>
    public abstract IGraphQlResult<int?> height();
    
    /// <summary>
    /// The mass of the person in kilograms.
    /// </summary>
    public abstract IGraphQlResult<double?> mass();
    
    /// <summary>
    /// The skin color of this person.
    /// </summary>
    public abstract IGraphQlResult<string?> skinColor();
    
    /// <summary>
    /// A planet that this person was born on or inhabits.
    /// </summary>
    public abstract IGraphQlResult<Planet?> homeworld();
    public abstract IGraphQlResult<PersonFilmsConnection?> filmConnection(string? after, int? first, string? before, int? last);
    
    /// <summary>
    /// The species that this person belongs to, or null if unknown.
    /// </summary>
    public abstract IGraphQlResult<Species?> species();
    public abstract IGraphQlResult<PersonStarshipsConnection?> starshipConnection(string? after, int? first, string? before, int? last);
    public abstract IGraphQlResult<PersonVehiclesConnection?> vehicleConnection(string? after, int? first, string? before, int? last);
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was created.
    /// </summary>
    public abstract IGraphQlResult<string?> created();
    
    /// <summary>
    /// The ISO 8601 date format of the time that this resource was edited.
    /// </summary>
    public abstract IGraphQlResult<string?> edited();
    
    /// <summary>
    /// The ID of an object
    /// </summary>
    public abstract IGraphQlResult<string> id();

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters) =>
        name switch
        {
            \\"__typename\\" => GraphQlConstantResult.Construct(\\"Person\\"),
            \\"name\\" => this.name(),
            \\"birthYear\\" => this.birthYear(),
            \\"eyeColor\\" => this.eyeColor(),
            \\"gender\\" => this.gender(),
            \\"hairColor\\" => this.hairColor(),
            \\"height\\" => this.height(),
            \\"mass\\" => this.mass(),
            \\"skinColor\\" => this.skinColor(),
            \\"homeworld\\" => this.homeworld(),
            \\"filmConnection\\" => this.filmConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null)),
            \\"species\\" => this.species(),
            \\"starshipConnection\\" => this.starshipConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null)),
            \\"vehicleConnection\\" => this.vehicleConnection(
                after: (parameters.HasParameter(\\"after\\") ? parameters.GetParameter<string?>(\\"after\\") : null),
                first: (parameters.HasParameter(\\"first\\") ? parameters.GetParameter<int?>(\\"first\\") : null),
                before: (parameters.HasParameter(\\"before\\") ? parameters.GetParameter<string?>(\\"before\\") : null),
                last: (parameters.HasParameter(\\"last\\") ? parameters.GetParameter<int?>(\\"last\\") : null)),
            \\"created\\" => this.created(),
            \\"edited\\" => this.edited(),
            \\"id\\" => this.id(),
            _ => throw new ArgumentException(\\"Unknown property \\" + name, nameof(name))
        };

    bool IGraphQlResolvable.IsType(string value) =>
      value == \\"Person\\" || value == \\"Node\\";

    public abstract class GraphQlContract<T> : Person, IGraphQlAccepts<T>
    {
#nullable disable
        public IGraphQlResultFactory<T> Original { get; set; }
#nullable enable

        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
        Type IGraphQlAccepts.ModelType => typeof(T);
    }
}
"
`;

exports[`can generate various default values 1`] = `
"

public abstract class Query : IGraphQlResolvable
{
    private Query() { }
    public abstract IGraphQlResult<string?> randomTest(string? id, int? i, double? f, bool? b, IEnumerable<int>? l, string? s, ColorInput? o, ColorInput? n);

    IGraphQlResult IGraphQlResolvable.ResolveQuery(string name, IGraphQlParameterResolver parameters) =>
        name switch
        {
            \\"__typename\\" => GraphQlConstantResult.Construct(\\"Query\\"),
            \\"randomTest\\" => this.randomTest(
                id: (parameters.HasParameter(\\"id\\") ? parameters.GetParameter<string?>(\\"id\\") : null) ?? System.Text.Json.JsonSerializer.Deserialize<string?>(\\"\\\\\\"foo\\\\\\"\\"),
                i: (parameters.HasParameter(\\"i\\") ? parameters.GetParameter<int?>(\\"i\\") : null) ?? 15,
                f: (parameters.HasParameter(\\"f\\") ? parameters.GetParameter<double?>(\\"f\\") : null) ?? 2.5,
                b: (parameters.HasParameter(\\"b\\") ? parameters.GetParameter<bool?>(\\"b\\") : null) ?? true,
                l: (parameters.HasParameter(\\"l\\") ? parameters.GetParameter<IEnumerable<int>?>(\\"l\\") : null) ?? System.Text.Json.JsonSerializer.Deserialize<IEnumerable<int>?>(\\"[5,4,3]\\"),
                s: (parameters.HasParameter(\\"s\\") ? parameters.GetParameter<string?>(\\"s\\") : null) ?? \\"evil\\\\\\"\\\\\\\\\\\\\\"string\\\\\\\\\\",
                o: (parameters.HasParameter(\\"o\\") ? parameters.GetParameter<ColorInput?>(\\"o\\") : null) ?? System.Text.Json.JsonSerializer.Deserialize<ColorInput?>(\\"{\\\\\\"red\\\\\\":255,\\\\\\"green\\\\\\":255,\\\\\\"blue\\\\\\":255}\\"),
                n: (parameters.HasParameter(\\"n\\") ? parameters.GetParameter<ColorInput?>(\\"n\\") : null)),
            _ => throw new ArgumentException(\\"Unknown property \\" + name, nameof(name))
        };

    bool IGraphQlResolvable.IsType(string value) =>
      value == \\"Query\\";

    public abstract class GraphQlContract<T> : Query, IGraphQlAccepts<T>
    {
#nullable disable
        public IGraphQlResultFactory<T> Original { get; set; }
#nullable enable

        IGraphQlResultFactory IGraphQlAccepts.Original { set { Original = (IGraphQlResultFactory<T>)value; } }
        Type IGraphQlAccepts.ModelType => typeof(T);
    }
}
"
`;
