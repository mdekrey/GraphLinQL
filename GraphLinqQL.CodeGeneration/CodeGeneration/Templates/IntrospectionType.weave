@model ITypeDeclaration
@classname IntrospectionTypeGenerator
@namespace GraphLinqQL.CodeGeneration.Templates

{{= "" }}
[System.CodeDom.Compiler.GeneratedCode("GraphLinqQL", "{{= Generator.Version()}}")]
public class {{= model.TypeName }} : IGraphQlTypeInformation
{
	public string Name { get { return "{{= model.Label }}"; } }
	public string{{= model.NullabilityIndicator() }} Description { get { return {{if model.Description != null}}@"{{= model.Description.Replace("\"", "\"\"") }}"{{else}}null{{/if}}; } }
	public TypeKind Kind { get { return TypeKind.{{= model.TypeKind }}; } }
	public Type{{= model.NullabilityIndicator() }} OfType { get { return null; } }
	{{if model.ImplementedInterfaces == null}}
		public IReadOnlyList<Type>{{= model.NullabilityIndicator() }} Interfaces { get { return null; } }
	{{else}}
		private IReadOnlyList<Type> implementedInterfaces = new Type[]
		{
			{{each iface in model.ImplementedInterfaces}}
				typeof({{= iface }}),
			{{/each}}
		};
		public IReadOnlyList<Type>{{= model.NullabilityIndicator() }} Interfaces { get { return implementedInterfaces; } }
	{{/if}}
	{{if model.PossibleTypes == null}}
		public IReadOnlyList<Type>{{= model.NullabilityIndicator() }} PossibleTypes { get { return null; } }
	{{else}}
		private IReadOnlyList<Type> possibleTypes = new Type[]
		{
			{{each possibleType in model.PossibleTypes}}
				typeof({{= possibleType }}),
			{{/each}}
		};
		public IReadOnlyList<Type>{{= model.NullabilityIndicator() }} PossibleTypes { get { return possibleTypes; } }
	{{/if}}
	{{if model.EnumValues == null}}
		public IEnumerable<GraphQlEnumValueInformation>{{= model.NullabilityIndicator() }} EnumValues(bool? includeDeprecated) { return null; }
	{{else}}
		private IReadOnlyList<GraphQlEnumValueInformation> enumValues = new GraphQlEnumValueInformation[]
		{
			{{each enumValue in model.EnumValues}}
				new GraphQlEnumValueInformation(
					name: "{{= enumValue.Label }}",
					description: {{if enumValue.Description != null}}@"{{= enumValue.Description.Replace("\"", "\"\"") }}"{{else}}null{{/if}},
					isDeprecated: {{= enumValue.IsDeprecated ? "true" : "false" }},
					deprecationReason: {{if enumValue.DeprecationReason != null}}@"{{= enumValue.DeprecationReason.Replace("\"", "\"\"") }}"{{else}}null{{/if}}
				),
			{{/each}}
		};
		public IEnumerable<GraphQlEnumValueInformation>{{= model.NullabilityIndicator() }} EnumValues(bool? includeDeprecated) { return enumValues.Where(v => !v.IsDeprecated || (includeDeprecated ?? false)); }

		public class Converter : System.ComponentModel.TypeConverter
        {
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, Type sourceType)
            {
                return sourceType == typeof(string) || sourceType == typeof({{= ((EnumTypeContext)model).FullTypeName }});
            }

            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, Type destinationType)
            {
                return destinationType == typeof(string) || destinationType == typeof({{= ((EnumTypeContext)model).FullTypeName }});
            }

            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
                if (value.GetType() == typeof(string))
                {
                    return ToEnum((string)value);
                }
                else if (value.GetType() == typeof({{= ((EnumTypeContext)model).FullTypeName }}))
                {
                    return ToString(({{= ((EnumTypeContext)model).FullTypeName }})value);
                }
                return base.ConvertFrom(context, culture, value);
            }

            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType)
            {
                if (destinationType == typeof({{= ((EnumTypeContext)model).FullTypeName }}))
                {
                    return ToEnum((string)value);
                }
                else if (destinationType == typeof(string))
                {
                    return ToString(({{= ((EnumTypeContext)model).FullTypeName }})value);
                }
                return base.ConvertTo(context, culture, value, destinationType);
            }

            private {{= ((EnumTypeContext)model).FullTypeName }} ToEnum(string value)
            {
                switch (value)
                {
					{{each enumValue in model.EnumValues}}
						case "{{= enumValue.Label}}": return {{= ((EnumTypeContext)model).FullTypeName }}.{{= enumValue.Name}};
					{{/each}}
                    default: throw new ArgumentException("Invalid value", "value");
                }
            }

            private string ToString({{= ((EnumTypeContext)model).FullTypeName }} value)
            {
                switch (value)
                {
					{{each enumValue in model.EnumValues}}
						case {{= ((EnumTypeContext)model).FullTypeName }}.{{= enumValue.Name}}: return "{{= enumValue.Label}}";
					{{/each}}
                    default: throw new ArgumentException("Invalid value", "value");
                }
            }
        }
	{{/if}}
	{{if model.Fields == null}}
		public IEnumerable<GraphQlFieldInformation>{{= model.NullabilityIndicator() }} Fields(bool? includeDeprecated) { return null; }
	{{else}}
		private IReadOnlyList<GraphQlFieldInformation> fields = new GraphQlFieldInformation[]
		{
			{{each field in model.Fields}}
				new GraphQlFieldInformation(
					type: typeof({{= field.IntrospectionType }}),
					name: "{{= field.Label }}",
					description: {{if field.Description != null}}@"{{= field.Description.Replace("\"", "\"\"") }}"{{else}}null{{/if}},
					args: new GraphQlInputFieldInformation[] {
						{{each arg in field.Arguments}}
							new GraphQlInputFieldInformation(
								name: "{{= arg.Label }}",
								type: typeof({{= arg.IntrospectionType }}),
								description: {{if arg.Description != null}}@"{{= arg.Description.Replace("\"", "\"\"") }}"{{else}}null{{/if}},
								defaultValue: {{= arg.JsonDefaultValue }}
							),
						{{/each}}
					},
					isDeprecated: {{= field.IsDeprecated ? "true" : "false" }},
					deprecationReason: {{if field.DeprecationReason != null}}@"{{= field.DeprecationReason.Replace("\"", "\"\"") }}"{{else}}null{{/if}}
				),
			{{/each}}
		};
		public IEnumerable<GraphQlFieldInformation>{{= model.NullabilityIndicator() }} Fields(bool? includeDeprecated) { return fields.Where(v => !v.IsDeprecated || (includeDeprecated ?? false)); }
	{{/if}}
	{{if model.InputFields == null}}
		public IReadOnlyList<GraphQlInputFieldInformation>{{= model.NullabilityIndicator() }} InputFields { get { return null; } }
	{{else}}
		private IReadOnlyList<GraphQlInputFieldInformation> inputFields = new GraphQlInputFieldInformation[]
		{
			{{each field in model.InputFields}}
				new GraphQlInputFieldInformation(
					name: "{{= field.Label }}",
					type: typeof({{= field.IntrospectionType }}),
					description: {{if field.Description != null}}@"{{= field.Description.Replace("\"", "\"\"") }}"{{else}}null{{/if}},
					defaultValue: {{= field.JsonDefaultValue }}
				),
			{{/each}}
		};
		public IReadOnlyList<GraphQlInputFieldInformation>{{= model.NullabilityIndicator() }} InputFields { get { return inputFields; } }
	{{/if}}
}
