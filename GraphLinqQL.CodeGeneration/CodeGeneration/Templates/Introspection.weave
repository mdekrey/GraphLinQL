@model DocumentContext
@classname IntrospectionNamespaceGenerator
@namespace GraphLinqQL.CodeGeneration.Templates


namespace Introspection
{
	[System.CodeDom.Compiler.GeneratedCode("GraphLinqQL", "{{= Generator.Version()}}")]
	public class TypeListing : global::GraphLinqQL.Introspection.IGraphQlTypeListing
	{
		private static readonly global::System.Collections.Generic.Dictionary<string, global::System.Type> types = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
		{
			{{each declaration in model.GetTypeDeclarations()}}
				{ "{{= declaration.Label }}", typeof(Introspection.{{= declaration.TypeName}}) },
			{{/each}}
		};
		private static readonly global::System.Collections.Generic.IReadOnlyList<global::GraphLinqQL.Introspection.DirectiveInformation> directives = new global::GraphLinqQL.Introspection.DirectiveInformation[] {
			{{each directive in model.Directives}}
				new global::GraphLinqQL.Introspection.DirectiveInformation(
										name: "{{= directive.Label }}",
										locations: new[] {
											{{each location in directive.Locations}}
												GraphLinqQL.Introspection.DirectiveLocation.{{= location }},
											{{/each}}
										},
										args: new global::GraphLinqQL.Introspection.GraphQlInputFieldInformation[] {
											{{each arg in directive.Arguments}}
												new global::GraphLinqQL.Introspection.GraphQlInputFieldInformation(
																				name: "{{=arg.Label}}",
																				type: typeof({{=arg.TypeNameNonNull}}),
																				description: {{if arg.Description != null}}@"{{= arg.Description.Replace("\"", "\"\"") }}"{{else}}null{{/if}},
																				defaultValue: {{= arg.JsonDefaultValue}}),
											{{/each}}
										},
										description: @"{{= directive.Description.Replace("\"", "\"\"") }}"),
			{{/each}}
		};

		public global::System.Type Query { get { return {{= model.QueryTypeName }}; } }
		public global::System.Type{{= model.Nullability ? "?" : ""}} Mutation { get { return {{= model.MutationTypeName }}; } }
		public global::System.Type{{= model.Nullability ? "?" : ""}} Subscription { get { return {{= model.SubscriptionTypeName }}; } }

		public global::System.Collections.Generic.IEnumerable<global::System.Type> TypeInformation { get { return types.Values; } }
		public global::System.Collections.Generic.IEnumerable<global::GraphLinqQL.Introspection.DirectiveInformation> DirectiveInformation { get { return directives; } }

		public global::System.Type{{= model.Nullability ? "?" : ""}} Type(string name)
		{
			global::System.Type type;
			return types.TryGetValue(name, out type) ? type : null;
		}
	}

	{{each declaration in model.GetTypeDeclarations()}}
		{{= declaration.IntrospectionDeclaration(writer, indentation)}}
	{{/each}}
}
