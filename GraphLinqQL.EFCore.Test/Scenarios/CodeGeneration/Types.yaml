scenario: Code Generation
tests:
  - name: Simple type
    given:
      query: |
        type Hello {
          world: String
        }
    when:
      code-generation: true
    then:
      passes: true
      # compile-passes: true
      
  - name: Simple type with parameters
    given:
      query: |
        type Hello {
          to(name: String): String
        }
    when:
      code-generation: true
    then:
      passes: true
      # compile-passes: true
      
  - name: Simple input type
    given:
      query: |
        input Hello {
          world: String
        }
    when:
      code-generation: true
    then:
      passes: true
      # compile-passes: true
      
  - name: Simple enum type
    given:
      query: |
        enum Hello {
          WORLD
        }
    when:
      code-generation: true
    then:
      passes: true
      # compile-passes: true
      
  - name: Simple complete
    given:
      query: |
        schema {
          query: Query
        }
        type Query {
          greeting(name: GreetingDetails = { language: ENGLISH }): String
        }
        input GreetingDetails {
          name: String
          language: Language!
        }
        enum Language {
          ENGLISH
          SPANISH
        }
    when:
      code-generation: true
    then:
      passes: true
      # compile-passes: true
      