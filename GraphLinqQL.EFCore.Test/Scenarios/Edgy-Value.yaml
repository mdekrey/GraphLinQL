scenario: Edge-cases
tests:
  - name: Value domain object to plain integers query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            plain {
              integer
              nullableInteger
              integers
              nullableIntegers
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
            "data": {
                "fromValue": {
                    "plain": {
                        "integer": 0,
                        "nullableInteger": 0,
                        "integers": [ 0, 0, 0, 0, 0 ],
                        "nullableIntegers": [ 0, 0, 0, null, null ]
                    }
                }
            }
        }
        
  - name: Value domain object to deferred integer query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            deferred {
              integer
              nullableInteger
              integers
              nullableIntegers
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
            "data": {
                "fromValue": {
                    "deferred": {
                        "integer": 0,
                        "nullableInteger": 0,
                        "integers": [ 0, 0, 0, 0, 0 ],
                        "nullableIntegers": [ 0, 0, 0, null, null ]
                    }
                }
            }
        }
        
        
  - name: Value domain object to task integer query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            task {
              integer
              nullableInteger
              integers
              nullableIntegers
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
            "data": {
                "fromValue": {
                    "task": {
                        "integer": 0,
                        "nullableInteger": 0,
                        "integers": [ 0, 0, 0, 0, 0 ],
                        "nullableIntegers": [ 0, 0, 0, null, null ]
                    }
                }
            }
        }
        
  - name: Value domain object to plain texts query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            plain {
              text
              nullableText
              texts
              nullableTexts
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
            "data": {
                "fromValue": {
                    "plain": {
                        "text": "0",
                        "nullableText": "0",
                        "texts": [ "0", "0", "0", "0", "0" ],
                        "nullableTexts": [ "0", "0", "0", null, null ]
                    }
                }
            }
        }
        
  - name: Value domain object to deferred text query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            deferred {
              text
              nullableText
              texts
              nullableTexts
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
            "data": {
                "fromValue": {
                    "deferred": {
                        "text": "0",
                        "nullableText": "0",
                        "texts": [ "0", "0", "0", "0", "0" ],
                        "nullableTexts": [ "0", "0", "0", null, null ]
                    }
                }
            }
        }
        
        
  - name: Value domain object to task text query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            task {
              text
              nullableText
              texts
              nullableTexts
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
            "data": {
                "fromValue": {
                    "task": {
                        "text": "0",
                        "nullableText": "0",
                        "texts": [ "0", "0", "0", "0", "0" ],
                        "nullableTexts": [ "0", "0", "0", null, null ]
                    }
                }
            }
        }
        
  - name: Value domain object to plain object query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            plain {
              obj {
                value
              }
              nullableObj {
                value
              }
              objs {
                value
              }
              nullableObjs {
                value
              }
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
          "data": {
            "fromValue": {
              "plain": {
                "obj": { "value": "0" },
                "nullableObj": { "value": "0" },
                "objs": [ { "value": "0" }, { "value": "0" }, { "value": "0" }, { "value": "0" }, { "value": "0" } ],
                "nullableObjs": [ { "value": "0" }, { "value": "0" }, { "value": "0" }, null, null ]
              }
            }
          }
        }
        
  - name: Value domain object to deferred object query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            deferred {
              obj {
                value
              }
              nullableObj {
                value
              }
              objs {
                value
              }
              nullableObjs {
                value
              }
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
          "data": {
            "fromValue": {
              "deferred": {
                "obj": { "value": "0" },
                "nullableObj": { "value": "0" },
                "objs": [ { "value": "0" }, { "value": "0" }, { "value": "0" }, { "value": "0" }, { "value": "0" } ],
                "nullableObjs": [ { "value": "0" }, { "value": "0" }, { "value": "0" }, null, null ]
              }
            }
          }
        }
        
        
  - name: Value domain object to task object query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            task {
              obj {
                value
              }
              nullableObj {
                value
              }
              objs {
                value
              }
              nullableObjs {
                value
              }
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
          "data": {
            "fromValue": {
              "task": {
                "obj": { "value": "0" },
                "nullableObj": { "value": "0" },
                "objs": [ { "value": "0" }, { "value": "0" }, { "value": "0" }, { "value": "0" }, { "value": "0" } ],
                "nullableObjs": [ { "value": "0" }, { "value": "0" }, { "value": "0" }, null, null ]
              }
            }
          }
        }
        
  - name: Value domain object to plain nullable object that has a bad prop query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            plain {
              nullableObj {
                value
                throws
              }
              nullableObjs {
                value
                throws
              }
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
          "data": {
            "fromValue": {
              "plain": {
                "nullableObj": null,
                "nullableObjs": [null,null,null,null,null]
              }
            }
          },
          "errors": [
            {
              "message": "An unhandled error occurred in field \u0022nullableObj\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 4, "Column": 6 } ],
              "arguments": {
                "fieldName": "nullableObj"
              }
            },
            {
              "message": "An unhandled error occurred in field \u0022nullableObjs\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 8, "Column": 6 } ],
              "arguments": {
                "fieldName": "nullableObjs"
              }
            },
            {
              "message": "An unhandled error occurred in field \u0022nullableObjs\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 8, "Column": 6 } ],
              "arguments": {
                "fieldName": "nullableObjs"
              }
            },
            {
              "message": "An unhandled error occurred in field \u0022nullableObjs\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 8, "Column": 6 } ],
              "arguments": {
                "fieldName": "nullableObjs"
              }
            }
          ]
        }
        
  - name: Value domain object to deferred nullable object that has a bad prop query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            deferred {
              nullableObj {
                value
                throws
              }
              nullableObjs {
                value
                throws
              }
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
          "data": {
            "fromValue": {
              "deferred": {
                "nullableObj": null,
                "nullableObjs": [null,null,null,null,null]
              }
            }
          },
          "errors": [
            {
              "message": "An unhandled error occurred in field \u0022nullableObj\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 4, "Column": 6 } ],
              "arguments": {
                "fieldName": "nullableObj"
              }
            },
            {
              "message": "An unhandled error occurred in field \u0022nullableObjs\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 8, "Column": 6 } ],
              "arguments": {
                "fieldName": "nullableObjs"
              }
            },
            {
              "message": "An unhandled error occurred in field \u0022nullableObjs\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 8, "Column": 6 } ],
              "arguments": {
                "fieldName": "nullableObjs"
              }
            },
            {
              "message": "An unhandled error occurred in field \u0022nullableObjs\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 8, "Column": 6 } ],
              "arguments": {
                "fieldName": "nullableObjs"
              }
            }
          ]
        }
        
  - name: Value domain object to task nullable object that has a bad prop query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            task {
              nullableObj {
                value
                throws
              }
              nullableObjs {
                value
                throws
              }
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
          "data": {
            "fromValue": {
              "task": {
                "nullableObj": null,
                "nullableObjs": [null,null,null,null,null]
              }
            }
          },
          "errors": [
            {
              "message": "An unhandled error occurred in field \u0022nullableObj\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 4, "Column": 6 } ],
              "arguments": {
                "fieldName": "nullableObj"
              }
            },
            {
              "message": "An unhandled error occurred in field \u0022nullableObjs\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 8, "Column": 6 } ],
              "arguments": {
                "fieldName": "nullableObjs"
              }
            },
            {
              "message": "An unhandled error occurred in field \u0022nullableObjs\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 8, "Column": 6 } ],
              "arguments": {
                "fieldName": "nullableObjs"
              }
            },
            {
              "message": "An unhandled error occurred in field \u0022nullableObjs\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 8, "Column": 6 } ],
              "arguments": {
                "fieldName": "nullableObjs"
              }
            }
          ]
        }

        
  - name: Value domain object to plain object that has a bad prop query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            plain {
              obj {
                value
                throws
              }
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
          "data": null,
          "errors": [
            {
              "message": "An unhandled error occurred in field \u0022Query\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 1, "Column": 0 } ],
              "arguments": {
                "fieldName": "Query"
              }
            }
          ]
        }
        
        
  - name: Value domain object to deferred object that has a bad prop query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            deferred {
              obj {
                value
                throws
              }
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
          "data": null,
          "errors": [
            {
              "message": "An unhandled error occurred in field \u0022Query\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 1, "Column": 0 } ],
              "arguments": {
                "fieldName": "Query"
              }
            }
          ]
        }
        
        
  - name: Value domain object to task object that has a bad prop query
    given:
      schema: edgy
      query: |
        {
          fromValue {
            task {
              obj {
                value
                throws
              }
            }
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
          "data": null,
          "errors": [
            {
              "message": "An unhandled error occurred in field \u0022Query\u0022. See server logs for details.",
              "errorCode": "unhandledError",
              "locations": [ { "Line": 1, "Column": 0 } ],
              "arguments": {
                "fieldName": "Query"
              }
            }
          ]
        }
        