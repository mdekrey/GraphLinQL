scenario: Reviews
tests:
  - name: Star Wars - Search empty reviews
    given:
      schema: star-wars
      query: |
        {
          reviews(episode: NEWHOPE) {
            episode
            stars
            commentary
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
          "data": {
            "reviews": []
          }
        }
      sqlite:
        - SELECT "r"."Episode", "r"."Stars", "r"."Commentary" FROM "Reviews" AS "r" WHERE ("r"."Episode" = @__ConvertEpisode_0) AND @__ConvertEpisode_0 IS NOT NULL
        
  - name: Star Wars - Add a review and get it back
    given:
      schema: star-wars
      query: |
        mutation {
          createReview(episode: JEDI, review: { stars: 4, commentary: "You don't need Luke Skywalker." }) {
            episode
            stars
            commentary
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
          "data": {
            "createReview": {
                "episode": "JEDI",
                "stars" : 4,
                "commentary": "You don't need Luke Skywalker."
            }
          }
        }
      sqlite:
        - INSERT INTO "Reviews" ("Commentary", "Episode", "Stars") VALUES (@p0, @p1, @p2); SELECT "ReviewId" FROM "Reviews" WHERE changes() = 1 AND "ReviewId" = last_insert_rowid(); 
        
  - name: Star Wars - Add a review and get it back on subsequent requests
    given:
      schema: star-wars
      setup-query: |
        mutation {
          createReview(episode: EMPIRE, review: { stars: 1, commentary: "No disintegrations." }) {
            episode
            stars
            commentary
          }
        }
      query: |
        {
          reviews(episode: EMPIRE) {
            episode
            stars
            commentary
          }
        }
    when:
      execute: true
    then:
      match-result: |
        {
          "data": {
            "reviews": [
              {
                "episode": "EMPIRE",
                "stars" : 1,
                "commentary": "No disintegrations."
              }
            ]
          }
        }
      sqlite:
        - SELECT "r"."Episode", "r"."Stars", "r"."Commentary" FROM "Reviews" AS "r" WHERE ("r"."Episode" = @__ConvertEpisode_0) AND @__ConvertEpisode_0 IS NOT NULL
