
schema {
    query: Query
}

type Query {
	fromValue: WithInput!
	fromReference: WithInput!

	input(value: InputInner!): Inner!
	inputWithUnderscores(value: WithUnderscores!): Inner!
	inputWithCamelCase(value: WithCamelCase!): Inner!
}

type WithInput {
	plain: Complex!
	task: Complex!
	deferred: Complex!
}

type Complex {

	integer: Int!
	nullableInteger: Int
	integers: [Int!]!
	nullableIntegers: [Int]
	
	text: String!
	nullableText: String
	texts: [String!]!
	nullableTexts: [String]
	
	obj: Inner!
	nullableObj: Inner
	objs: [Inner!]!
	nullableObjs: [Inner]

}

type Inner {
	value: String
	throws: String!
	nullableThrows: String
}

input InputInner {
	value: String!
}
input WithUnderscores {
	my_value: String!
}
input WithCamelCase {
	myValue: String!
}