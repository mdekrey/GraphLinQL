//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /source/Graphql.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GraphLinqQL.Ast.Antlr {

     


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IGraphqlListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class GraphqlBaseListener : IGraphqlListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.document"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDocument([NotNull] GraphqlParser.DocumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.document"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDocument([NotNull] GraphqlParser.DocumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefinition([NotNull] GraphqlParser.DefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefinition([NotNull] GraphqlParser.DefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.typeSystemDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeSystemDefinition([NotNull] GraphqlParser.TypeSystemDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.typeSystemDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeSystemDefinition([NotNull] GraphqlParser.TypeSystemDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.schemaDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSchemaDefinition([NotNull] GraphqlParser.SchemaDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.schemaDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSchemaDefinition([NotNull] GraphqlParser.SchemaDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.operationTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOperationTypeDefinition([NotNull] GraphqlParser.OperationTypeDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.operationTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOperationTypeDefinition([NotNull] GraphqlParser.OperationTypeDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.typeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeDefinition([NotNull] GraphqlParser.TypeDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.typeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeDefinition([NotNull] GraphqlParser.TypeDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.typeExtension"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeExtension([NotNull] GraphqlParser.TypeExtensionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.typeExtension"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeExtension([NotNull] GraphqlParser.TypeExtensionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.emptyParentheses"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmptyParentheses([NotNull] GraphqlParser.EmptyParenthesesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.emptyParentheses"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmptyParentheses([NotNull] GraphqlParser.EmptyParenthesesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.scalarTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScalarTypeDefinition([NotNull] GraphqlParser.ScalarTypeDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.scalarTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScalarTypeDefinition([NotNull] GraphqlParser.ScalarTypeDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.scalarTypeExtensionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScalarTypeExtensionDefinition([NotNull] GraphqlParser.ScalarTypeExtensionDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.scalarTypeExtensionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScalarTypeExtensionDefinition([NotNull] GraphqlParser.ScalarTypeExtensionDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.objectTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectTypeDefinition([NotNull] GraphqlParser.ObjectTypeDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.objectTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectTypeDefinition([NotNull] GraphqlParser.ObjectTypeDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.objectTypeExtensionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectTypeExtensionDefinition([NotNull] GraphqlParser.ObjectTypeExtensionDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.objectTypeExtensionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectTypeExtensionDefinition([NotNull] GraphqlParser.ObjectTypeExtensionDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.implementsInterfaces"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImplementsInterfaces([NotNull] GraphqlParser.ImplementsInterfacesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.implementsInterfaces"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImplementsInterfaces([NotNull] GraphqlParser.ImplementsInterfacesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.fieldsDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFieldsDefinition([NotNull] GraphqlParser.FieldsDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.fieldsDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFieldsDefinition([NotNull] GraphqlParser.FieldsDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.extensionFieldsDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExtensionFieldsDefinition([NotNull] GraphqlParser.ExtensionFieldsDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.extensionFieldsDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExtensionFieldsDefinition([NotNull] GraphqlParser.ExtensionFieldsDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.fieldDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFieldDefinition([NotNull] GraphqlParser.FieldDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.fieldDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFieldDefinition([NotNull] GraphqlParser.FieldDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.argumentsDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentsDefinition([NotNull] GraphqlParser.ArgumentsDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.argumentsDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentsDefinition([NotNull] GraphqlParser.ArgumentsDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.inputValueDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInputValueDefinition([NotNull] GraphqlParser.InputValueDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.inputValueDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInputValueDefinition([NotNull] GraphqlParser.InputValueDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.interfaceTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInterfaceTypeDefinition([NotNull] GraphqlParser.InterfaceTypeDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.interfaceTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInterfaceTypeDefinition([NotNull] GraphqlParser.InterfaceTypeDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.interfaceTypeExtensionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInterfaceTypeExtensionDefinition([NotNull] GraphqlParser.InterfaceTypeExtensionDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.interfaceTypeExtensionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInterfaceTypeExtensionDefinition([NotNull] GraphqlParser.InterfaceTypeExtensionDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.unionTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnionTypeDefinition([NotNull] GraphqlParser.UnionTypeDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.unionTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnionTypeDefinition([NotNull] GraphqlParser.UnionTypeDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.unionTypeExtensionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnionTypeExtensionDefinition([NotNull] GraphqlParser.UnionTypeExtensionDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.unionTypeExtensionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnionTypeExtensionDefinition([NotNull] GraphqlParser.UnionTypeExtensionDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.unionMembership"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnionMembership([NotNull] GraphqlParser.UnionMembershipContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.unionMembership"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnionMembership([NotNull] GraphqlParser.UnionMembershipContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.unionMembers"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnionMembers([NotNull] GraphqlParser.UnionMembersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.unionMembers"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnionMembers([NotNull] GraphqlParser.UnionMembersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.enumTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnumTypeDefinition([NotNull] GraphqlParser.EnumTypeDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.enumTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnumTypeDefinition([NotNull] GraphqlParser.EnumTypeDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.enumTypeExtensionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnumTypeExtensionDefinition([NotNull] GraphqlParser.EnumTypeExtensionDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.enumTypeExtensionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnumTypeExtensionDefinition([NotNull] GraphqlParser.EnumTypeExtensionDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.enumValueDefinitions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnumValueDefinitions([NotNull] GraphqlParser.EnumValueDefinitionsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.enumValueDefinitions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnumValueDefinitions([NotNull] GraphqlParser.EnumValueDefinitionsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.extensionEnumValueDefinitions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExtensionEnumValueDefinitions([NotNull] GraphqlParser.ExtensionEnumValueDefinitionsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.extensionEnumValueDefinitions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExtensionEnumValueDefinitions([NotNull] GraphqlParser.ExtensionEnumValueDefinitionsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.enumValueDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnumValueDefinition([NotNull] GraphqlParser.EnumValueDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.enumValueDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnumValueDefinition([NotNull] GraphqlParser.EnumValueDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.inputObjectTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInputObjectTypeDefinition([NotNull] GraphqlParser.InputObjectTypeDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.inputObjectTypeDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInputObjectTypeDefinition([NotNull] GraphqlParser.InputObjectTypeDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.inputObjectTypeExtensionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInputObjectTypeExtensionDefinition([NotNull] GraphqlParser.InputObjectTypeExtensionDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.inputObjectTypeExtensionDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInputObjectTypeExtensionDefinition([NotNull] GraphqlParser.InputObjectTypeExtensionDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.inputObjectValueDefinitions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInputObjectValueDefinitions([NotNull] GraphqlParser.InputObjectValueDefinitionsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.inputObjectValueDefinitions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInputObjectValueDefinitions([NotNull] GraphqlParser.InputObjectValueDefinitionsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.extensionInputObjectValueDefinitions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExtensionInputObjectValueDefinitions([NotNull] GraphqlParser.ExtensionInputObjectValueDefinitionsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.extensionInputObjectValueDefinitions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExtensionInputObjectValueDefinitions([NotNull] GraphqlParser.ExtensionInputObjectValueDefinitionsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.directiveDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDirectiveDefinition([NotNull] GraphqlParser.DirectiveDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.directiveDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDirectiveDefinition([NotNull] GraphqlParser.DirectiveDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.directiveLocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDirectiveLocation([NotNull] GraphqlParser.DirectiveLocationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.directiveLocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDirectiveLocation([NotNull] GraphqlParser.DirectiveLocationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.directiveLocations"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDirectiveLocations([NotNull] GraphqlParser.DirectiveLocationsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.directiveLocations"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDirectiveLocations([NotNull] GraphqlParser.DirectiveLocationsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.operationType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOperationType([NotNull] GraphqlParser.OperationTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.operationType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOperationType([NotNull] GraphqlParser.OperationTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.description"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDescription([NotNull] GraphqlParser.DescriptionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.description"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDescription([NotNull] GraphqlParser.DescriptionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.enumValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnumValue([NotNull] GraphqlParser.EnumValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.enumValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnumValue([NotNull] GraphqlParser.EnumValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.arrayValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayValue([NotNull] GraphqlParser.ArrayValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.arrayValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayValue([NotNull] GraphqlParser.ArrayValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.arrayValueWithVariable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayValueWithVariable([NotNull] GraphqlParser.ArrayValueWithVariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.arrayValueWithVariable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayValueWithVariable([NotNull] GraphqlParser.ArrayValueWithVariableContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.objectValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectValue([NotNull] GraphqlParser.ObjectValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.objectValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectValue([NotNull] GraphqlParser.ObjectValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.objectValueWithVariable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectValueWithVariable([NotNull] GraphqlParser.ObjectValueWithVariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.objectValueWithVariable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectValueWithVariable([NotNull] GraphqlParser.ObjectValueWithVariableContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.objectField"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectField([NotNull] GraphqlParser.ObjectFieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.objectField"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectField([NotNull] GraphqlParser.ObjectFieldContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.objectFieldWithVariable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectFieldWithVariable([NotNull] GraphqlParser.ObjectFieldWithVariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.objectFieldWithVariable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectFieldWithVariable([NotNull] GraphqlParser.ObjectFieldWithVariableContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.directives"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDirectives([NotNull] GraphqlParser.DirectivesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.directives"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDirectives([NotNull] GraphqlParser.DirectivesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.directive"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDirective([NotNull] GraphqlParser.DirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.directive"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDirective([NotNull] GraphqlParser.DirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArguments([NotNull] GraphqlParser.ArgumentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArguments([NotNull] GraphqlParser.ArgumentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgument([NotNull] GraphqlParser.ArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgument([NotNull] GraphqlParser.ArgumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.baseName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBaseName([NotNull] GraphqlParser.BaseNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.baseName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBaseName([NotNull] GraphqlParser.BaseNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.fragmentName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFragmentName([NotNull] GraphqlParser.FragmentNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.fragmentName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFragmentName([NotNull] GraphqlParser.FragmentNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterName([NotNull] GraphqlParser.NameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitName([NotNull] GraphqlParser.NameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValue([NotNull] GraphqlParser.ValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValue([NotNull] GraphqlParser.ValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.valueWithVariable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValueWithVariable([NotNull] GraphqlParser.ValueWithVariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.valueWithVariable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValueWithVariable([NotNull] GraphqlParser.ValueWithVariableContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariable([NotNull] GraphqlParser.VariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariable([NotNull] GraphqlParser.VariableContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.defaultValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefaultValue([NotNull] GraphqlParser.DefaultValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.defaultValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefaultValue([NotNull] GraphqlParser.DefaultValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.stringValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringValue([NotNull] GraphqlParser.StringValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.stringValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringValue([NotNull] GraphqlParser.StringValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] GraphqlParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] GraphqlParser.TypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.typeName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeName([NotNull] GraphqlParser.TypeNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.typeName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeName([NotNull] GraphqlParser.TypeNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.listType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterListType([NotNull] GraphqlParser.ListTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.listType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitListType([NotNull] GraphqlParser.ListTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.nonNullType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNonNullType([NotNull] GraphqlParser.NonNullTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.nonNullType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNonNullType([NotNull] GraphqlParser.NonNullTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.operationDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOperationDefinition([NotNull] GraphqlParser.OperationDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.operationDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOperationDefinition([NotNull] GraphqlParser.OperationDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.variableDefinitions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDefinitions([NotNull] GraphqlParser.VariableDefinitionsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.variableDefinitions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDefinitions([NotNull] GraphqlParser.VariableDefinitionsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.variableDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDefinition([NotNull] GraphqlParser.VariableDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.variableDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDefinition([NotNull] GraphqlParser.VariableDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.selectionSet"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSelectionSet([NotNull] GraphqlParser.SelectionSetContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.selectionSet"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSelectionSet([NotNull] GraphqlParser.SelectionSetContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.selection"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSelection([NotNull] GraphqlParser.SelectionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.selection"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSelection([NotNull] GraphqlParser.SelectionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterField([NotNull] GraphqlParser.FieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitField([NotNull] GraphqlParser.FieldContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.alias"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAlias([NotNull] GraphqlParser.AliasContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.alias"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAlias([NotNull] GraphqlParser.AliasContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.fragmentSpread"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFragmentSpread([NotNull] GraphqlParser.FragmentSpreadContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.fragmentSpread"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFragmentSpread([NotNull] GraphqlParser.FragmentSpreadContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.inlineFragment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInlineFragment([NotNull] GraphqlParser.InlineFragmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.inlineFragment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInlineFragment([NotNull] GraphqlParser.InlineFragmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.fragmentDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFragmentDefinition([NotNull] GraphqlParser.FragmentDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.fragmentDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFragmentDefinition([NotNull] GraphqlParser.FragmentDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.typeCondition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeCondition([NotNull] GraphqlParser.TypeConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.typeCondition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeCondition([NotNull] GraphqlParser.TypeConditionContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace GraphLinqQL.Ast.Antlr
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /source/Graphql.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GraphLinqQL.Ast.Antlr {

     

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IGraphqlVisitor{Result}"/>,
/// which can be extended to create a visitor which only needs to handle a subset
/// of the available methods.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class GraphqlBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, IGraphqlVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.document"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDocument([NotNull] GraphqlParser.DocumentContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.definition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDefinition([NotNull] GraphqlParser.DefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.typeSystemDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTypeSystemDefinition([NotNull] GraphqlParser.TypeSystemDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.schemaDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSchemaDefinition([NotNull] GraphqlParser.SchemaDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.operationTypeDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitOperationTypeDefinition([NotNull] GraphqlParser.OperationTypeDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.typeDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTypeDefinition([NotNull] GraphqlParser.TypeDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.typeExtension"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTypeExtension([NotNull] GraphqlParser.TypeExtensionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.emptyParentheses"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEmptyParentheses([NotNull] GraphqlParser.EmptyParenthesesContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.scalarTypeDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitScalarTypeDefinition([NotNull] GraphqlParser.ScalarTypeDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.scalarTypeExtensionDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitScalarTypeExtensionDefinition([NotNull] GraphqlParser.ScalarTypeExtensionDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.objectTypeDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitObjectTypeDefinition([NotNull] GraphqlParser.ObjectTypeDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.objectTypeExtensionDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitObjectTypeExtensionDefinition([NotNull] GraphqlParser.ObjectTypeExtensionDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.implementsInterfaces"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitImplementsInterfaces([NotNull] GraphqlParser.ImplementsInterfacesContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.fieldsDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFieldsDefinition([NotNull] GraphqlParser.FieldsDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.extensionFieldsDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExtensionFieldsDefinition([NotNull] GraphqlParser.ExtensionFieldsDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.fieldDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFieldDefinition([NotNull] GraphqlParser.FieldDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.argumentsDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitArgumentsDefinition([NotNull] GraphqlParser.ArgumentsDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.inputValueDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitInputValueDefinition([NotNull] GraphqlParser.InputValueDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.interfaceTypeDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitInterfaceTypeDefinition([NotNull] GraphqlParser.InterfaceTypeDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.interfaceTypeExtensionDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitInterfaceTypeExtensionDefinition([NotNull] GraphqlParser.InterfaceTypeExtensionDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.unionTypeDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitUnionTypeDefinition([NotNull] GraphqlParser.UnionTypeDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.unionTypeExtensionDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitUnionTypeExtensionDefinition([NotNull] GraphqlParser.UnionTypeExtensionDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.unionMembership"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitUnionMembership([NotNull] GraphqlParser.UnionMembershipContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.unionMembers"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitUnionMembers([NotNull] GraphqlParser.UnionMembersContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.enumTypeDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEnumTypeDefinition([NotNull] GraphqlParser.EnumTypeDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.enumTypeExtensionDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEnumTypeExtensionDefinition([NotNull] GraphqlParser.EnumTypeExtensionDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.enumValueDefinitions"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEnumValueDefinitions([NotNull] GraphqlParser.EnumValueDefinitionsContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.extensionEnumValueDefinitions"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExtensionEnumValueDefinitions([NotNull] GraphqlParser.ExtensionEnumValueDefinitionsContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.enumValueDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEnumValueDefinition([NotNull] GraphqlParser.EnumValueDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.inputObjectTypeDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitInputObjectTypeDefinition([NotNull] GraphqlParser.InputObjectTypeDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.inputObjectTypeExtensionDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitInputObjectTypeExtensionDefinition([NotNull] GraphqlParser.InputObjectTypeExtensionDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.inputObjectValueDefinitions"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitInputObjectValueDefinitions([NotNull] GraphqlParser.InputObjectValueDefinitionsContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.extensionInputObjectValueDefinitions"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitExtensionInputObjectValueDefinitions([NotNull] GraphqlParser.ExtensionInputObjectValueDefinitionsContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.directiveDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDirectiveDefinition([NotNull] GraphqlParser.DirectiveDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.directiveLocation"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDirectiveLocation([NotNull] GraphqlParser.DirectiveLocationContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.directiveLocations"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDirectiveLocations([NotNull] GraphqlParser.DirectiveLocationsContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.operationType"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitOperationType([NotNull] GraphqlParser.OperationTypeContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.description"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDescription([NotNull] GraphqlParser.DescriptionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.enumValue"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEnumValue([NotNull] GraphqlParser.EnumValueContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.arrayValue"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitArrayValue([NotNull] GraphqlParser.ArrayValueContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.arrayValueWithVariable"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitArrayValueWithVariable([NotNull] GraphqlParser.ArrayValueWithVariableContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.objectValue"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitObjectValue([NotNull] GraphqlParser.ObjectValueContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.objectValueWithVariable"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitObjectValueWithVariable([NotNull] GraphqlParser.ObjectValueWithVariableContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.objectField"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitObjectField([NotNull] GraphqlParser.ObjectFieldContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.objectFieldWithVariable"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitObjectFieldWithVariable([NotNull] GraphqlParser.ObjectFieldWithVariableContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.directives"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDirectives([NotNull] GraphqlParser.DirectivesContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDirective([NotNull] GraphqlParser.DirectiveContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.arguments"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitArguments([NotNull] GraphqlParser.ArgumentsContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.argument"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitArgument([NotNull] GraphqlParser.ArgumentContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.baseName"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitBaseName([NotNull] GraphqlParser.BaseNameContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.fragmentName"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFragmentName([NotNull] GraphqlParser.FragmentNameContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.name"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitName([NotNull] GraphqlParser.NameContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.value"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitValue([NotNull] GraphqlParser.ValueContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.valueWithVariable"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitValueWithVariable([NotNull] GraphqlParser.ValueWithVariableContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.variable"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitVariable([NotNull] GraphqlParser.VariableContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.defaultValue"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDefaultValue([NotNull] GraphqlParser.DefaultValueContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.stringValue"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitStringValue([NotNull] GraphqlParser.StringValueContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.type"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitType([NotNull] GraphqlParser.TypeContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.typeName"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTypeName([NotNull] GraphqlParser.TypeNameContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.listType"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitListType([NotNull] GraphqlParser.ListTypeContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.nonNullType"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNonNullType([NotNull] GraphqlParser.NonNullTypeContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.operationDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitOperationDefinition([NotNull] GraphqlParser.OperationDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.variableDefinitions"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitVariableDefinitions([NotNull] GraphqlParser.VariableDefinitionsContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.variableDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitVariableDefinition([NotNull] GraphqlParser.VariableDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.selectionSet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSelectionSet([NotNull] GraphqlParser.SelectionSetContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.selection"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSelection([NotNull] GraphqlParser.SelectionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.field"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitField([NotNull] GraphqlParser.FieldContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.alias"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitAlias([NotNull] GraphqlParser.AliasContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.fragmentSpread"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFragmentSpread([NotNull] GraphqlParser.FragmentSpreadContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.inlineFragment"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitInlineFragment([NotNull] GraphqlParser.InlineFragmentContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.fragmentDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFragmentDefinition([NotNull] GraphqlParser.FragmentDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.typeCondition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTypeCondition([NotNull] GraphqlParser.TypeConditionContext context) { return VisitChildren(context); }
}
} // namespace GraphLinqQL.Ast.Antlr
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /source/Graphql.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GraphLinqQL.Ast.Antlr {

     

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class GraphqlLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, BooleanValue=15, NullValue=16, 
		FRAGMENT=17, QUERY=18, MUTATION=19, SUBSCRIPTION=20, SCHEMA=21, SCALAR=22, 
		TYPE=23, INTERFACE=24, IMPLEMENTS=25, ENUM=26, UNION=27, INPUT=28, EXTEND=29, 
		DIRECTIVE=30, ON_KEYWORD=31, NAME=32, IntValue=33, FloatValue=34, Sign=35, 
		IntegerPart=36, NonZeroDigit=37, ExponentPart=38, Digit=39, StringValue=40, 
		TripleQuotedStringValue=41, Comment=42, LF=43, CR=44, LineTerminator=45, 
		Space=46, Tab=47, Comma=48, UnicodeBOM=49;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "BooleanValue", "NullValue", 
		"FRAGMENT", "QUERY", "MUTATION", "SUBSCRIPTION", "SCHEMA", "SCALAR", "TYPE", 
		"INTERFACE", "IMPLEMENTS", "ENUM", "UNION", "INPUT", "EXTEND", "DIRECTIVE", 
		"ON_KEYWORD", "NAME", "IntValue", "FloatValue", "Sign", "IntegerPart", 
		"NonZeroDigit", "ExponentPart", "Digit", "StringValue", "TripleQuotedStringValue", 
		"TripleQuotedStringPart", "EscapedTripleQuote", "ExtendedSourceCharacter", 
		"ExtendedSourceCharacterWitoutLineFeed", "Comment", "EscapedChar", "Unicode", 
		"Hex", "LF", "CR", "LineTerminator", "Space", "Tab", "Comma", "UnicodeBOM"
	};


	public GraphqlLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GraphqlLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "':'", "'&'", "'('", "')'", "'='", "'|'", "'@'", "'['", 
		"']'", "'$'", "'!'", "'...'", null, "'null'", "'fragment'", "'query'", 
		"'mutation'", "'subscription'", "'schema'", "'scalar'", "'type'", "'interface'", 
		"'implements'", "'enum'", "'union'", "'input'", "'extend'", "'directive'", 
		"'on'", null, null, null, "'-'", null, null, null, null, null, null, null, 
		null, null, null, null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "BooleanValue", "NullValue", "FRAGMENT", "QUERY", "MUTATION", 
		"SUBSCRIPTION", "SCHEMA", "SCALAR", "TYPE", "INTERFACE", "IMPLEMENTS", 
		"ENUM", "UNION", "INPUT", "EXTEND", "DIRECTIVE", "ON_KEYWORD", "NAME", 
		"IntValue", "FloatValue", "Sign", "IntegerPart", "NonZeroDigit", "ExponentPart", 
		"Digit", "StringValue", "TripleQuotedStringValue", "Comment", "LF", "CR", 
		"LineTerminator", "Space", "Tab", "Comma", "UnicodeBOM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Graphql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GraphqlLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x33', '\x19D', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x9B', '\n', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', 
		'!', '\a', '!', '\x116', '\n', '!', '\f', '!', '\xE', '!', '\x119', '\v', 
		'!', '\x3', '\"', '\x5', '\"', '\x11C', '\n', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '#', '\x5', '#', '\x121', '\n', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x6', '#', '\x126', '\n', '#', '\r', '#', '\xE', '#', '\x127', 
		'\x5', '#', '\x12A', '\n', '#', '\x3', '#', '\x5', '#', '\x12D', '\n', 
		'#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x6', '%', '\x135', '\n', '%', '\r', '%', '\xE', '%', '\x136', '\x5', 
		'%', '\x139', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', 
		'\x5', '\'', '\x13F', '\n', '\'', '\x3', '\'', '\x6', '\'', '\x142', '\n', 
		'\'', '\r', '\'', '\xE', '\'', '\x143', '\x3', '(', '\x3', '(', '\x3', 
		')', '\x3', ')', '\x3', ')', '\a', ')', '\x14B', '\n', ')', '\f', ')', 
		'\xE', ')', '\x14E', '\v', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x157', '\n', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', 
		'\x6', '+', '\x15F', '\n', '+', '\r', '+', '\xE', '+', '\x160', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', 
		'-', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\a', '/', '\x16E', 
		'\n', '/', '\f', '/', '\xE', '/', '\x171', '\v', '/', '\x3', '/', '\x3', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x178', 
		'\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x160', '\x2', ':', '\x3', '\x3', 
		'\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', 
		'\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', 
		'\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', 
		'\x13', '%', '\x14', '\'', '\x15', ')', '\x16', '+', '\x17', '-', '\x18', 
		'/', '\x19', '\x31', '\x1A', '\x33', '\x1B', '\x35', '\x1C', '\x37', '\x1D', 
		'\x39', '\x1E', ';', '\x1F', '=', ' ', '?', '!', '\x41', '\"', '\x43', 
		'#', '\x45', '$', 'G', '%', 'I', '&', 'K', '\'', 'M', '(', 'O', ')', 'Q', 
		'*', 'S', '+', 'U', '\x2', 'W', '\x2', 'Y', '\x2', '[', '\x2', ']', ',', 
		'_', '\x2', '\x61', '\x2', '\x63', '\x2', '\x65', '-', 'g', '.', 'i', 
		'/', 'k', '\x30', 'm', '\x31', 'o', '\x32', 'q', '\x33', '\x3', '\x2', 
		'\xF', '\x5', '\x2', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x6', 
		'\x2', '\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x4', 
		'\x2', 'G', 'G', 'g', 'g', '\x4', '\x2', '-', '-', '/', '/', '\a', '\x2', 
		'\f', '\f', '\xF', '\xF', '$', '$', '^', '^', '\x202A', '\x202B', '\n', 
		'\x2', '$', '$', '\x31', '\x31', '^', '^', '\x64', '\x64', 'h', 'h', 'p', 
		'p', 't', 't', 'v', 'v', '\x5', '\x2', '\x32', ';', '\x43', 'H', '\x63', 
		'h', '\x3', '\x2', '\f', '\f', '\x3', '\x2', '\xF', '\xF', '\x3', '\x2', 
		'\x202A', '\x202B', '\x3', '\x2', '\"', '\"', '\x3', '\x2', '\v', '\v', 
		'\x3', '\x2', '\xFF01', '\xFF01', '\x4', '\x5', '\x2', '\v', '\x2', '\f', 
		'\x2', '\xF', '\x2', '\xF', '\x2', '\"', '\x2', '\x1', '\x12', '\x5', 
		'\x2', '\v', '\x2', '\v', '\x2', '\xF', '\x2', '\xF', '\x2', '\"', '\x2', 
		'\x1', '\x12', '\x1A8', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x2', ')', '\x3', '\x2', '\x2', '\x2', '\x2', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '-', '\x3', '\x2', '\x2', '\x2', '\x2', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x33', '\x3', '\x2', '\x2', '\x2', '\x2', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x37', '\x3', '\x2', '\x2', '\x2', '\x2', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x2', ';', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x2', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x41', '\x3', '\x2', '\x2', '\x2', '\x2', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x45', '\x3', '\x2', '\x2', '\x2', '\x2', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x2', 'I', '\x3', '\x2', '\x2', '\x2', '\x2', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\x2', 'M', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x2', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x2', 'S', '\x3', '\x2', '\x2', '\x2', '\x2', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x65', '\x3', '\x2', '\x2', '\x2', '\x2', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x2', 'i', '\x3', '\x2', '\x2', '\x2', '\x2', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x2', 'm', '\x3', '\x2', '\x2', '\x2', '\x2', 'o', 
		'\x3', '\x2', '\x2', '\x2', '\x2', 'q', '\x3', '\x2', '\x2', '\x2', '\x3', 
		's', '\x3', '\x2', '\x2', '\x2', '\x5', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\a', 'w', '\x3', '\x2', '\x2', '\x2', '\t', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\v', '{', '\x3', '\x2', '\x2', '\x2', '\r', '}', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x11', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x85', '\x3', '\x2', '\x2', '\x2', '\x17', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x89', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '\x9A', '\x3', '\x2', '\x2', '\x2', '!', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '#', '\xA1', '\x3', '\x2', '\x2', '\x2', '%', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\'', '\xB0', '\x3', '\x2', '\x2', '\x2', ')', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '+', '\xC6', '\x3', '\x2', '\x2', '\x2', '-', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '/', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x33', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\x39', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', ';', '\xFF', '\x3', '\x2', '\x2', '\x2', '=', '\x106', '\x3', '\x2', 
		'\x2', '\x2', '?', '\x110', '\x3', '\x2', '\x2', '\x2', '\x41', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x120', '\x3', '\x2', '\x2', '\x2', 'G', '\x12E', '\x3', '\x2', 
		'\x2', '\x2', 'I', '\x138', '\x3', '\x2', '\x2', '\x2', 'K', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', 'M', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'O', '\x145', '\x3', '\x2', '\x2', '\x2', 'Q', '\x147', '\x3', '\x2', 
		'\x2', '\x2', 'S', '\x151', '\x3', '\x2', '\x2', '\x2', 'U', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', 'W', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'Y', '\x167', '\x3', '\x2', '\x2', '\x2', '[', '\x169', '\x3', '\x2', 
		'\x2', '\x2', ']', '\x16B', '\x3', '\x2', '\x2', '\x2', '_', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x65', '\x181', '\x3', '\x2', 
		'\x2', '\x2', 'g', '\x185', '\x3', '\x2', '\x2', '\x2', 'i', '\x189', 
		'\x3', '\x2', '\x2', '\x2', 'k', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'm', '\x191', '\x3', '\x2', '\x2', '\x2', 'o', '\x195', '\x3', '\x2', 
		'\x2', '\x2', 'q', '\x199', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', 
		'}', '\x2', '\x2', 't', '\x4', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', 
		'\x7F', '\x2', '\x2', 'v', '\x6', '\x3', '\x2', '\x2', '\x2', 'w', 'x', 
		'\a', '<', '\x2', '\x2', 'x', '\b', '\x3', '\x2', '\x2', '\x2', 'y', 'z', 
		'\a', '(', '\x2', '\x2', 'z', '\n', '\x3', '\x2', '\x2', '\x2', '{', '|', 
		'\a', '*', '\x2', '\x2', '|', '\f', '\x3', '\x2', '\x2', '\x2', '}', '~', 
		'\a', '+', '\x2', '\x2', '~', '\xE', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\a', '?', '\x2', '\x2', '\x80', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\a', '~', '\x2', '\x2', '\x82', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\x42', '\x2', '\x2', '\x84', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', ']', '\x2', 
		'\x2', '\x86', '\x16', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\a', 
		'_', '\x2', '\x2', '\x88', '\x18', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8A', '\a', '&', '\x2', '\x2', '\x8A', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8C', '\a', '#', '\x2', '\x2', '\x8C', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x30', '\x2', '\x2', '\x8E', 
		'\x8F', '\a', '\x30', '\x2', '\x2', '\x8F', '\x90', '\a', '\x30', '\x2', 
		'\x2', '\x90', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\a', 
		'v', '\x2', '\x2', '\x92', '\x93', '\a', 't', '\x2', '\x2', '\x93', '\x94', 
		'\a', 'w', '\x2', '\x2', '\x94', '\x9B', '\a', 'g', '\x2', '\x2', '\x95', 
		'\x96', '\a', 'h', '\x2', '\x2', '\x96', '\x97', '\a', '\x63', '\x2', 
		'\x2', '\x97', '\x98', '\a', 'n', '\x2', '\x2', '\x98', '\x99', '\a', 
		'u', '\x2', '\x2', '\x99', '\x9B', '\a', 'g', '\x2', '\x2', '\x9A', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', ' ', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', 'p', '\x2', 
		'\x2', '\x9D', '\x9E', '\a', 'w', '\x2', '\x2', '\x9E', '\x9F', '\a', 
		'n', '\x2', '\x2', '\x9F', '\xA0', '\a', 'n', '\x2', '\x2', '\xA0', '\"', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\a', 'h', '\x2', '\x2', '\xA2', 
		'\xA3', '\a', 't', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x63', '\x2', 
		'\x2', '\xA4', '\xA5', '\a', 'i', '\x2', '\x2', '\xA5', '\xA6', '\a', 
		'o', '\x2', '\x2', '\xA6', '\xA7', '\a', 'g', '\x2', '\x2', '\xA7', '\xA8', 
		'\a', 'p', '\x2', '\x2', '\xA8', '\xA9', '\a', 'v', '\x2', '\x2', '\xA9', 
		'$', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', 's', '\x2', '\x2', 
		'\xAB', '\xAC', '\a', 'w', '\x2', '\x2', '\xAC', '\xAD', '\a', 'g', '\x2', 
		'\x2', '\xAD', '\xAE', '\a', 't', '\x2', '\x2', '\xAE', '\xAF', '\a', 
		'{', '\x2', '\x2', '\xAF', '&', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', 
		'\a', 'o', '\x2', '\x2', '\xB1', '\xB2', '\a', 'w', '\x2', '\x2', '\xB2', 
		'\xB3', '\a', 'v', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x63', '\x2', 
		'\x2', '\xB4', '\xB5', '\a', 'v', '\x2', '\x2', '\xB5', '\xB6', '\a', 
		'k', '\x2', '\x2', '\xB6', '\xB7', '\a', 'q', '\x2', '\x2', '\xB7', '\xB8', 
		'\a', 'p', '\x2', '\x2', '\xB8', '(', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', 'u', '\x2', '\x2', '\xBA', '\xBB', '\a', 'w', '\x2', '\x2', 
		'\xBB', '\xBC', '\a', '\x64', '\x2', '\x2', '\xBC', '\xBD', '\a', 'u', 
		'\x2', '\x2', '\xBD', '\xBE', '\a', '\x65', '\x2', '\x2', '\xBE', '\xBF', 
		'\a', 't', '\x2', '\x2', '\xBF', '\xC0', '\a', 'k', '\x2', '\x2', '\xC0', 
		'\xC1', '\a', 'r', '\x2', '\x2', '\xC1', '\xC2', '\a', 'v', '\x2', '\x2', 
		'\xC2', '\xC3', '\a', 'k', '\x2', '\x2', '\xC3', '\xC4', '\a', 'q', '\x2', 
		'\x2', '\xC4', '\xC5', '\a', 'p', '\x2', '\x2', '\xC5', '*', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\xC7', '\a', 'u', '\x2', '\x2', '\xC7', '\xC8', 
		'\a', '\x65', '\x2', '\x2', '\xC8', '\xC9', '\a', 'j', '\x2', '\x2', '\xC9', 
		'\xCA', '\a', 'g', '\x2', '\x2', '\xCA', '\xCB', '\a', 'o', '\x2', '\x2', 
		'\xCB', '\xCC', '\a', '\x63', '\x2', '\x2', '\xCC', ',', '\x3', '\x2', 
		'\x2', '\x2', '\xCD', '\xCE', '\a', 'u', '\x2', '\x2', '\xCE', '\xCF', 
		'\a', '\x65', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x63', '\x2', '\x2', 
		'\xD0', '\xD1', '\a', 'n', '\x2', '\x2', '\xD1', '\xD2', '\a', '\x63', 
		'\x2', '\x2', '\xD2', '\xD3', '\a', 't', '\x2', '\x2', '\xD3', '.', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', 'v', '\x2', '\x2', '\xD5', 
		'\xD6', '\a', '{', '\x2', '\x2', '\xD6', '\xD7', '\a', 'r', '\x2', '\x2', 
		'\xD7', '\xD8', '\a', 'g', '\x2', '\x2', '\xD8', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xDA', '\a', 'k', '\x2', '\x2', '\xDA', '\xDB', 
		'\a', 'p', '\x2', '\x2', '\xDB', '\xDC', '\a', 'v', '\x2', '\x2', '\xDC', 
		'\xDD', '\a', 'g', '\x2', '\x2', '\xDD', '\xDE', '\a', 't', '\x2', '\x2', 
		'\xDE', '\xDF', '\a', 'h', '\x2', '\x2', '\xDF', '\xE0', '\a', '\x63', 
		'\x2', '\x2', '\xE0', '\xE1', '\a', '\x65', '\x2', '\x2', '\xE1', '\xE2', 
		'\a', 'g', '\x2', '\x2', '\xE2', '\x32', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\a', 'k', '\x2', '\x2', '\xE4', '\xE5', '\a', 'o', '\x2', '\x2', 
		'\xE5', '\xE6', '\a', 'r', '\x2', '\x2', '\xE6', '\xE7', '\a', 'n', '\x2', 
		'\x2', '\xE7', '\xE8', '\a', 'g', '\x2', '\x2', '\xE8', '\xE9', '\a', 
		'o', '\x2', '\x2', '\xE9', '\xEA', '\a', 'g', '\x2', '\x2', '\xEA', '\xEB', 
		'\a', 'p', '\x2', '\x2', '\xEB', '\xEC', '\a', 'v', '\x2', '\x2', '\xEC', 
		'\xED', '\a', 'u', '\x2', '\x2', '\xED', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEF', '\a', 'g', '\x2', '\x2', '\xEF', '\xF0', '\a', 
		'p', '\x2', '\x2', '\xF0', '\xF1', '\a', 'w', '\x2', '\x2', '\xF1', '\xF2', 
		'\a', 'o', '\x2', '\x2', '\xF2', '\x36', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF4', '\a', 'w', '\x2', '\x2', '\xF4', '\xF5', '\a', 'p', '\x2', '\x2', 
		'\xF5', '\xF6', '\a', 'k', '\x2', '\x2', '\xF6', '\xF7', '\a', 'q', '\x2', 
		'\x2', '\xF7', '\xF8', '\a', 'p', '\x2', '\x2', '\xF8', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', 'k', '\x2', '\x2', '\xFA', 
		'\xFB', '\a', 'p', '\x2', '\x2', '\xFB', '\xFC', '\a', 'r', '\x2', '\x2', 
		'\xFC', '\xFD', '\a', 'w', '\x2', '\x2', '\xFD', '\xFE', '\a', 'v', '\x2', 
		'\x2', '\xFE', ':', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\a', 
		'g', '\x2', '\x2', '\x100', '\x101', '\a', 'z', '\x2', '\x2', '\x101', 
		'\x102', '\a', 'v', '\x2', '\x2', '\x102', '\x103', '\a', 'g', '\x2', 
		'\x2', '\x103', '\x104', '\a', 'p', '\x2', '\x2', '\x104', '\x105', '\a', 
		'\x66', '\x2', '\x2', '\x105', '<', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x107', '\a', '\x66', '\x2', '\x2', '\x107', '\x108', '\a', 'k', '\x2', 
		'\x2', '\x108', '\x109', '\a', 't', '\x2', '\x2', '\x109', '\x10A', '\a', 
		'g', '\x2', '\x2', '\x10A', '\x10B', '\a', '\x65', '\x2', '\x2', '\x10B', 
		'\x10C', '\a', 'v', '\x2', '\x2', '\x10C', '\x10D', '\a', 'k', '\x2', 
		'\x2', '\x10D', '\x10E', '\a', 'x', '\x2', '\x2', '\x10E', '\x10F', '\a', 
		'g', '\x2', '\x2', '\x10F', '>', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x111', '\a', 'q', '\x2', '\x2', '\x111', '\x112', '\a', 'p', '\x2', 
		'\x2', '\x112', '@', '\x3', '\x2', '\x2', '\x2', '\x113', '\x117', '\t', 
		'\x2', '\x2', '\x2', '\x114', '\x116', '\t', '\x3', '\x2', '\x2', '\x115', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x116', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x117', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11C', '\x5', 
		'G', '$', '\x2', '\x11B', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x11E', '\x5', 'I', '%', '\x2', '\x11E', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x121', '\x5', 'G', '$', '\x2', '\x120', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x122', '\x3', '\x2', '\x2', '\x2', '\x122', '\x129', 
		'\x5', 'I', '%', '\x2', '\x123', '\x125', '\a', '\x30', '\x2', '\x2', 
		'\x124', '\x126', '\x5', 'O', '(', '\x2', '\x125', '\x124', '\x3', '\x2', 
		'\x2', '\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x129', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12D', '\x5', 'M', '\'', 
		'\x2', '\x12C', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12F', '\a', '/', '\x2', '\x2', '\x12F', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x130', '\x139', '\a', '\x32', '\x2', '\x2', '\x131', '\x139', 
		'\x5', 'K', '&', '\x2', '\x132', '\x134', '\x5', 'K', '&', '\x2', '\x133', 
		'\x135', '\x5', 'O', '(', '\x2', '\x134', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x136', '\x3', '\x2', '\x2', '\x2', '\x136', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x139', '\x3', '\x2', '\x2', '\x2', '\x138', '\x130', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x131', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x139', 'J', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x13B', '\x4', '\x33', ';', '\x2', '\x13B', 'L', '\x3', 
		'\x2', '\x2', '\x2', '\x13C', '\x13E', '\t', '\x4', '\x2', '\x2', '\x13D', 
		'\x13F', '\t', '\x5', '\x2', '\x2', '\x13E', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x142', '\x5', 'O', '(', '\x2', 
		'\x141', '\x140', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\x3', 
		'\x2', '\x2', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x144', 'N', '\x3', '\x2', '\x2', 
		'\x2', '\x145', '\x146', '\x4', '\x32', ';', '\x2', '\x146', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x14C', '\a', '$', '\x2', '\x2', '\x148', 
		'\x14B', '\n', '\x6', '\x2', '\x2', '\x149', '\x14B', '\x5', '_', '\x30', 
		'\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x149', 
		'\x3', '\x2', '\x2', '\x2', '\x14B', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\a', '$', '\x2', 
		'\x2', '\x150', 'R', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\a', 
		'$', '\x2', '\x2', '\x152', '\x153', '\a', '$', '\x2', '\x2', '\x153', 
		'\x154', '\a', '$', '\x2', '\x2', '\x154', '\x156', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x157', '\x5', 'U', '+', '\x2', '\x156', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x158', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\a', '$', '\x2', 
		'\x2', '\x159', '\x15A', '\a', '$', '\x2', '\x2', '\x15A', '\x15B', '\a', 
		'$', '\x2', '\x2', '\x15B', 'T', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x15F', '\x5', 'W', ',', '\x2', '\x15D', '\x15F', '\x5', 'Y', '-', '\x2', 
		'\x15E', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x161', 'V', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\a', 
		'^', '\x2', '\x2', '\x163', '\x164', '\a', '$', '\x2', '\x2', '\x164', 
		'\x165', '\a', '$', '\x2', '\x2', '\x165', '\x166', '\a', '$', '\x2', 
		'\x2', '\x166', 'X', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\t', 
		'\xF', '\x2', '\x2', '\x168', 'Z', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x16A', '\t', '\x10', '\x2', '\x2', '\x16A', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\x16B', '\x16F', '\a', '%', '\x2', '\x2', '\x16C', '\x16E', '\x5', 
		'[', '.', '\x2', '\x16D', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x171', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x16D', '\x3', '\x2', '\x2', 
		'\x2', '\x16F', '\x170', '\x3', '\x2', '\x2', '\x2', '\x170', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\x173', '\b', '/', '\x2', '\x2', '\x173', '^', '\x3', '\x2', 
		'\x2', '\x2', '\x174', '\x177', '\a', '^', '\x2', '\x2', '\x175', '\x178', 
		'\t', '\a', '\x2', '\x2', '\x176', '\x178', '\x5', '\x61', '\x31', '\x2', 
		'\x177', '\x175', '\x3', '\x2', '\x2', '\x2', '\x177', '\x176', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '`', '\x3', '\x2', '\x2', '\x2', '\x179', 
		'\x17A', '\a', 'w', '\x2', '\x2', '\x17A', '\x17B', '\x5', '\x63', '\x32', 
		'\x2', '\x17B', '\x17C', '\x5', '\x63', '\x32', '\x2', '\x17C', '\x17D', 
		'\x5', '\x63', '\x32', '\x2', '\x17D', '\x17E', '\x5', '\x63', '\x32', 
		'\x2', '\x17E', '\x62', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', 
		'\t', '\b', '\x2', '\x2', '\x180', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x181', '\x182', '\t', '\t', '\x2', '\x2', '\x182', '\x183', '\x3', '\x2', 
		'\x2', '\x2', '\x183', '\x184', '\b', '\x33', '\x3', '\x2', '\x184', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\t', '\n', '\x2', '\x2', 
		'\x186', '\x187', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\b', 
		'\x34', '\x3', '\x2', '\x188', 'h', '\x3', '\x2', '\x2', '\x2', '\x189', 
		'\x18A', '\t', '\v', '\x2', '\x2', '\x18A', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\x18B', '\x18C', '\b', '\x35', '\x3', '\x2', '\x18C', 'j', '\x3', 
		'\x2', '\x2', '\x2', '\x18D', '\x18E', '\t', '\f', '\x2', '\x2', '\x18E', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\b', '\x36', '\x3', 
		'\x2', '\x190', 'l', '\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\t', 
		'\r', '\x2', '\x2', '\x192', '\x193', '\x3', '\x2', '\x2', '\x2', '\x193', 
		'\x194', '\b', '\x37', '\x3', '\x2', '\x194', 'n', '\x3', '\x2', '\x2', 
		'\x2', '\x195', '\x196', '\a', '.', '\x2', '\x2', '\x196', '\x197', '\x3', 
		'\x2', '\x2', '\x2', '\x197', '\x198', '\b', '\x38', '\x3', '\x2', '\x198', 
		'p', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\t', '\xE', '\x2', 
		'\x2', '\x19A', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', 
		'\b', '\x39', '\x3', '\x2', '\x19C', 'r', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x2', '\x9A', '\x117', '\x11B', '\x120', '\x127', '\x129', '\x12C', 
		'\x136', '\x138', '\x13E', '\x143', '\x14A', '\x14C', '\x156', '\x15E', 
		'\x160', '\x16F', '\x177', '\x4', '\x2', '\x4', '\x2', '\x2', '\x5', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace GraphLinqQL.Ast.Antlr
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /source/Graphql.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GraphLinqQL.Ast.Antlr {

     

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="GraphqlParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface IGraphqlListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.document"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDocument([NotNull] GraphqlParser.DocumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.document"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDocument([NotNull] GraphqlParser.DocumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.definition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefinition([NotNull] GraphqlParser.DefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.definition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefinition([NotNull] GraphqlParser.DefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.typeSystemDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeSystemDefinition([NotNull] GraphqlParser.TypeSystemDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.typeSystemDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeSystemDefinition([NotNull] GraphqlParser.TypeSystemDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.schemaDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSchemaDefinition([NotNull] GraphqlParser.SchemaDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.schemaDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSchemaDefinition([NotNull] GraphqlParser.SchemaDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.operationTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperationTypeDefinition([NotNull] GraphqlParser.OperationTypeDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.operationTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperationTypeDefinition([NotNull] GraphqlParser.OperationTypeDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.typeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDefinition([NotNull] GraphqlParser.TypeDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.typeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDefinition([NotNull] GraphqlParser.TypeDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.typeExtension"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeExtension([NotNull] GraphqlParser.TypeExtensionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.typeExtension"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeExtension([NotNull] GraphqlParser.TypeExtensionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.emptyParentheses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyParentheses([NotNull] GraphqlParser.EmptyParenthesesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.emptyParentheses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyParentheses([NotNull] GraphqlParser.EmptyParenthesesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.scalarTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScalarTypeDefinition([NotNull] GraphqlParser.ScalarTypeDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.scalarTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScalarTypeDefinition([NotNull] GraphqlParser.ScalarTypeDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.scalarTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScalarTypeExtensionDefinition([NotNull] GraphqlParser.ScalarTypeExtensionDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.scalarTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScalarTypeExtensionDefinition([NotNull] GraphqlParser.ScalarTypeExtensionDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.objectTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectTypeDefinition([NotNull] GraphqlParser.ObjectTypeDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.objectTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectTypeDefinition([NotNull] GraphqlParser.ObjectTypeDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.objectTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectTypeExtensionDefinition([NotNull] GraphqlParser.ObjectTypeExtensionDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.objectTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectTypeExtensionDefinition([NotNull] GraphqlParser.ObjectTypeExtensionDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.implementsInterfaces"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImplementsInterfaces([NotNull] GraphqlParser.ImplementsInterfacesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.implementsInterfaces"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImplementsInterfaces([NotNull] GraphqlParser.ImplementsInterfacesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.fieldsDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldsDefinition([NotNull] GraphqlParser.FieldsDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.fieldsDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldsDefinition([NotNull] GraphqlParser.FieldsDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.extensionFieldsDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExtensionFieldsDefinition([NotNull] GraphqlParser.ExtensionFieldsDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.extensionFieldsDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExtensionFieldsDefinition([NotNull] GraphqlParser.ExtensionFieldsDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.fieldDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldDefinition([NotNull] GraphqlParser.FieldDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.fieldDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldDefinition([NotNull] GraphqlParser.FieldDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.argumentsDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentsDefinition([NotNull] GraphqlParser.ArgumentsDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.argumentsDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentsDefinition([NotNull] GraphqlParser.ArgumentsDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.inputValueDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInputValueDefinition([NotNull] GraphqlParser.InputValueDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.inputValueDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInputValueDefinition([NotNull] GraphqlParser.InputValueDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.interfaceTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterfaceTypeDefinition([NotNull] GraphqlParser.InterfaceTypeDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.interfaceTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterfaceTypeDefinition([NotNull] GraphqlParser.InterfaceTypeDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.interfaceTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterfaceTypeExtensionDefinition([NotNull] GraphqlParser.InterfaceTypeExtensionDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.interfaceTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterfaceTypeExtensionDefinition([NotNull] GraphqlParser.InterfaceTypeExtensionDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.unionTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnionTypeDefinition([NotNull] GraphqlParser.UnionTypeDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.unionTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnionTypeDefinition([NotNull] GraphqlParser.UnionTypeDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.unionTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnionTypeExtensionDefinition([NotNull] GraphqlParser.UnionTypeExtensionDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.unionTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnionTypeExtensionDefinition([NotNull] GraphqlParser.UnionTypeExtensionDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.unionMembership"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnionMembership([NotNull] GraphqlParser.UnionMembershipContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.unionMembership"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnionMembership([NotNull] GraphqlParser.UnionMembershipContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.unionMembers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnionMembers([NotNull] GraphqlParser.UnionMembersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.unionMembers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnionMembers([NotNull] GraphqlParser.UnionMembersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.enumTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumTypeDefinition([NotNull] GraphqlParser.EnumTypeDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.enumTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumTypeDefinition([NotNull] GraphqlParser.EnumTypeDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.enumTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumTypeExtensionDefinition([NotNull] GraphqlParser.EnumTypeExtensionDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.enumTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumTypeExtensionDefinition([NotNull] GraphqlParser.EnumTypeExtensionDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.enumValueDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumValueDefinitions([NotNull] GraphqlParser.EnumValueDefinitionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.enumValueDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumValueDefinitions([NotNull] GraphqlParser.EnumValueDefinitionsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.extensionEnumValueDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExtensionEnumValueDefinitions([NotNull] GraphqlParser.ExtensionEnumValueDefinitionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.extensionEnumValueDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExtensionEnumValueDefinitions([NotNull] GraphqlParser.ExtensionEnumValueDefinitionsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.enumValueDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumValueDefinition([NotNull] GraphqlParser.EnumValueDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.enumValueDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumValueDefinition([NotNull] GraphqlParser.EnumValueDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.inputObjectTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInputObjectTypeDefinition([NotNull] GraphqlParser.InputObjectTypeDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.inputObjectTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInputObjectTypeDefinition([NotNull] GraphqlParser.InputObjectTypeDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.inputObjectTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInputObjectTypeExtensionDefinition([NotNull] GraphqlParser.InputObjectTypeExtensionDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.inputObjectTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInputObjectTypeExtensionDefinition([NotNull] GraphqlParser.InputObjectTypeExtensionDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.inputObjectValueDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInputObjectValueDefinitions([NotNull] GraphqlParser.InputObjectValueDefinitionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.inputObjectValueDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInputObjectValueDefinitions([NotNull] GraphqlParser.InputObjectValueDefinitionsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.extensionInputObjectValueDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExtensionInputObjectValueDefinitions([NotNull] GraphqlParser.ExtensionInputObjectValueDefinitionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.extensionInputObjectValueDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExtensionInputObjectValueDefinitions([NotNull] GraphqlParser.ExtensionInputObjectValueDefinitionsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.directiveDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirectiveDefinition([NotNull] GraphqlParser.DirectiveDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.directiveDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirectiveDefinition([NotNull] GraphqlParser.DirectiveDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.directiveLocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirectiveLocation([NotNull] GraphqlParser.DirectiveLocationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.directiveLocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirectiveLocation([NotNull] GraphqlParser.DirectiveLocationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.directiveLocations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirectiveLocations([NotNull] GraphqlParser.DirectiveLocationsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.directiveLocations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirectiveLocations([NotNull] GraphqlParser.DirectiveLocationsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.operationType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperationType([NotNull] GraphqlParser.OperationTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.operationType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperationType([NotNull] GraphqlParser.OperationTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.description"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDescription([NotNull] GraphqlParser.DescriptionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.description"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDescription([NotNull] GraphqlParser.DescriptionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.enumValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumValue([NotNull] GraphqlParser.EnumValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.enumValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumValue([NotNull] GraphqlParser.EnumValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.arrayValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayValue([NotNull] GraphqlParser.ArrayValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.arrayValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayValue([NotNull] GraphqlParser.ArrayValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.arrayValueWithVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayValueWithVariable([NotNull] GraphqlParser.ArrayValueWithVariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.arrayValueWithVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayValueWithVariable([NotNull] GraphqlParser.ArrayValueWithVariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.objectValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectValue([NotNull] GraphqlParser.ObjectValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.objectValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectValue([NotNull] GraphqlParser.ObjectValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.objectValueWithVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectValueWithVariable([NotNull] GraphqlParser.ObjectValueWithVariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.objectValueWithVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectValueWithVariable([NotNull] GraphqlParser.ObjectValueWithVariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.objectField"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectField([NotNull] GraphqlParser.ObjectFieldContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.objectField"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectField([NotNull] GraphqlParser.ObjectFieldContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.objectFieldWithVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectFieldWithVariable([NotNull] GraphqlParser.ObjectFieldWithVariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.objectFieldWithVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectFieldWithVariable([NotNull] GraphqlParser.ObjectFieldWithVariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.directives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirectives([NotNull] GraphqlParser.DirectivesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.directives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirectives([NotNull] GraphqlParser.DirectivesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirective([NotNull] GraphqlParser.DirectiveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirective([NotNull] GraphqlParser.DirectiveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArguments([NotNull] GraphqlParser.ArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArguments([NotNull] GraphqlParser.ArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument([NotNull] GraphqlParser.ArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument([NotNull] GraphqlParser.ArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.baseName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBaseName([NotNull] GraphqlParser.BaseNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.baseName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBaseName([NotNull] GraphqlParser.BaseNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.fragmentName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFragmentName([NotNull] GraphqlParser.FragmentNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.fragmentName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFragmentName([NotNull] GraphqlParser.FragmentNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterName([NotNull] GraphqlParser.NameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitName([NotNull] GraphqlParser.NameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue([NotNull] GraphqlParser.ValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue([NotNull] GraphqlParser.ValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.valueWithVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueWithVariable([NotNull] GraphqlParser.ValueWithVariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.valueWithVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueWithVariable([NotNull] GraphqlParser.ValueWithVariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] GraphqlParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] GraphqlParser.VariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.defaultValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefaultValue([NotNull] GraphqlParser.DefaultValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.defaultValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefaultValue([NotNull] GraphqlParser.DefaultValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.stringValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringValue([NotNull] GraphqlParser.StringValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.stringValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringValue([NotNull] GraphqlParser.StringValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] GraphqlParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] GraphqlParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeName([NotNull] GraphqlParser.TypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeName([NotNull] GraphqlParser.TypeNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.listType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListType([NotNull] GraphqlParser.ListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.listType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListType([NotNull] GraphqlParser.ListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.nonNullType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNonNullType([NotNull] GraphqlParser.NonNullTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.nonNullType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNonNullType([NotNull] GraphqlParser.NonNullTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.operationDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperationDefinition([NotNull] GraphqlParser.OperationDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.operationDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperationDefinition([NotNull] GraphqlParser.OperationDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.variableDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDefinitions([NotNull] GraphqlParser.VariableDefinitionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.variableDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDefinitions([NotNull] GraphqlParser.VariableDefinitionsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.variableDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDefinition([NotNull] GraphqlParser.VariableDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.variableDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDefinition([NotNull] GraphqlParser.VariableDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.selectionSet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectionSet([NotNull] GraphqlParser.SelectionSetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.selectionSet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectionSet([NotNull] GraphqlParser.SelectionSetContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.selection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelection([NotNull] GraphqlParser.SelectionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.selection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelection([NotNull] GraphqlParser.SelectionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.field"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterField([NotNull] GraphqlParser.FieldContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.field"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitField([NotNull] GraphqlParser.FieldContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.alias"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAlias([NotNull] GraphqlParser.AliasContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.alias"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAlias([NotNull] GraphqlParser.AliasContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.fragmentSpread"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFragmentSpread([NotNull] GraphqlParser.FragmentSpreadContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.fragmentSpread"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFragmentSpread([NotNull] GraphqlParser.FragmentSpreadContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.inlineFragment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInlineFragment([NotNull] GraphqlParser.InlineFragmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.inlineFragment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInlineFragment([NotNull] GraphqlParser.InlineFragmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.fragmentDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFragmentDefinition([NotNull] GraphqlParser.FragmentDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.fragmentDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFragmentDefinition([NotNull] GraphqlParser.FragmentDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GraphqlParser.typeCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeCondition([NotNull] GraphqlParser.TypeConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GraphqlParser.typeCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeCondition([NotNull] GraphqlParser.TypeConditionContext context);
}
} // namespace GraphLinqQL.Ast.Antlr
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /source/Graphql.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GraphLinqQL.Ast.Antlr {

     

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class GraphqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, BooleanValue=15, NullValue=16, 
		FRAGMENT=17, QUERY=18, MUTATION=19, SUBSCRIPTION=20, SCHEMA=21, SCALAR=22, 
		TYPE=23, INTERFACE=24, IMPLEMENTS=25, ENUM=26, UNION=27, INPUT=28, EXTEND=29, 
		DIRECTIVE=30, ON_KEYWORD=31, NAME=32, IntValue=33, FloatValue=34, Sign=35, 
		IntegerPart=36, NonZeroDigit=37, ExponentPart=38, Digit=39, StringValue=40, 
		TripleQuotedStringValue=41, Comment=42, LF=43, CR=44, LineTerminator=45, 
		Space=46, Tab=47, Comma=48, UnicodeBOM=49;
	public const int
		RULE_document = 0, RULE_definition = 1, RULE_typeSystemDefinition = 2, 
		RULE_schemaDefinition = 3, RULE_operationTypeDefinition = 4, RULE_typeDefinition = 5, 
		RULE_typeExtension = 6, RULE_emptyParentheses = 7, RULE_scalarTypeDefinition = 8, 
		RULE_scalarTypeExtensionDefinition = 9, RULE_objectTypeDefinition = 10, 
		RULE_objectTypeExtensionDefinition = 11, RULE_implementsInterfaces = 12, 
		RULE_fieldsDefinition = 13, RULE_extensionFieldsDefinition = 14, RULE_fieldDefinition = 15, 
		RULE_argumentsDefinition = 16, RULE_inputValueDefinition = 17, RULE_interfaceTypeDefinition = 18, 
		RULE_interfaceTypeExtensionDefinition = 19, RULE_unionTypeDefinition = 20, 
		RULE_unionTypeExtensionDefinition = 21, RULE_unionMembership = 22, RULE_unionMembers = 23, 
		RULE_enumTypeDefinition = 24, RULE_enumTypeExtensionDefinition = 25, RULE_enumValueDefinitions = 26, 
		RULE_extensionEnumValueDefinitions = 27, RULE_enumValueDefinition = 28, 
		RULE_inputObjectTypeDefinition = 29, RULE_inputObjectTypeExtensionDefinition = 30, 
		RULE_inputObjectValueDefinitions = 31, RULE_extensionInputObjectValueDefinitions = 32, 
		RULE_directiveDefinition = 33, RULE_directiveLocation = 34, RULE_directiveLocations = 35, 
		RULE_operationType = 36, RULE_description = 37, RULE_enumValue = 38, RULE_arrayValue = 39, 
		RULE_arrayValueWithVariable = 40, RULE_objectValue = 41, RULE_objectValueWithVariable = 42, 
		RULE_objectField = 43, RULE_objectFieldWithVariable = 44, RULE_directives = 45, 
		RULE_directive = 46, RULE_arguments = 47, RULE_argument = 48, RULE_baseName = 49, 
		RULE_fragmentName = 50, RULE_name = 51, RULE_value = 52, RULE_valueWithVariable = 53, 
		RULE_variable = 54, RULE_defaultValue = 55, RULE_stringValue = 56, RULE_type = 57, 
		RULE_typeName = 58, RULE_listType = 59, RULE_nonNullType = 60, RULE_operationDefinition = 61, 
		RULE_variableDefinitions = 62, RULE_variableDefinition = 63, RULE_selectionSet = 64, 
		RULE_selection = 65, RULE_field = 66, RULE_alias = 67, RULE_fragmentSpread = 68, 
		RULE_inlineFragment = 69, RULE_fragmentDefinition = 70, RULE_typeCondition = 71;
	public static readonly string[] ruleNames = {
		"document", "definition", "typeSystemDefinition", "schemaDefinition", 
		"operationTypeDefinition", "typeDefinition", "typeExtension", "emptyParentheses", 
		"scalarTypeDefinition", "scalarTypeExtensionDefinition", "objectTypeDefinition", 
		"objectTypeExtensionDefinition", "implementsInterfaces", "fieldsDefinition", 
		"extensionFieldsDefinition", "fieldDefinition", "argumentsDefinition", 
		"inputValueDefinition", "interfaceTypeDefinition", "interfaceTypeExtensionDefinition", 
		"unionTypeDefinition", "unionTypeExtensionDefinition", "unionMembership", 
		"unionMembers", "enumTypeDefinition", "enumTypeExtensionDefinition", "enumValueDefinitions", 
		"extensionEnumValueDefinitions", "enumValueDefinition", "inputObjectTypeDefinition", 
		"inputObjectTypeExtensionDefinition", "inputObjectValueDefinitions", "extensionInputObjectValueDefinitions", 
		"directiveDefinition", "directiveLocation", "directiveLocations", "operationType", 
		"description", "enumValue", "arrayValue", "arrayValueWithVariable", "objectValue", 
		"objectValueWithVariable", "objectField", "objectFieldWithVariable", "directives", 
		"directive", "arguments", "argument", "baseName", "fragmentName", "name", 
		"value", "valueWithVariable", "variable", "defaultValue", "stringValue", 
		"type", "typeName", "listType", "nonNullType", "operationDefinition", 
		"variableDefinitions", "variableDefinition", "selectionSet", "selection", 
		"field", "alias", "fragmentSpread", "inlineFragment", "fragmentDefinition", 
		"typeCondition"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "':'", "'&'", "'('", "')'", "'='", "'|'", "'@'", "'['", 
		"']'", "'$'", "'!'", "'...'", null, "'null'", "'fragment'", "'query'", 
		"'mutation'", "'subscription'", "'schema'", "'scalar'", "'type'", "'interface'", 
		"'implements'", "'enum'", "'union'", "'input'", "'extend'", "'directive'", 
		"'on'", null, null, null, "'-'", null, null, null, null, null, null, null, 
		null, null, null, null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "BooleanValue", "NullValue", "FRAGMENT", "QUERY", "MUTATION", 
		"SUBSCRIPTION", "SCHEMA", "SCALAR", "TYPE", "INTERFACE", "IMPLEMENTS", 
		"ENUM", "UNION", "INPUT", "EXTEND", "DIRECTIVE", "ON_KEYWORD", "NAME", 
		"IntValue", "FloatValue", "Sign", "IntegerPart", "NonZeroDigit", "ExponentPart", 
		"Digit", "StringValue", "TripleQuotedStringValue", "Comment", "LF", "CR", 
		"LineTerminator", "Space", "Tab", "Comma", "UnicodeBOM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Graphql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GraphqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GraphqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GraphqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DocumentContext : ParserRuleContext {
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 144; definition();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << FRAGMENT) | (1L << QUERY) | (1L << MUTATION) | (1L << SUBSCRIPTION) | (1L << SCHEMA) | (1L << SCALAR) | (1L << TYPE) | (1L << INTERFACE) | (1L << ENUM) | (1L << UNION) | (1L << INPUT) | (1L << EXTEND) | (1L << DIRECTIVE) | (1L << StringValue) | (1L << TripleQuotedStringValue))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public OperationDefinitionContext operationDefinition() {
			return GetRuleContext<OperationDefinitionContext>(0);
		}
		public FragmentDefinitionContext fragmentDefinition() {
			return GetRuleContext<FragmentDefinitionContext>(0);
		}
		public TypeSystemDefinitionContext typeSystemDefinition() {
			return GetRuleContext<TypeSystemDefinitionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_definition);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case QUERY:
			case MUTATION:
			case SUBSCRIPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149; operationDefinition();
				}
				break;
			case FRAGMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150; fragmentDefinition();
				}
				break;
			case SCHEMA:
			case SCALAR:
			case TYPE:
			case INTERFACE:
			case ENUM:
			case UNION:
			case INPUT:
			case EXTEND:
			case DIRECTIVE:
			case StringValue:
			case TripleQuotedStringValue:
				EnterOuterAlt(_localctx, 3);
				{
				State = 151; typeSystemDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSystemDefinitionContext : ParserRuleContext {
		public SchemaDefinitionContext schemaDefinition() {
			return GetRuleContext<SchemaDefinitionContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		public TypeExtensionContext typeExtension() {
			return GetRuleContext<TypeExtensionContext>(0);
		}
		public DirectiveDefinitionContext directiveDefinition() {
			return GetRuleContext<DirectiveDefinitionContext>(0);
		}
		public TypeSystemDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSystemDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterTypeSystemDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitTypeSystemDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSystemDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSystemDefinitionContext typeSystemDefinition() {
		TypeSystemDefinitionContext _localctx = new TypeSystemDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_typeSystemDefinition);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 154; description();
					}
					break;
				}
				State = 157; schemaDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; typeDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159; typeExtension();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 160; directiveDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaDefinitionContext : ParserRuleContext {
		public ITerminalNode SCHEMA() { return GetToken(GraphqlParser.SCHEMA, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public OperationTypeDefinitionContext[] operationTypeDefinition() {
			return GetRuleContexts<OperationTypeDefinitionContext>();
		}
		public OperationTypeDefinitionContext operationTypeDefinition(int i) {
			return GetRuleContext<OperationTypeDefinitionContext>(i);
		}
		public SchemaDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterSchemaDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitSchemaDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaDefinitionContext schemaDefinition() {
		SchemaDefinitionContext _localctx = new SchemaDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_schemaDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringValue || _la==TripleQuotedStringValue) {
				{
				State = 163; description();
				}
			}

			State = 166; Match(SCHEMA);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 167; directives();
				}
			}

			State = 170; Match(T__0);
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 171; operationTypeDefinition();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUERY) | (1L << MUTATION) | (1L << SUBSCRIPTION) | (1L << StringValue) | (1L << TripleQuotedStringValue))) != 0) );
			State = 176; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationTypeDefinitionContext : ParserRuleContext {
		public OperationTypeContext operationType() {
			return GetRuleContext<OperationTypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public OperationTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterOperationTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitOperationTypeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationTypeDefinitionContext operationTypeDefinition() {
		OperationTypeDefinitionContext _localctx = new OperationTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_operationTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringValue || _la==TripleQuotedStringValue) {
				{
				State = 178; description();
				}
			}

			State = 181; operationType();
			State = 182; Match(T__2);
			State = 183; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		public ScalarTypeDefinitionContext scalarTypeDefinition() {
			return GetRuleContext<ScalarTypeDefinitionContext>(0);
		}
		public ObjectTypeDefinitionContext objectTypeDefinition() {
			return GetRuleContext<ObjectTypeDefinitionContext>(0);
		}
		public InterfaceTypeDefinitionContext interfaceTypeDefinition() {
			return GetRuleContext<InterfaceTypeDefinitionContext>(0);
		}
		public UnionTypeDefinitionContext unionTypeDefinition() {
			return GetRuleContext<UnionTypeDefinitionContext>(0);
		}
		public EnumTypeDefinitionContext enumTypeDefinition() {
			return GetRuleContext<EnumTypeDefinitionContext>(0);
		}
		public InputObjectTypeDefinitionContext inputObjectTypeDefinition() {
			return GetRuleContext<InputObjectTypeDefinitionContext>(0);
		}
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitTypeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_typeDefinition);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185; scalarTypeDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186; objectTypeDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 187; interfaceTypeDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 188; unionTypeDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 189; enumTypeDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 190; inputObjectTypeDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeExtensionContext : ParserRuleContext {
		public ObjectTypeExtensionDefinitionContext objectTypeExtensionDefinition() {
			return GetRuleContext<ObjectTypeExtensionDefinitionContext>(0);
		}
		public InterfaceTypeExtensionDefinitionContext interfaceTypeExtensionDefinition() {
			return GetRuleContext<InterfaceTypeExtensionDefinitionContext>(0);
		}
		public UnionTypeExtensionDefinitionContext unionTypeExtensionDefinition() {
			return GetRuleContext<UnionTypeExtensionDefinitionContext>(0);
		}
		public ScalarTypeExtensionDefinitionContext scalarTypeExtensionDefinition() {
			return GetRuleContext<ScalarTypeExtensionDefinitionContext>(0);
		}
		public EnumTypeExtensionDefinitionContext enumTypeExtensionDefinition() {
			return GetRuleContext<EnumTypeExtensionDefinitionContext>(0);
		}
		public InputObjectTypeExtensionDefinitionContext inputObjectTypeExtensionDefinition() {
			return GetRuleContext<InputObjectTypeExtensionDefinitionContext>(0);
		}
		public TypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeExtension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterTypeExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitTypeExtension(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeExtensionContext typeExtension() {
		TypeExtensionContext _localctx = new TypeExtensionContext(Context, State);
		EnterRule(_localctx, 12, RULE_typeExtension);
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193; objectTypeExtensionDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194; interfaceTypeExtensionDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 195; unionTypeExtensionDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 196; scalarTypeExtensionDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 197; enumTypeExtensionDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 198; inputObjectTypeExtensionDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyParenthesesContext : ParserRuleContext {
		public EmptyParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyParentheses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterEmptyParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitEmptyParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyParenthesesContext emptyParentheses() {
		EmptyParenthesesContext _localctx = new EmptyParenthesesContext(Context, State);
		EnterRule(_localctx, 14, RULE_emptyParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(T__0);
			State = 202; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeDefinitionContext : ParserRuleContext {
		public ITerminalNode SCALAR() { return GetToken(GraphqlParser.SCALAR, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public ScalarTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterScalarTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitScalarTypeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeDefinitionContext scalarTypeDefinition() {
		ScalarTypeDefinitionContext _localctx = new ScalarTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_scalarTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringValue || _la==TripleQuotedStringValue) {
				{
				State = 204; description();
				}
			}

			State = 207; Match(SCALAR);
			State = 208; name();
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 209; directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeExtensionDefinitionContext : ParserRuleContext {
		public ITerminalNode EXTEND() { return GetToken(GraphqlParser.EXTEND, 0); }
		public ITerminalNode SCALAR() { return GetToken(GraphqlParser.SCALAR, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public ScalarTypeExtensionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarTypeExtensionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterScalarTypeExtensionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitScalarTypeExtensionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarTypeExtensionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeExtensionDefinitionContext scalarTypeExtensionDefinition() {
		ScalarTypeExtensionDefinitionContext _localctx = new ScalarTypeExtensionDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_scalarTypeExtensionDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(EXTEND);
			State = 213; Match(SCALAR);
			State = 214; name();
			State = 215; directives();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeDefinitionContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(GraphqlParser.TYPE, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public ImplementsInterfacesContext implementsInterfaces() {
			return GetRuleContext<ImplementsInterfacesContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FieldsDefinitionContext fieldsDefinition() {
			return GetRuleContext<FieldsDefinitionContext>(0);
		}
		public ObjectTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterObjectTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitObjectTypeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeDefinitionContext objectTypeDefinition() {
		ObjectTypeDefinitionContext _localctx = new ObjectTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_objectTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringValue || _la==TripleQuotedStringValue) {
				{
				State = 217; description();
				}
			}

			State = 220; Match(TYPE);
			State = 221; name();
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 222; implementsInterfaces(0);
				}
			}

			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 225; directives();
				}
			}

			State = 229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 228; fieldsDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeExtensionDefinitionContext : ParserRuleContext {
		public ITerminalNode EXTEND() { return GetToken(GraphqlParser.EXTEND, 0); }
		public ITerminalNode TYPE() { return GetToken(GraphqlParser.TYPE, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExtensionFieldsDefinitionContext extensionFieldsDefinition() {
			return GetRuleContext<ExtensionFieldsDefinitionContext>(0);
		}
		public ImplementsInterfacesContext implementsInterfaces() {
			return GetRuleContext<ImplementsInterfacesContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public EmptyParenthesesContext emptyParentheses() {
			return GetRuleContext<EmptyParenthesesContext>(0);
		}
		public ObjectTypeExtensionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectTypeExtensionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterObjectTypeExtensionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitObjectTypeExtensionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectTypeExtensionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeExtensionDefinitionContext objectTypeExtensionDefinition() {
		ObjectTypeExtensionDefinitionContext _localctx = new ObjectTypeExtensionDefinitionContext(Context, State);
		EnterRule(_localctx, 22, RULE_objectTypeExtensionDefinition);
		int _la;
		try {
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231; Match(EXTEND);
				State = 232; Match(TYPE);
				State = 233; name();
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IMPLEMENTS) {
					{
					State = 234; implementsInterfaces(0);
					}
				}

				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 237; directives();
					}
				}

				State = 240; extensionFieldsDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242; Match(EXTEND);
				State = 243; Match(TYPE);
				State = 244; name();
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IMPLEMENTS) {
					{
					State = 245; implementsInterfaces(0);
					}
				}

				State = 248; directives();
				State = 250;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 249; emptyParentheses();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 252; Match(EXTEND);
				State = 253; Match(TYPE);
				State = 254; name();
				State = 255; implementsInterfaces(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsInterfacesContext : ParserRuleContext {
		public ITerminalNode IMPLEMENTS() { return GetToken(GraphqlParser.IMPLEMENTS, 0); }
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public ImplementsInterfacesContext implementsInterfaces() {
			return GetRuleContext<ImplementsInterfacesContext>(0);
		}
		public ImplementsInterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsInterfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterImplementsInterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitImplementsInterfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsInterfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsInterfacesContext implementsInterfaces() {
		return implementsInterfaces(0);
	}

	private ImplementsInterfacesContext implementsInterfaces(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ImplementsInterfacesContext _localctx = new ImplementsInterfacesContext(Context, _parentState);
		ImplementsInterfacesContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_implementsInterfaces, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 260; Match(IMPLEMENTS);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 261; Match(T__3);
				}
			}

			State = 265;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 264; typeName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 267;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
			Context.Stop = TokenStream.LT(-1);
			State = 274;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ImplementsInterfacesContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_implementsInterfaces);
					State = 269;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 270; Match(T__3);
					State = 271; typeName();
					}
					} 
				}
				State = 276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FieldsDefinitionContext : ParserRuleContext {
		public FieldDefinitionContext[] fieldDefinition() {
			return GetRuleContexts<FieldDefinitionContext>();
		}
		public FieldDefinitionContext fieldDefinition(int i) {
			return GetRuleContext<FieldDefinitionContext>(i);
		}
		public FieldsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterFieldsDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitFieldsDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsDefinitionContext fieldsDefinition() {
		FieldsDefinitionContext _localctx = new FieldsDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_fieldsDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(T__0);
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BooleanValue) | (1L << NullValue) | (1L << FRAGMENT) | (1L << QUERY) | (1L << MUTATION) | (1L << SUBSCRIPTION) | (1L << SCHEMA) | (1L << SCALAR) | (1L << TYPE) | (1L << INTERFACE) | (1L << IMPLEMENTS) | (1L << ENUM) | (1L << UNION) | (1L << INPUT) | (1L << EXTEND) | (1L << DIRECTIVE) | (1L << ON_KEYWORD) | (1L << NAME) | (1L << StringValue) | (1L << TripleQuotedStringValue))) != 0)) {
				{
				{
				State = 278; fieldDefinition();
				}
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 284; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionFieldsDefinitionContext : ParserRuleContext {
		public FieldDefinitionContext[] fieldDefinition() {
			return GetRuleContexts<FieldDefinitionContext>();
		}
		public FieldDefinitionContext fieldDefinition(int i) {
			return GetRuleContext<FieldDefinitionContext>(i);
		}
		public ExtensionFieldsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionFieldsDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterExtensionFieldsDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitExtensionFieldsDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionFieldsDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionFieldsDefinitionContext extensionFieldsDefinition() {
		ExtensionFieldsDefinitionContext _localctx = new ExtensionFieldsDefinitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_extensionFieldsDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; Match(T__0);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 287; fieldDefinition();
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BooleanValue) | (1L << NullValue) | (1L << FRAGMENT) | (1L << QUERY) | (1L << MUTATION) | (1L << SUBSCRIPTION) | (1L << SCHEMA) | (1L << SCALAR) | (1L << TYPE) | (1L << INTERFACE) | (1L << IMPLEMENTS) | (1L << ENUM) | (1L << UNION) | (1L << INPUT) | (1L << EXTEND) | (1L << DIRECTIVE) | (1L << ON_KEYWORD) | (1L << NAME) | (1L << StringValue) | (1L << TripleQuotedStringValue))) != 0) );
			State = 292; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public ArgumentsDefinitionContext argumentsDefinition() {
			return GetRuleContext<ArgumentsDefinitionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 30, RULE_fieldDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringValue || _la==TripleQuotedStringValue) {
				{
				State = 294; description();
				}
			}

			State = 297; name();
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 298; argumentsDefinition();
				}
			}

			State = 301; Match(T__2);
			State = 302; type();
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 303; directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsDefinitionContext : ParserRuleContext {
		public InputValueDefinitionContext[] inputValueDefinition() {
			return GetRuleContexts<InputValueDefinitionContext>();
		}
		public InputValueDefinitionContext inputValueDefinition(int i) {
			return GetRuleContext<InputValueDefinitionContext>(i);
		}
		public ArgumentsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterArgumentsDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitArgumentsDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentsDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsDefinitionContext argumentsDefinition() {
		ArgumentsDefinitionContext _localctx = new ArgumentsDefinitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_argumentsDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(T__4);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 307; inputValueDefinition();
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BooleanValue) | (1L << NullValue) | (1L << FRAGMENT) | (1L << QUERY) | (1L << MUTATION) | (1L << SUBSCRIPTION) | (1L << SCHEMA) | (1L << SCALAR) | (1L << TYPE) | (1L << INTERFACE) | (1L << IMPLEMENTS) | (1L << ENUM) | (1L << UNION) | (1L << INPUT) | (1L << EXTEND) | (1L << DIRECTIVE) | (1L << ON_KEYWORD) | (1L << NAME) | (1L << StringValue) | (1L << TripleQuotedStringValue))) != 0) );
			State = 312; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputValueDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public InputValueDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputValueDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterInputValueDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitInputValueDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputValueDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputValueDefinitionContext inputValueDefinition() {
		InputValueDefinitionContext _localctx = new InputValueDefinitionContext(Context, State);
		EnterRule(_localctx, 34, RULE_inputValueDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringValue || _la==TripleQuotedStringValue) {
				{
				State = 314; description();
				}
			}

			State = 317; name();
			State = 318; Match(T__2);
			State = 319; type();
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 320; defaultValue();
				}
			}

			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 323; directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeDefinitionContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(GraphqlParser.INTERFACE, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FieldsDefinitionContext fieldsDefinition() {
			return GetRuleContext<FieldsDefinitionContext>(0);
		}
		public InterfaceTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterInterfaceTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitInterfaceTypeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeDefinitionContext interfaceTypeDefinition() {
		InterfaceTypeDefinitionContext _localctx = new InterfaceTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 36, RULE_interfaceTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringValue || _la==TripleQuotedStringValue) {
				{
				State = 326; description();
				}
			}

			State = 329; Match(INTERFACE);
			State = 330; name();
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 331; directives();
				}
			}

			State = 335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 334; fieldsDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeExtensionDefinitionContext : ParserRuleContext {
		public ITerminalNode EXTEND() { return GetToken(GraphqlParser.EXTEND, 0); }
		public ITerminalNode INTERFACE() { return GetToken(GraphqlParser.INTERFACE, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExtensionFieldsDefinitionContext extensionFieldsDefinition() {
			return GetRuleContext<ExtensionFieldsDefinitionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public EmptyParenthesesContext emptyParentheses() {
			return GetRuleContext<EmptyParenthesesContext>(0);
		}
		public InterfaceTypeExtensionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeExtensionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterInterfaceTypeExtensionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitInterfaceTypeExtensionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeExtensionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeExtensionDefinitionContext interfaceTypeExtensionDefinition() {
		InterfaceTypeExtensionDefinitionContext _localctx = new InterfaceTypeExtensionDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_interfaceTypeExtensionDefinition);
		int _la;
		try {
			State = 352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 337; Match(EXTEND);
				State = 338; Match(INTERFACE);
				State = 339; name();
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 340; directives();
					}
				}

				State = 343; extensionFieldsDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 345; Match(EXTEND);
				State = 346; Match(INTERFACE);
				State = 347; name();
				State = 348; directives();
				State = 350;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 349; emptyParentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionTypeDefinitionContext : ParserRuleContext {
		public ITerminalNode UNION() { return GetToken(GraphqlParser.UNION, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public UnionMembershipContext unionMembership() {
			return GetRuleContext<UnionMembershipContext>(0);
		}
		public UnionTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterUnionTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitUnionTypeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionTypeDefinitionContext unionTypeDefinition() {
		UnionTypeDefinitionContext _localctx = new UnionTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 40, RULE_unionTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringValue || _la==TripleQuotedStringValue) {
				{
				State = 354; description();
				}
			}

			State = 357; Match(UNION);
			State = 358; name();
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 359; directives();
				}
			}

			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 362; unionMembership();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionTypeExtensionDefinitionContext : ParserRuleContext {
		public ITerminalNode EXTEND() { return GetToken(GraphqlParser.EXTEND, 0); }
		public ITerminalNode UNION() { return GetToken(GraphqlParser.UNION, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public UnionMembershipContext unionMembership() {
			return GetRuleContext<UnionMembershipContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public UnionTypeExtensionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionTypeExtensionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterUnionTypeExtensionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitUnionTypeExtensionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionTypeExtensionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionTypeExtensionDefinitionContext unionTypeExtensionDefinition() {
		UnionTypeExtensionDefinitionContext _localctx = new UnionTypeExtensionDefinitionContext(Context, State);
		EnterRule(_localctx, 42, RULE_unionTypeExtensionDefinition);
		int _la;
		try {
			State = 378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 365; Match(EXTEND);
				State = 366; Match(UNION);
				State = 367; name();
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 368; directives();
					}
				}

				State = 371; unionMembership();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373; Match(EXTEND);
				State = 374; Match(UNION);
				State = 375; name();
				State = 376; directives();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionMembershipContext : ParserRuleContext {
		public UnionMembersContext unionMembers() {
			return GetRuleContext<UnionMembersContext>(0);
		}
		public UnionMembershipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionMembership; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterUnionMembership(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitUnionMembership(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionMembership(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionMembershipContext unionMembership() {
		UnionMembershipContext _localctx = new UnionMembershipContext(Context, State);
		EnterRule(_localctx, 44, RULE_unionMembership);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(T__6);
			State = 381; unionMembers(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionMembersContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UnionMembersContext unionMembers() {
			return GetRuleContext<UnionMembersContext>(0);
		}
		public UnionMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionMembers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterUnionMembers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitUnionMembers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionMembers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionMembersContext unionMembers() {
		return unionMembers(0);
	}

	private UnionMembersContext unionMembers(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		UnionMembersContext _localctx = new UnionMembersContext(Context, _parentState);
		UnionMembersContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_unionMembers, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 384; Match(T__7);
				}
			}

			State = 387; typeName();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 394;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new UnionMembersContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_unionMembers);
					State = 389;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 390; Match(T__7);
					State = 391; typeName();
					}
					} 
				}
				State = 396;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EnumTypeDefinitionContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(GraphqlParser.ENUM, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public EnumValueDefinitionsContext enumValueDefinitions() {
			return GetRuleContext<EnumValueDefinitionsContext>(0);
		}
		public EnumTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterEnumTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitEnumTypeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeDefinitionContext enumTypeDefinition() {
		EnumTypeDefinitionContext _localctx = new EnumTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_enumTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringValue || _la==TripleQuotedStringValue) {
				{
				State = 397; description();
				}
			}

			State = 400; Match(ENUM);
			State = 401; name();
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 402; directives();
				}
			}

			State = 406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 405; enumValueDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeExtensionDefinitionContext : ParserRuleContext {
		public ITerminalNode EXTEND() { return GetToken(GraphqlParser.EXTEND, 0); }
		public ITerminalNode ENUM() { return GetToken(GraphqlParser.ENUM, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExtensionEnumValueDefinitionsContext extensionEnumValueDefinitions() {
			return GetRuleContext<ExtensionEnumValueDefinitionsContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public EmptyParenthesesContext emptyParentheses() {
			return GetRuleContext<EmptyParenthesesContext>(0);
		}
		public EnumTypeExtensionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeExtensionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterEnumTypeExtensionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitEnumTypeExtensionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeExtensionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeExtensionDefinitionContext enumTypeExtensionDefinition() {
		EnumTypeExtensionDefinitionContext _localctx = new EnumTypeExtensionDefinitionContext(Context, State);
		EnterRule(_localctx, 50, RULE_enumTypeExtensionDefinition);
		int _la;
		try {
			State = 423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408; Match(EXTEND);
				State = 409; Match(ENUM);
				State = 410; name();
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 411; directives();
					}
				}

				State = 414; extensionEnumValueDefinitions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 416; Match(EXTEND);
				State = 417; Match(ENUM);
				State = 418; name();
				State = 419; directives();
				State = 421;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 420; emptyParentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueDefinitionsContext : ParserRuleContext {
		public EnumValueDefinitionContext[] enumValueDefinition() {
			return GetRuleContexts<EnumValueDefinitionContext>();
		}
		public EnumValueDefinitionContext enumValueDefinition(int i) {
			return GetRuleContext<EnumValueDefinitionContext>(i);
		}
		public EnumValueDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterEnumValueDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitEnumValueDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueDefinitionsContext enumValueDefinitions() {
		EnumValueDefinitionsContext _localctx = new EnumValueDefinitionsContext(Context, State);
		EnterRule(_localctx, 52, RULE_enumValueDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425; Match(T__0);
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << StringValue) | (1L << TripleQuotedStringValue))) != 0)) {
				{
				{
				State = 426; enumValueDefinition();
				}
				}
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 432; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionEnumValueDefinitionsContext : ParserRuleContext {
		public EnumValueDefinitionContext[] enumValueDefinition() {
			return GetRuleContexts<EnumValueDefinitionContext>();
		}
		public EnumValueDefinitionContext enumValueDefinition(int i) {
			return GetRuleContext<EnumValueDefinitionContext>(i);
		}
		public ExtensionEnumValueDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionEnumValueDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterExtensionEnumValueDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitExtensionEnumValueDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionEnumValueDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionEnumValueDefinitionsContext extensionEnumValueDefinitions() {
		ExtensionEnumValueDefinitionsContext _localctx = new ExtensionEnumValueDefinitionsContext(Context, State);
		EnterRule(_localctx, 54, RULE_extensionEnumValueDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; Match(T__0);
			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 435; enumValueDefinition();
				}
				}
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << StringValue) | (1L << TripleQuotedStringValue))) != 0) );
			State = 440; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueDefinitionContext : ParserRuleContext {
		public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public EnumValueDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterEnumValueDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitEnumValueDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueDefinitionContext enumValueDefinition() {
		EnumValueDefinitionContext _localctx = new EnumValueDefinitionContext(Context, State);
		EnterRule(_localctx, 56, RULE_enumValueDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringValue || _la==TripleQuotedStringValue) {
				{
				State = 442; description();
				}
			}

			State = 445; enumValue();
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 446; directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputObjectTypeDefinitionContext : ParserRuleContext {
		public ITerminalNode INPUT() { return GetToken(GraphqlParser.INPUT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public InputObjectValueDefinitionsContext inputObjectValueDefinitions() {
			return GetRuleContext<InputObjectValueDefinitionsContext>(0);
		}
		public InputObjectTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputObjectTypeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterInputObjectTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitInputObjectTypeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputObjectTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputObjectTypeDefinitionContext inputObjectTypeDefinition() {
		InputObjectTypeDefinitionContext _localctx = new InputObjectTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 58, RULE_inputObjectTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringValue || _la==TripleQuotedStringValue) {
				{
				State = 449; description();
				}
			}

			State = 452; Match(INPUT);
			State = 453; name();
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 454; directives();
				}
			}

			State = 458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 457; inputObjectValueDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputObjectTypeExtensionDefinitionContext : ParserRuleContext {
		public ITerminalNode EXTEND() { return GetToken(GraphqlParser.EXTEND, 0); }
		public ITerminalNode INPUT() { return GetToken(GraphqlParser.INPUT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExtensionInputObjectValueDefinitionsContext extensionInputObjectValueDefinitions() {
			return GetRuleContext<ExtensionInputObjectValueDefinitionsContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public EmptyParenthesesContext emptyParentheses() {
			return GetRuleContext<EmptyParenthesesContext>(0);
		}
		public InputObjectTypeExtensionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputObjectTypeExtensionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterInputObjectTypeExtensionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitInputObjectTypeExtensionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputObjectTypeExtensionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputObjectTypeExtensionDefinitionContext inputObjectTypeExtensionDefinition() {
		InputObjectTypeExtensionDefinitionContext _localctx = new InputObjectTypeExtensionDefinitionContext(Context, State);
		EnterRule(_localctx, 60, RULE_inputObjectTypeExtensionDefinition);
		int _la;
		try {
			State = 475;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 460; Match(EXTEND);
				State = 461; Match(INPUT);
				State = 462; name();
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 463; directives();
					}
				}

				State = 466; extensionInputObjectValueDefinitions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 468; Match(EXTEND);
				State = 469; Match(INPUT);
				State = 470; name();
				State = 471; directives();
				State = 473;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 472; emptyParentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputObjectValueDefinitionsContext : ParserRuleContext {
		public InputValueDefinitionContext[] inputValueDefinition() {
			return GetRuleContexts<InputValueDefinitionContext>();
		}
		public InputValueDefinitionContext inputValueDefinition(int i) {
			return GetRuleContext<InputValueDefinitionContext>(i);
		}
		public InputObjectValueDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputObjectValueDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterInputObjectValueDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitInputObjectValueDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputObjectValueDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputObjectValueDefinitionsContext inputObjectValueDefinitions() {
		InputObjectValueDefinitionsContext _localctx = new InputObjectValueDefinitionsContext(Context, State);
		EnterRule(_localctx, 62, RULE_inputObjectValueDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477; Match(T__0);
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BooleanValue) | (1L << NullValue) | (1L << FRAGMENT) | (1L << QUERY) | (1L << MUTATION) | (1L << SUBSCRIPTION) | (1L << SCHEMA) | (1L << SCALAR) | (1L << TYPE) | (1L << INTERFACE) | (1L << IMPLEMENTS) | (1L << ENUM) | (1L << UNION) | (1L << INPUT) | (1L << EXTEND) | (1L << DIRECTIVE) | (1L << ON_KEYWORD) | (1L << NAME) | (1L << StringValue) | (1L << TripleQuotedStringValue))) != 0)) {
				{
				{
				State = 478; inputValueDefinition();
				}
				}
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 484; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionInputObjectValueDefinitionsContext : ParserRuleContext {
		public InputValueDefinitionContext[] inputValueDefinition() {
			return GetRuleContexts<InputValueDefinitionContext>();
		}
		public InputValueDefinitionContext inputValueDefinition(int i) {
			return GetRuleContext<InputValueDefinitionContext>(i);
		}
		public ExtensionInputObjectValueDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionInputObjectValueDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterExtensionInputObjectValueDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitExtensionInputObjectValueDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionInputObjectValueDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionInputObjectValueDefinitionsContext extensionInputObjectValueDefinitions() {
		ExtensionInputObjectValueDefinitionsContext _localctx = new ExtensionInputObjectValueDefinitionsContext(Context, State);
		EnterRule(_localctx, 64, RULE_extensionInputObjectValueDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(T__0);
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 487; inputValueDefinition();
				}
				}
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BooleanValue) | (1L << NullValue) | (1L << FRAGMENT) | (1L << QUERY) | (1L << MUTATION) | (1L << SUBSCRIPTION) | (1L << SCHEMA) | (1L << SCALAR) | (1L << TYPE) | (1L << INTERFACE) | (1L << IMPLEMENTS) | (1L << ENUM) | (1L << UNION) | (1L << INPUT) | (1L << EXTEND) | (1L << DIRECTIVE) | (1L << ON_KEYWORD) | (1L << NAME) | (1L << StringValue) | (1L << TripleQuotedStringValue))) != 0) );
			State = 492; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveDefinitionContext : ParserRuleContext {
		public ITerminalNode DIRECTIVE() { return GetToken(GraphqlParser.DIRECTIVE, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DirectiveLocationsContext directiveLocations() {
			return GetRuleContext<DirectiveLocationsContext>(0);
		}
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public ArgumentsDefinitionContext argumentsDefinition() {
			return GetRuleContext<ArgumentsDefinitionContext>(0);
		}
		public DirectiveDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterDirectiveDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitDirectiveDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveDefinitionContext directiveDefinition() {
		DirectiveDefinitionContext _localctx = new DirectiveDefinitionContext(Context, State);
		EnterRule(_localctx, 66, RULE_directiveDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringValue || _la==TripleQuotedStringValue) {
				{
				State = 494; description();
				}
			}

			State = 497; Match(DIRECTIVE);
			State = 498; Match(T__8);
			State = 499; name();
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 500; argumentsDefinition();
				}
			}

			State = 503; Match(ON_KEYWORD);
			State = 504; directiveLocations(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveLocationContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DirectiveLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveLocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterDirectiveLocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitDirectiveLocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveLocationContext directiveLocation() {
		DirectiveLocationContext _localctx = new DirectiveLocationContext(Context, State);
		EnterRule(_localctx, 68, RULE_directiveLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveLocationsContext : ParserRuleContext {
		public DirectiveLocationContext directiveLocation() {
			return GetRuleContext<DirectiveLocationContext>(0);
		}
		public DirectiveLocationsContext directiveLocations() {
			return GetRuleContext<DirectiveLocationsContext>(0);
		}
		public DirectiveLocationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveLocations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterDirectiveLocations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitDirectiveLocations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveLocations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveLocationsContext directiveLocations() {
		return directiveLocations(0);
	}

	private DirectiveLocationsContext directiveLocations(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DirectiveLocationsContext _localctx = new DirectiveLocationsContext(Context, _parentState);
		DirectiveLocationsContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_directiveLocations, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 509; directiveLocation();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 516;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DirectiveLocationsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_directiveLocations);
					State = 511;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 512; Match(T__7);
					State = 513; directiveLocation();
					}
					} 
				}
				State = 518;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperationTypeContext : ParserRuleContext {
		public ITerminalNode SUBSCRIPTION() { return GetToken(GraphqlParser.SUBSCRIPTION, 0); }
		public ITerminalNode MUTATION() { return GetToken(GraphqlParser.MUTATION, 0); }
		public ITerminalNode QUERY() { return GetToken(GraphqlParser.QUERY, 0); }
		public OperationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterOperationType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitOperationType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationTypeContext operationType() {
		OperationTypeContext _localctx = new OperationTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_operationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUERY) | (1L << MUTATION) | (1L << SUBSCRIPTION))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 74, RULE_description);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521; stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(GraphqlParser.NAME, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 76, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayValueContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterArrayValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitArrayValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayValueContext arrayValue() {
		ArrayValueContext _localctx = new ArrayValueContext(Context, State);
		EnterRule(_localctx, 78, RULE_arrayValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; Match(T__9);
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__9) | (1L << BooleanValue) | (1L << NullValue) | (1L << NAME) | (1L << IntValue) | (1L << FloatValue) | (1L << StringValue) | (1L << TripleQuotedStringValue))) != 0)) {
				{
				{
				State = 526; value();
				}
				}
				State = 531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 532; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayValueWithVariableContext : ParserRuleContext {
		public ValueWithVariableContext[] valueWithVariable() {
			return GetRuleContexts<ValueWithVariableContext>();
		}
		public ValueWithVariableContext valueWithVariable(int i) {
			return GetRuleContext<ValueWithVariableContext>(i);
		}
		public ArrayValueWithVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayValueWithVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterArrayValueWithVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitArrayValueWithVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayValueWithVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayValueWithVariableContext arrayValueWithVariable() {
		ArrayValueWithVariableContext _localctx = new ArrayValueWithVariableContext(Context, State);
		EnterRule(_localctx, 80, RULE_arrayValueWithVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534; Match(T__9);
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__9) | (1L << T__11) | (1L << BooleanValue) | (1L << NullValue) | (1L << NAME) | (1L << IntValue) | (1L << FloatValue) | (1L << StringValue) | (1L << TripleQuotedStringValue))) != 0)) {
				{
				{
				State = 535; valueWithVariable();
				}
				}
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 541; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectValueContext : ParserRuleContext {
		public ObjectFieldContext[] objectField() {
			return GetRuleContexts<ObjectFieldContext>();
		}
		public ObjectFieldContext objectField(int i) {
			return GetRuleContext<ObjectFieldContext>(i);
		}
		public ObjectValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterObjectValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitObjectValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectValueContext objectValue() {
		ObjectValueContext _localctx = new ObjectValueContext(Context, State);
		EnterRule(_localctx, 82, RULE_objectValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543; Match(T__0);
			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BooleanValue) | (1L << NullValue) | (1L << FRAGMENT) | (1L << QUERY) | (1L << MUTATION) | (1L << SUBSCRIPTION) | (1L << SCHEMA) | (1L << SCALAR) | (1L << TYPE) | (1L << INTERFACE) | (1L << IMPLEMENTS) | (1L << ENUM) | (1L << UNION) | (1L << INPUT) | (1L << EXTEND) | (1L << DIRECTIVE) | (1L << ON_KEYWORD) | (1L << NAME))) != 0)) {
				{
				{
				State = 544; objectField();
				}
				}
				State = 549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 550; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectValueWithVariableContext : ParserRuleContext {
		public ObjectFieldWithVariableContext[] objectFieldWithVariable() {
			return GetRuleContexts<ObjectFieldWithVariableContext>();
		}
		public ObjectFieldWithVariableContext objectFieldWithVariable(int i) {
			return GetRuleContext<ObjectFieldWithVariableContext>(i);
		}
		public ObjectValueWithVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectValueWithVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterObjectValueWithVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitObjectValueWithVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectValueWithVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectValueWithVariableContext objectValueWithVariable() {
		ObjectValueWithVariableContext _localctx = new ObjectValueWithVariableContext(Context, State);
		EnterRule(_localctx, 84, RULE_objectValueWithVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552; Match(T__0);
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BooleanValue) | (1L << NullValue) | (1L << FRAGMENT) | (1L << QUERY) | (1L << MUTATION) | (1L << SUBSCRIPTION) | (1L << SCHEMA) | (1L << SCALAR) | (1L << TYPE) | (1L << INTERFACE) | (1L << IMPLEMENTS) | (1L << ENUM) | (1L << UNION) | (1L << INPUT) | (1L << EXTEND) | (1L << DIRECTIVE) | (1L << ON_KEYWORD) | (1L << NAME))) != 0)) {
				{
				{
				State = 553; objectFieldWithVariable();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 559; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectFieldContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ObjectFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterObjectField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitObjectField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectFieldContext objectField() {
		ObjectFieldContext _localctx = new ObjectFieldContext(Context, State);
		EnterRule(_localctx, 86, RULE_objectField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; name();
			State = 562; Match(T__2);
			State = 563; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectFieldWithVariableContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ValueWithVariableContext valueWithVariable() {
			return GetRuleContext<ValueWithVariableContext>(0);
		}
		public ObjectFieldWithVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectFieldWithVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterObjectFieldWithVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitObjectFieldWithVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectFieldWithVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectFieldWithVariableContext objectFieldWithVariable() {
		ObjectFieldWithVariableContext _localctx = new ObjectFieldWithVariableContext(Context, State);
		EnterRule(_localctx, 88, RULE_objectFieldWithVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565; name();
			State = 566; Match(T__2);
			State = 567; valueWithVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivesContext : ParserRuleContext {
		public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		public DirectivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterDirectives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitDirectives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivesContext directives() {
		DirectivesContext _localctx = new DirectivesContext(Context, State);
		EnterRule(_localctx, 90, RULE_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 569; directive();
				}
				}
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__8 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 92, RULE_directive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574; Match(T__8);
			State = 575; name();
			State = 577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 576; arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 94, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579; Match(T__4);
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 580; argument();
				}
				}
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BooleanValue) | (1L << NullValue) | (1L << FRAGMENT) | (1L << QUERY) | (1L << MUTATION) | (1L << SUBSCRIPTION) | (1L << SCHEMA) | (1L << SCALAR) | (1L << TYPE) | (1L << INTERFACE) | (1L << IMPLEMENTS) | (1L << ENUM) | (1L << UNION) | (1L << INPUT) | (1L << EXTEND) | (1L << DIRECTIVE) | (1L << ON_KEYWORD) | (1L << NAME))) != 0) );
			State = 585; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ValueWithVariableContext valueWithVariable() {
			return GetRuleContext<ValueWithVariableContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 96, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587; name();
			State = 588; Match(T__2);
			State = 589; valueWithVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(GraphqlParser.NAME, 0); }
		public ITerminalNode FRAGMENT() { return GetToken(GraphqlParser.FRAGMENT, 0); }
		public ITerminalNode QUERY() { return GetToken(GraphqlParser.QUERY, 0); }
		public ITerminalNode MUTATION() { return GetToken(GraphqlParser.MUTATION, 0); }
		public ITerminalNode SUBSCRIPTION() { return GetToken(GraphqlParser.SUBSCRIPTION, 0); }
		public ITerminalNode SCHEMA() { return GetToken(GraphqlParser.SCHEMA, 0); }
		public ITerminalNode SCALAR() { return GetToken(GraphqlParser.SCALAR, 0); }
		public ITerminalNode TYPE() { return GetToken(GraphqlParser.TYPE, 0); }
		public ITerminalNode INTERFACE() { return GetToken(GraphqlParser.INTERFACE, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(GraphqlParser.IMPLEMENTS, 0); }
		public ITerminalNode ENUM() { return GetToken(GraphqlParser.ENUM, 0); }
		public ITerminalNode UNION() { return GetToken(GraphqlParser.UNION, 0); }
		public ITerminalNode INPUT() { return GetToken(GraphqlParser.INPUT, 0); }
		public ITerminalNode EXTEND() { return GetToken(GraphqlParser.EXTEND, 0); }
		public ITerminalNode DIRECTIVE() { return GetToken(GraphqlParser.DIRECTIVE, 0); }
		public BaseNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterBaseName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitBaseName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseNameContext baseName() {
		BaseNameContext _localctx = new BaseNameContext(Context, State);
		EnterRule(_localctx, 98, RULE_baseName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << QUERY) | (1L << MUTATION) | (1L << SUBSCRIPTION) | (1L << SCHEMA) | (1L << SCALAR) | (1L << TYPE) | (1L << INTERFACE) | (1L << IMPLEMENTS) | (1L << ENUM) | (1L << UNION) | (1L << INPUT) | (1L << EXTEND) | (1L << DIRECTIVE) | (1L << NAME))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragmentNameContext : ParserRuleContext {
		public BaseNameContext baseName() {
			return GetRuleContext<BaseNameContext>(0);
		}
		public ITerminalNode BooleanValue() { return GetToken(GraphqlParser.BooleanValue, 0); }
		public ITerminalNode NullValue() { return GetToken(GraphqlParser.NullValue, 0); }
		public FragmentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fragmentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterFragmentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitFragmentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFragmentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FragmentNameContext fragmentName() {
		FragmentNameContext _localctx = new FragmentNameContext(Context, State);
		EnterRule(_localctx, 100, RULE_fragmentName);
		try {
			State = 596;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FRAGMENT:
			case QUERY:
			case MUTATION:
			case SUBSCRIPTION:
			case SCHEMA:
			case SCALAR:
			case TYPE:
			case INTERFACE:
			case IMPLEMENTS:
			case ENUM:
			case UNION:
			case INPUT:
			case EXTEND:
			case DIRECTIVE:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 593; baseName();
				}
				break;
			case BooleanValue:
				EnterOuterAlt(_localctx, 2);
				{
				State = 594; Match(BooleanValue);
				}
				break;
			case NullValue:
				EnterOuterAlt(_localctx, 3);
				{
				State = 595; Match(NullValue);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public BaseNameContext baseName() {
			return GetRuleContext<BaseNameContext>(0);
		}
		public ITerminalNode BooleanValue() { return GetToken(GraphqlParser.BooleanValue, 0); }
		public ITerminalNode NullValue() { return GetToken(GraphqlParser.NullValue, 0); }
		public ITerminalNode ON_KEYWORD() { return GetToken(GraphqlParser.ON_KEYWORD, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 102, RULE_name);
		try {
			State = 602;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FRAGMENT:
			case QUERY:
			case MUTATION:
			case SUBSCRIPTION:
			case SCHEMA:
			case SCALAR:
			case TYPE:
			case INTERFACE:
			case IMPLEMENTS:
			case ENUM:
			case UNION:
			case INPUT:
			case EXTEND:
			case DIRECTIVE:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 598; baseName();
				}
				break;
			case BooleanValue:
				EnterOuterAlt(_localctx, 2);
				{
				State = 599; Match(BooleanValue);
				}
				break;
			case NullValue:
				EnterOuterAlt(_localctx, 3);
				{
				State = 600; Match(NullValue);
				}
				break;
			case ON_KEYWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 601; Match(ON_KEYWORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public ITerminalNode IntValue() { return GetToken(GraphqlParser.IntValue, 0); }
		public ITerminalNode FloatValue() { return GetToken(GraphqlParser.FloatValue, 0); }
		public ITerminalNode BooleanValue() { return GetToken(GraphqlParser.BooleanValue, 0); }
		public ITerminalNode NullValue() { return GetToken(GraphqlParser.NullValue, 0); }
		public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public ArrayValueContext arrayValue() {
			return GetRuleContext<ArrayValueContext>(0);
		}
		public ObjectValueContext objectValue() {
			return GetRuleContext<ObjectValueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 104, RULE_value);
		try {
			State = 612;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringValue:
			case TripleQuotedStringValue:
				EnterOuterAlt(_localctx, 1);
				{
				State = 604; stringValue();
				}
				break;
			case IntValue:
				EnterOuterAlt(_localctx, 2);
				{
				State = 605; Match(IntValue);
				}
				break;
			case FloatValue:
				EnterOuterAlt(_localctx, 3);
				{
				State = 606; Match(FloatValue);
				}
				break;
			case BooleanValue:
				EnterOuterAlt(_localctx, 4);
				{
				State = 607; Match(BooleanValue);
				}
				break;
			case NullValue:
				EnterOuterAlt(_localctx, 5);
				{
				State = 608; Match(NullValue);
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 6);
				{
				State = 609; enumValue();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 7);
				{
				State = 610; arrayValue();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 8);
				{
				State = 611; objectValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueWithVariableContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public ITerminalNode IntValue() { return GetToken(GraphqlParser.IntValue, 0); }
		public ITerminalNode FloatValue() { return GetToken(GraphqlParser.FloatValue, 0); }
		public ITerminalNode BooleanValue() { return GetToken(GraphqlParser.BooleanValue, 0); }
		public ITerminalNode NullValue() { return GetToken(GraphqlParser.NullValue, 0); }
		public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public ArrayValueWithVariableContext arrayValueWithVariable() {
			return GetRuleContext<ArrayValueWithVariableContext>(0);
		}
		public ObjectValueWithVariableContext objectValueWithVariable() {
			return GetRuleContext<ObjectValueWithVariableContext>(0);
		}
		public ValueWithVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueWithVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterValueWithVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitValueWithVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueWithVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueWithVariableContext valueWithVariable() {
		ValueWithVariableContext _localctx = new ValueWithVariableContext(Context, State);
		EnterRule(_localctx, 106, RULE_valueWithVariable);
		try {
			State = 623;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614; variable();
				}
				break;
			case StringValue:
			case TripleQuotedStringValue:
				EnterOuterAlt(_localctx, 2);
				{
				State = 615; stringValue();
				}
				break;
			case IntValue:
				EnterOuterAlt(_localctx, 3);
				{
				State = 616; Match(IntValue);
				}
				break;
			case FloatValue:
				EnterOuterAlt(_localctx, 4);
				{
				State = 617; Match(FloatValue);
				}
				break;
			case BooleanValue:
				EnterOuterAlt(_localctx, 5);
				{
				State = 618; Match(BooleanValue);
				}
				break;
			case NullValue:
				EnterOuterAlt(_localctx, 6);
				{
				State = 619; Match(NullValue);
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 7);
				{
				State = 620; enumValue();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 8);
				{
				State = 621; arrayValueWithVariable();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 9);
				{
				State = 622; objectValueWithVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 108, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625; Match(T__11);
			State = 626; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 110, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628; Match(T__6);
			State = 629; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		public ITerminalNode TripleQuotedStringValue() { return GetToken(GraphqlParser.TripleQuotedStringValue, 0); }
		public ITerminalNode StringValue() { return GetToken(GraphqlParser.StringValue, 0); }
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(Context, State);
		EnterRule(_localctx, 112, RULE_stringValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			_la = TokenStream.LA(1);
			if ( !(_la==StringValue || _la==TripleQuotedStringValue) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public NonNullTypeContext nonNullType() {
			return GetRuleContext<NonNullTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_type);
		try {
			State = 636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 633; typeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 634; listType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 635; nonNullType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 116, RULE_typeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; Match(T__9);
			State = 641; type();
			State = 642; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonNullTypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public NonNullTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonNullType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterNonNullType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitNonNullType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonNullType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonNullTypeContext nonNullType() {
		NonNullTypeContext _localctx = new NonNullTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_nonNullType);
		try {
			State = 650;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BooleanValue:
			case NullValue:
			case FRAGMENT:
			case QUERY:
			case MUTATION:
			case SUBSCRIPTION:
			case SCHEMA:
			case SCALAR:
			case TYPE:
			case INTERFACE:
			case IMPLEMENTS:
			case ENUM:
			case UNION:
			case INPUT:
			case EXTEND:
			case DIRECTIVE:
			case ON_KEYWORD:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 644; typeName();
				State = 645; Match(T__12);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 647; listType();
				State = 648; Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDefinitionContext : ParserRuleContext {
		public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		public OperationTypeContext operationType() {
			return GetRuleContext<OperationTypeContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(GraphqlParser.NAME, 0); }
		public VariableDefinitionsContext variableDefinitions() {
			return GetRuleContext<VariableDefinitionsContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public OperationDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterOperationDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitOperationDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDefinitionContext operationDefinition() {
		OperationDefinitionContext _localctx = new OperationDefinitionContext(Context, State);
		EnterRule(_localctx, 122, RULE_operationDefinition);
		int _la;
		try {
			State = 665;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 652; selectionSet();
				}
				break;
			case QUERY:
			case MUTATION:
			case SUBSCRIPTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 653; operationType();
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 654; Match(NAME);
					}
				}

				State = 658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 657; variableDefinitions();
					}
				}

				State = 661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 660; directives();
					}
				}

				State = 663; selectionSet();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefinitionsContext : ParserRuleContext {
		public VariableDefinitionContext[] variableDefinition() {
			return GetRuleContexts<VariableDefinitionContext>();
		}
		public VariableDefinitionContext variableDefinition(int i) {
			return GetRuleContext<VariableDefinitionContext>(i);
		}
		public VariableDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterVariableDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitVariableDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDefinitionsContext variableDefinitions() {
		VariableDefinitionsContext _localctx = new VariableDefinitionsContext(Context, State);
		EnterRule(_localctx, 124, RULE_variableDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667; Match(T__4);
			State = 669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 668; variableDefinition();
				}
				}
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__11 );
			State = 673; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefinitionContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public VariableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterVariableDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitVariableDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDefinitionContext variableDefinition() {
		VariableDefinitionContext _localctx = new VariableDefinitionContext(Context, State);
		EnterRule(_localctx, 126, RULE_variableDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675; variable();
			State = 676; Match(T__2);
			State = 677; type();
			State = 679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 678; defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionSetContext : ParserRuleContext {
		public SelectionContext[] selection() {
			return GetRuleContexts<SelectionContext>();
		}
		public SelectionContext selection(int i) {
			return GetRuleContext<SelectionContext>(i);
		}
		public SelectionSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterSelectionSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitSelectionSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionSetContext selectionSet() {
		SelectionSetContext _localctx = new SelectionSetContext(Context, State);
		EnterRule(_localctx, 128, RULE_selectionSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681; Match(T__0);
			State = 683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 682; selection();
				}
				}
				State = 685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << BooleanValue) | (1L << NullValue) | (1L << FRAGMENT) | (1L << QUERY) | (1L << MUTATION) | (1L << SUBSCRIPTION) | (1L << SCHEMA) | (1L << SCALAR) | (1L << TYPE) | (1L << INTERFACE) | (1L << IMPLEMENTS) | (1L << ENUM) | (1L << UNION) | (1L << INPUT) | (1L << EXTEND) | (1L << DIRECTIVE) | (1L << ON_KEYWORD) | (1L << NAME))) != 0) );
			State = 687; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionContext : ParserRuleContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public FragmentSpreadContext fragmentSpread() {
			return GetRuleContext<FragmentSpreadContext>(0);
		}
		public InlineFragmentContext inlineFragment() {
			return GetRuleContext<InlineFragmentContext>(0);
		}
		public SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionContext selection() {
		SelectionContext _localctx = new SelectionContext(Context, State);
		EnterRule(_localctx, 130, RULE_selection);
		try {
			State = 692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 689; field();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 690; fragmentSpread();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 691; inlineFragment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 132, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 694; alias();
				}
				break;
			}
			State = 697; name();
			State = 699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 698; arguments();
				}
			}

			State = 702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 701; directives();
				}
			}

			State = 705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 704; selectionSet();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 134, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707; name();
			State = 708; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragmentSpreadContext : ParserRuleContext {
		public FragmentNameContext fragmentName() {
			return GetRuleContext<FragmentNameContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FragmentSpreadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fragmentSpread; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterFragmentSpread(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitFragmentSpread(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFragmentSpread(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FragmentSpreadContext fragmentSpread() {
		FragmentSpreadContext _localctx = new FragmentSpreadContext(Context, State);
		EnterRule(_localctx, 136, RULE_fragmentSpread);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710; Match(T__13);
			State = 711; fragmentName();
			State = 713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 712; directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineFragmentContext : ParserRuleContext {
		public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		public TypeConditionContext typeCondition() {
			return GetRuleContext<TypeConditionContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public InlineFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineFragment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterInlineFragment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitInlineFragment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineFragmentContext inlineFragment() {
		InlineFragmentContext _localctx = new InlineFragmentContext(Context, State);
		EnterRule(_localctx, 138, RULE_inlineFragment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715; Match(T__13);
			State = 717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_KEYWORD) {
				{
				State = 716; typeCondition();
				}
			}

			State = 720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 719; directives();
				}
			}

			State = 722; selectionSet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragmentDefinitionContext : ParserRuleContext {
		public ITerminalNode FRAGMENT() { return GetToken(GraphqlParser.FRAGMENT, 0); }
		public FragmentNameContext fragmentName() {
			return GetRuleContext<FragmentNameContext>(0);
		}
		public TypeConditionContext typeCondition() {
			return GetRuleContext<TypeConditionContext>(0);
		}
		public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FragmentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fragmentDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterFragmentDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitFragmentDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFragmentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FragmentDefinitionContext fragmentDefinition() {
		FragmentDefinitionContext _localctx = new FragmentDefinitionContext(Context, State);
		EnterRule(_localctx, 140, RULE_fragmentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724; Match(FRAGMENT);
			State = 725; fragmentName();
			State = 726; typeCondition();
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 727; directives();
				}
			}

			State = 730; selectionSet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeConditionContext : ParserRuleContext {
		public ITerminalNode ON_KEYWORD() { return GetToken(GraphqlParser.ON_KEYWORD, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.EnterTypeCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGraphqlListener typedListener = listener as IGraphqlListener;
			if (typedListener != null) typedListener.ExitTypeCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGraphqlVisitor<TResult> typedVisitor = visitor as IGraphqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeConditionContext typeCondition() {
		TypeConditionContext _localctx = new TypeConditionContext(Context, State);
		EnterRule(_localctx, 142, RULE_typeCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732; Match(ON_KEYWORD);
			State = 733; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return implementsInterfaces_sempred((ImplementsInterfacesContext)_localctx, predIndex);
		case 23: return unionMembers_sempred((UnionMembersContext)_localctx, predIndex);
		case 35: return directiveLocations_sempred((DirectiveLocationsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool implementsInterfaces_sempred(ImplementsInterfacesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool unionMembers_sempred(UnionMembersContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool directiveLocations_sempred(DirectiveLocationsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x33', '\x2E2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x3', '\x2', '\x6', '\x2', '\x94', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x95', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x9B', '\n', '\x3', '\x3', '\x4', '\x5', 
		'\x4', '\x9E', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\xA4', '\n', '\x4', '\x3', '\x5', '\x5', 
		'\x5', '\xA7', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xAB', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '\xAF', 
		'\n', '\x5', '\r', '\x5', '\xE', '\x5', '\xB0', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x5', '\x6', '\xB6', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xC2', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\xCA', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x5', '\n', '\xD0', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\xD5', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x5', '\f', 
		'\xDD', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\xE2', '\n', '\f', '\x3', '\f', '\x5', '\f', '\xE5', '\n', '\f', '\x3', 
		'\f', '\x5', '\f', '\xE8', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xEE', '\n', '\r', '\x3', '\r', '\x5', 
		'\r', '\xF1', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xF9', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xFD', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x104', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x109', 
		'\n', '\xE', '\x3', '\xE', '\x6', '\xE', '\x10C', '\n', '\xE', '\r', '\xE', 
		'\xE', '\xE', '\x10D', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', 
		'\xE', '\x113', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x116', '\v', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x11A', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\x11D', '\v', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', '\x123', '\n', '\x10', 
		'\r', '\x10', '\xE', '\x10', '\x124', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x5', '\x11', '\x12A', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x12E', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x133', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x6', '\x12', '\x137', '\n', '\x12', '\r', '\x12', '\xE', '\x12', '\x138', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x5', '\x13', '\x13E', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x144', '\n', '\x13', '\x3', '\x13', '\x5', '\x13', '\x147', 
		'\n', '\x13', '\x3', '\x14', '\x5', '\x14', '\x14A', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x14F', '\n', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\x152', '\n', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x158', '\n', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x161', '\n', '\x15', '\x5', 
		'\x15', '\x163', '\n', '\x15', '\x3', '\x16', '\x5', '\x16', '\x166', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x16B', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', '\x16E', '\n', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x174', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x17D', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x184', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x18B', 
		'\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x18E', '\v', '\x19', '\x3', 
		'\x1A', '\x5', '\x1A', '\x191', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x196', '\n', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x199', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x19F', '\n', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x1A8', '\n', '\x1B', '\x5', '\x1B', '\x1AA', 
		'\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x1AE', '\n', 
		'\x1C', '\f', '\x1C', '\xE', '\x1C', '\x1B1', '\v', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x6', '\x1D', '\x1B7', '\n', 
		'\x1D', '\r', '\x1D', '\xE', '\x1D', '\x1B8', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\x5', '\x1E', '\x1BE', '\n', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x1C2', '\n', '\x1E', '\x3', '\x1F', '\x5', '\x1F', 
		'\x1C5', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x1CA', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1CD', 
		'\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x1D3', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1DC', '\n', ' ', '\x5', ' ', 
		'\x1DE', '\n', ' ', '\x3', '!', '\x3', '!', '\a', '!', '\x1E2', '\n', 
		'!', '\f', '!', '\xE', '!', '\x1E5', '\v', '!', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x3', '\"', '\x6', '\"', '\x1EB', '\n', '\"', '\r', '\"', 
		'\xE', '\"', '\x1EC', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x5', '#', 
		'\x1F2', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x1F8', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', 
		'\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\a', '%', '\x205', '\n', '%', '\f', '%', '\xE', '%', '\x208', 
		'\v', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '(', 
		'\x3', '(', '\x3', ')', '\x3', ')', '\a', ')', '\x212', '\n', ')', '\f', 
		')', '\xE', ')', '\x215', '\v', ')', '\x3', ')', '\x3', ')', '\x3', '*', 
		'\x3', '*', '\a', '*', '\x21B', '\n', '*', '\f', '*', '\xE', '*', '\x21E', 
		'\v', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\a', '+', 
		'\x224', '\n', '+', '\f', '+', '\xE', '+', '\x227', '\v', '+', '\x3', 
		'+', '\x3', '+', '\x3', ',', '\x3', ',', '\a', ',', '\x22D', '\n', ',', 
		'\f', ',', '\xE', ',', '\x230', '\v', ',', '\x3', ',', '\x3', ',', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '/', '\x6', '/', '\x23D', '\n', '/', '\r', '/', 
		'\xE', '/', '\x23E', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x244', '\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x6', '\x31', 
		'\x248', '\n', '\x31', '\r', '\x31', '\xE', '\x31', '\x249', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x5', '\x34', '\x257', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x5', '\x35', '\x25D', '\n', '\x35', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x267', '\n', '\x36', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x272', 
		'\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x5', ';', '\x27F', '\n', ';', '\x3', '<', '\x3', '<', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x28D', '\n', 
		'>', '\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x292', '\n', '?', 
		'\x3', '?', '\x5', '?', '\x295', '\n', '?', '\x3', '?', '\x5', '?', '\x298', 
		'\n', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x29C', '\n', '?', '\x3', 
		'@', '\x3', '@', '\x6', '@', '\x2A0', '\n', '@', '\r', '@', '\xE', '@', 
		'\x2A1', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x5', '\x41', '\x2AA', '\n', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x6', '\x42', '\x2AE', '\n', '\x42', '\r', '\x42', '\xE', 
		'\x42', '\x2AF', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x5', '\x43', '\x2B7', '\n', '\x43', '\x3', '\x44', '\x5', 
		'\x44', '\x2BA', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x2BE', '\n', '\x44', '\x3', '\x44', '\x5', '\x44', '\x2C1', '\n', '\x44', 
		'\x3', '\x44', '\x5', '\x44', '\x2C4', '\n', '\x44', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', 
		'\x46', '\x2CC', '\n', '\x46', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x2D0', 
		'\n', 'G', '\x3', 'G', '\x5', 'G', '\x2D3', '\n', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x2DB', 
		'\n', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x2', '\x5', '\x1A', '\x30', 'H', 'J', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x2', 
		'\x5', '\x3', '\x2', '\x14', '\x16', '\x4', '\x2', '\x13', ' ', '\"', 
		'\"', '\x3', '\x2', '*', '+', '\x2', '\x317', '\x2', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x6', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\xB5', '\x3', '\x2', '\x2', '\x2', '\f', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x10', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\xD6', '\x3', '\x2', '\x2', '\x2', '\x16', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x103', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x120', '\x3', '\x2', '\x2', '\x2', ' ', '\x129', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x134', '\x3', '\x2', '\x2', '\x2', '$', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x162', '\x3', '\x2', '\x2', '\x2', '*', '\x165', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x17C', '\x3', '\x2', '\x2', '\x2', '.', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x190', '\x3', '\x2', '\x2', '\x2', '\x34', '\x1A9', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x38', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x1C4', '\x3', '\x2', '\x2', '\x2', '>', '\x1DD', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1E8', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x1F1', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x1FC', '\x3', '\x2', '\x2', '\x2', 'H', '\x1FE', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x209', '\x3', '\x2', '\x2', '\x2', 'L', '\x20B', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x20D', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x20F', '\x3', '\x2', '\x2', '\x2', 'R', '\x218', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x221', '\x3', '\x2', '\x2', '\x2', 'V', '\x22A', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x233', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x237', '\x3', '\x2', '\x2', '\x2', '\\', '\x23C', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x240', '\x3', '\x2', '\x2', '\x2', '`', '\x245', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x24D', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x251', '\x3', '\x2', '\x2', '\x2', '\x66', '\x256', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x25C', '\x3', '\x2', '\x2', '\x2', 'j', '\x266', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x271', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x273', '\x3', '\x2', '\x2', '\x2', 'p', '\x276', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x279', '\x3', '\x2', '\x2', '\x2', 't', '\x27E', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x280', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x282', '\x3', '\x2', '\x2', '\x2', 'z', '\x28C', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x29B', '\x3', '\x2', '\x2', '\x2', '~', '\x29D', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x2A5', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x84', '\x2B6', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x88', '\x2C5', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x2D6', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', 
		'\x5', '\x4', '\x3', '\x2', '\x93', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x9B', '\x5', '|', '?', '\x2', '\x98', 
		'\x9B', '\x5', '\x8E', 'H', '\x2', '\x99', '\x9B', '\x5', '\x6', '\x4', 
		'\x2', '\x9A', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9E', '\x5', 'L', '\'', '\x2', 
		'\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA4', 
		'\x5', '\b', '\x5', '\x2', '\xA0', '\xA4', '\x5', '\f', '\a', '\x2', '\xA1', 
		'\xA4', '\x5', '\xE', '\b', '\x2', '\xA2', '\xA4', '\x5', '\x44', '#', 
		'\x2', '\xA3', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA7', '\x5', 'L', '\'', '\x2', '\xA6', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAA', '\a', '\x17', '\x2', 
		'\x2', '\xA9', '\xAB', '\x5', '\\', '/', '\x2', '\xAA', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAE', '\a', '\x3', '\x2', 
		'\x2', '\xAD', '\xAF', '\x5', '\n', '\x6', '\x2', '\xAE', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\a', 
		'\x4', '\x2', '\x2', '\xB3', '\t', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB6', '\x5', 'L', '\'', '\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB8', '\x5', 'J', '&', '\x2', '\xB8', '\xB9', 
		'\a', '\x5', '\x2', '\x2', '\xB9', '\xBA', '\x5', 'v', '<', '\x2', '\xBA', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xC2', '\x5', '\x12', '\n', 
		'\x2', '\xBC', '\xC2', '\x5', '\x16', '\f', '\x2', '\xBD', '\xC2', '\x5', 
		'&', '\x14', '\x2', '\xBE', '\xC2', '\x5', '*', '\x16', '\x2', '\xBF', 
		'\xC2', '\x5', '\x32', '\x1A', '\x2', '\xC0', '\xC2', '\x5', '<', '\x1F', 
		'\x2', '\xC1', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xCA', '\x5', '\x18', '\r', '\x2', '\xC4', 
		'\xCA', '\x5', '(', '\x15', '\x2', '\xC5', '\xCA', '\x5', ',', '\x17', 
		'\x2', '\xC6', '\xCA', '\x5', '\x14', '\v', '\x2', '\xC7', '\xCA', '\x5', 
		'\x34', '\x1B', '\x2', '\xC8', '\xCA', '\x5', '>', ' ', '\x2', '\xC9', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCC', '\a', '\x3', '\x2', '\x2', '\xCC', '\xCD', '\a', 
		'\x4', '\x2', '\x2', '\xCD', '\x11', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xD0', '\x5', 'L', '\'', '\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', '\x18', '\x2', '\x2', '\xD2', 
		'\xD4', '\x5', 'h', '\x35', '\x2', '\xD3', '\xD5', '\x5', '\\', '/', '\x2', 
		'\xD4', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\x13', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', 
		'\a', '\x1F', '\x2', '\x2', '\xD7', '\xD8', '\a', '\x18', '\x2', '\x2', 
		'\xD8', '\xD9', '\x5', 'h', '\x35', '\x2', '\xD9', '\xDA', '\x5', '\\', 
		'/', '\x2', '\xDA', '\x15', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDD', 
		'\x5', 'L', '\'', '\x2', '\xDC', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDF', '\a', '\x19', '\x2', '\x2', '\xDF', '\xE1', '\x5', 
		'h', '\x35', '\x2', '\xE0', '\xE2', '\x5', '\x1A', '\xE', '\x2', '\xE1', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE5', '\x5', 
		'\\', '/', '\x2', '\xE4', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xE8', '\x5', '\x1C', '\xF', '\x2', '\xE7', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\a', '\x1F', '\x2', 
		'\x2', '\xEA', '\xEB', '\a', '\x19', '\x2', '\x2', '\xEB', '\xED', '\x5', 
		'h', '\x35', '\x2', '\xEC', '\xEE', '\x5', '\x1A', '\xE', '\x2', '\xED', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF1', '\x5', 
		'\\', '/', '\x2', '\xF0', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\x5', '\x1E', '\x10', '\x2', '\xF3', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\a', '\x1F', '\x2', '\x2', 
		'\xF5', '\xF6', '\a', '\x19', '\x2', '\x2', '\xF6', '\xF8', '\x5', 'h', 
		'\x35', '\x2', '\xF7', '\xF9', '\x5', '\x1A', '\xE', '\x2', '\xF8', '\xF7', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFC', '\x5', '\\', 
		'/', '\x2', '\xFB', '\xFD', '\x5', '\x10', '\t', '\x2', '\xFC', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\xFD', '\x104', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', '\x1F', 
		'\x2', '\x2', '\xFF', '\x100', '\a', '\x19', '\x2', '\x2', '\x100', '\x101', 
		'\x5', 'h', '\x35', '\x2', '\x101', '\x102', '\x5', '\x1A', '\xE', '\x2', 
		'\x102', '\x104', '\x3', '\x2', '\x2', '\x2', '\x103', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\xF4', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\x104', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x106', '\b', '\xE', '\x1', '\x2', '\x106', '\x108', 
		'\a', '\x1B', '\x2', '\x2', '\x107', '\x109', '\a', '\x6', '\x2', '\x2', 
		'\x108', '\x107', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x10C', '\x5', 'v', '<', '\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x114', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\f', 
		'\x3', '\x2', '\x2', '\x110', '\x111', '\a', '\x6', '\x2', '\x2', '\x111', 
		'\x113', '\x5', 'v', '<', '\x2', '\x112', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x116', '\x3', '\x2', '\x2', '\x2', '\x114', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x116', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x11B', '\a', '\x3', '\x2', '\x2', '\x118', 
		'\x11A', '\x5', ' ', '\x11', '\x2', '\x119', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x11F', '\a', '\x4', '\x2', '\x2', '\x11F', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x120', '\x122', '\a', '\x3', '\x2', 
		'\x2', '\x121', '\x123', '\x5', ' ', '\x11', '\x2', '\x122', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x126', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x127', '\a', '\x4', '\x2', '\x2', '\x127', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x12A', '\x5', 'L', '\'', '\x2', '\x129', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12D', '\x5', 'h', '\x35', 
		'\x2', '\x12C', '\x12E', '\x5', '\"', '\x12', '\x2', '\x12D', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\a', 
		'\x5', '\x2', '\x2', '\x130', '\x132', '\x5', 't', ';', '\x2', '\x131', 
		'\x133', '\x5', '\\', '/', '\x2', '\x132', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x132', '\x133', '\x3', '\x2', '\x2', '\x2', '\x133', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x136', '\a', '\a', '\x2', '\x2', '\x135', 
		'\x137', '\x5', '$', '\x13', '\x2', '\x136', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x139', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', 
		'\b', '\x2', '\x2', '\x13B', '#', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x13E', '\x5', 'L', '\'', '\x2', '\x13D', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\x5', 'h', '\x35', '\x2', 
		'\x140', '\x141', '\a', '\x5', '\x2', '\x2', '\x141', '\x143', '\x5', 
		't', ';', '\x2', '\x142', '\x144', '\x5', 'p', '\x39', '\x2', '\x143', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x146', '\x3', '\x2', '\x2', '\x2', '\x145', '\x147', 
		'\x5', '\\', '/', '\x2', '\x146', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x148', '\x14A', '\x5', 'L', '\'', '\x2', '\x149', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', '\a', 
		'\x1A', '\x2', '\x2', '\x14C', '\x14E', '\x5', 'h', '\x35', '\x2', '\x14D', 
		'\x14F', '\x5', '\\', '/', '\x2', '\x14E', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x152', '\x5', '\x1C', '\xF', '\x2', 
		'\x151', '\x150', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\'', '\x3', '\x2', '\x2', '\x2', '\x153', 
		'\x154', '\a', '\x1F', '\x2', '\x2', '\x154', '\x155', '\a', '\x1A', '\x2', 
		'\x2', '\x155', '\x157', '\x5', 'h', '\x35', '\x2', '\x156', '\x158', 
		'\x5', '\\', '/', '\x2', '\x157', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x158', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x15A', '\x5', '\x1E', '\x10', '\x2', '\x15A', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\a', '\x1F', '\x2', 
		'\x2', '\x15C', '\x15D', '\a', '\x1A', '\x2', '\x2', '\x15D', '\x15E', 
		'\x5', 'h', '\x35', '\x2', '\x15E', '\x160', '\x5', '\\', '/', '\x2', 
		'\x15F', '\x161', '\x5', '\x10', '\t', '\x2', '\x160', '\x15F', '\x3', 
		'\x2', '\x2', '\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x162', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\x162', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x163', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x166', '\x5', 'L', '\'', '\x2', '\x165', 
		'\x164', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x3', '\x2', '\x2', 
		'\x2', '\x166', '\x167', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', 
		'\a', '\x1D', '\x2', '\x2', '\x168', '\x16A', '\x5', 'h', '\x35', '\x2', 
		'\x169', '\x16B', '\x5', '\\', '/', '\x2', '\x16A', '\x169', '\x3', '\x2', 
		'\x2', '\x2', '\x16A', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x16E', '\x5', '.', '\x18', '\x2', 
		'\x16D', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', '\x3', 
		'\x2', '\x2', '\x2', '\x16E', '+', '\x3', '\x2', '\x2', '\x2', '\x16F', 
		'\x170', '\a', '\x1F', '\x2', '\x2', '\x170', '\x171', '\a', '\x1D', '\x2', 
		'\x2', '\x171', '\x173', '\x5', 'h', '\x35', '\x2', '\x172', '\x174', 
		'\x5', '\\', '/', '\x2', '\x173', '\x172', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x174', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x175', '\x176', '\x5', '.', '\x18', '\x2', '\x176', 
		'\x17D', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\a', '\x1F', '\x2', 
		'\x2', '\x178', '\x179', '\a', '\x1D', '\x2', '\x2', '\x179', '\x17A', 
		'\x5', 'h', '\x35', '\x2', '\x17A', '\x17B', '\x5', '\\', '/', '\x2', 
		'\x17B', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x177', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\a', '\t', '\x2', 
		'\x2', '\x17F', '\x180', '\x5', '\x30', '\x19', '\x2', '\x180', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x183', '\b', '\x19', '\x1', '\x2', '\x182', 
		'\x184', '\a', '\n', '\x2', '\x2', '\x183', '\x182', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\x5', 'v', '<', '\x2', 
		'\x186', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\f', 
		'\x3', '\x2', '\x2', '\x188', '\x189', '\a', '\n', '\x2', '\x2', '\x189', 
		'\x18B', '\x5', 'v', '<', '\x2', '\x18A', '\x187', '\x3', '\x2', '\x2', 
		'\x2', '\x18B', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x18D', '\x31', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18C', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x191', '\x5', 'L', '\'', '\x2', '\x190', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x3', '\x2', '\x2', 
		'\x2', '\x191', '\x192', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', 
		'\a', '\x1C', '\x2', '\x2', '\x193', '\x195', '\x5', 'h', '\x35', '\x2', 
		'\x194', '\x196', '\x5', '\\', '/', '\x2', '\x195', '\x194', '\x3', '\x2', 
		'\x2', '\x2', '\x195', '\x196', '\x3', '\x2', '\x2', '\x2', '\x196', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x199', '\x5', '\x36', '\x1C', '\x2', 
		'\x198', '\x197', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\x3', 
		'\x2', '\x2', '\x2', '\x199', '\x33', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x19B', '\a', '\x1F', '\x2', '\x2', '\x19B', '\x19C', '\a', '\x1C', '\x2', 
		'\x2', '\x19C', '\x19E', '\x5', 'h', '\x35', '\x2', '\x19D', '\x19F', 
		'\x5', '\\', '/', '\x2', '\x19E', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x19E', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\x3', 
		'\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\x5', '\x38', '\x1D', '\x2', '\x1A1', 
		'\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\a', '\x1F', '\x2', 
		'\x2', '\x1A3', '\x1A4', '\a', '\x1C', '\x2', '\x2', '\x1A4', '\x1A5', 
		'\x5', 'h', '\x35', '\x2', '\x1A5', '\x1A7', '\x5', '\\', '/', '\x2', 
		'\x1A6', '\x1A8', '\x5', '\x10', '\t', '\x2', '\x1A7', '\x1A6', '\x3', 
		'\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x19A', '\x3', '\x2', '\x2', 
		'\x2', '\x1A9', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AF', '\a', '\x3', '\x2', '\x2', 
		'\x1AC', '\x1AE', '\x5', ':', '\x1E', '\x2', '\x1AD', '\x1AC', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\x3', '\x2', '\x2', 
		'\x2', '\x1B0', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', '\a', '\x4', '\x2', '\x2', 
		'\x1B3', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B6', '\a', '\x3', 
		'\x2', '\x2', '\x1B5', '\x1B7', '\x5', ':', '\x1E', '\x2', '\x1B6', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\x3', 
		'\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\x1BB', '\a', '\x4', '\x2', '\x2', '\x1BB', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x1BC', '\x1BE', '\x5', 'L', '\'', '\x2', '\x1BD', '\x1BC', '\x3', 
		'\x2', '\x2', '\x2', '\x1BD', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1BE', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C1', '\x5', 'N', '(', 
		'\x2', '\x1C0', '\x1C2', '\x5', '\\', '/', '\x2', '\x1C1', '\x1C0', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		';', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C5', '\x5', 'L', '\'', '\x2', 
		'\x1C4', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\x3', 
		'\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\x1C7', '\a', '\x1E', '\x2', '\x2', '\x1C7', '\x1C9', '\x5', 'h', '\x35', 
		'\x2', '\x1C8', '\x1CA', '\x5', '\\', '/', '\x2', '\x1C9', '\x1C8', '\x3', 
		'\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CD', '\x5', '@', '!', 
		'\x2', '\x1CC', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', '\x1CD', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x1CE', '\x1CF', '\a', '\x1F', '\x2', '\x2', '\x1CF', '\x1D0', '\a', 
		'\x1E', '\x2', '\x2', '\x1D0', '\x1D2', '\x5', 'h', '\x35', '\x2', '\x1D1', 
		'\x1D3', '\x5', '\\', '/', '\x2', '\x1D2', '\x1D1', '\x3', '\x2', '\x2', 
		'\x2', '\x1D2', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\x5', '\x42', '\"', '\x2', 
		'\x1D5', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\a', 
		'\x1F', '\x2', '\x2', '\x1D7', '\x1D8', '\a', '\x1E', '\x2', '\x2', '\x1D8', 
		'\x1D9', '\x5', 'h', '\x35', '\x2', '\x1D9', '\x1DB', '\x5', '\\', '/', 
		'\x2', '\x1DA', '\x1DC', '\x5', '\x10', '\t', '\x2', '\x1DB', '\x1DA', 
		'\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x1DC', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1DD', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1DE', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E3', '\a', '\x3', '\x2', 
		'\x2', '\x1E0', '\x1E2', '\x5', '$', '\x13', '\x2', '\x1E1', '\x1E0', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E5', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E5', 
		'\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\a', '\x4', '\x2', 
		'\x2', '\x1E7', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1EA', 
		'\a', '\x3', '\x2', '\x2', '\x1E9', '\x1EB', '\x5', '$', '\x13', '\x2', 
		'\x1EA', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EC', 
		'\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\x3', '\x2', '\x2', 
		'\x2', '\x1EE', '\x1EF', '\a', '\x4', '\x2', '\x2', '\x1EF', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x1F0', '\x1F2', '\x5', 'L', '\'', '\x2', '\x1F1', 
		'\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\x3', '\x2', '\x2', 
		'\x2', '\x1F2', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', 
		'\a', ' ', '\x2', '\x2', '\x1F4', '\x1F5', '\a', '\v', '\x2', '\x2', '\x1F5', 
		'\x1F7', '\x5', 'h', '\x35', '\x2', '\x1F6', '\x1F8', '\x5', '\"', '\x12', 
		'\x2', '\x1F7', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', 
		'\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\x3', '\x2', '\x2', '\x2', 
		'\x1F9', '\x1FA', '\a', '!', '\x2', '\x2', '\x1FA', '\x1FB', '\x5', 'H', 
		'%', '\x2', '\x1FB', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FD', 
		'\x5', 'h', '\x35', '\x2', '\x1FD', 'G', '\x3', '\x2', '\x2', '\x2', '\x1FE', 
		'\x1FF', '\b', '%', '\x1', '\x2', '\x1FF', '\x200', '\x5', '\x46', '$', 
		'\x2', '\x200', '\x206', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', 
		'\f', '\x3', '\x2', '\x2', '\x202', '\x203', '\a', '\n', '\x2', '\x2', 
		'\x203', '\x205', '\x5', '\x46', '$', '\x2', '\x204', '\x201', '\x3', 
		'\x2', '\x2', '\x2', '\x205', '\x208', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x204', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\x3', '\x2', '\x2', 
		'\x2', '\x207', 'I', '\x3', '\x2', '\x2', '\x2', '\x208', '\x206', '\x3', 
		'\x2', '\x2', '\x2', '\x209', '\x20A', '\t', '\x2', '\x2', '\x2', '\x20A', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', '\x5', 'r', ':', '\x2', 
		'\x20C', 'M', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20E', '\a', '\"', 
		'\x2', '\x2', '\x20E', 'O', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x213', 
		'\a', '\f', '\x2', '\x2', '\x210', '\x212', '\x5', 'j', '\x36', '\x2', 
		'\x211', '\x210', '\x3', '\x2', '\x2', '\x2', '\x212', '\x215', '\x3', 
		'\x2', '\x2', '\x2', '\x213', '\x211', '\x3', '\x2', '\x2', '\x2', '\x213', 
		'\x214', '\x3', '\x2', '\x2', '\x2', '\x214', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x215', '\x213', '\x3', '\x2', '\x2', '\x2', '\x216', '\x217', 
		'\a', '\r', '\x2', '\x2', '\x217', 'Q', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x21C', '\a', '\f', '\x2', '\x2', '\x219', '\x21B', '\x5', 'l', '\x37', 
		'\x2', '\x21A', '\x219', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21E', 
		'\x3', '\x2', '\x2', '\x2', '\x21C', '\x21A', '\x3', '\x2', '\x2', '\x2', 
		'\x21C', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21F', '\x3', 
		'\x2', '\x2', '\x2', '\x21E', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21F', 
		'\x220', '\a', '\r', '\x2', '\x2', '\x220', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\x221', '\x225', '\a', '\x3', '\x2', '\x2', '\x222', '\x224', 
		'\x5', 'X', '-', '\x2', '\x223', '\x222', '\x3', '\x2', '\x2', '\x2', 
		'\x224', '\x227', '\x3', '\x2', '\x2', '\x2', '\x225', '\x223', '\x3', 
		'\x2', '\x2', '\x2', '\x225', '\x226', '\x3', '\x2', '\x2', '\x2', '\x226', 
		'\x228', '\x3', '\x2', '\x2', '\x2', '\x227', '\x225', '\x3', '\x2', '\x2', 
		'\x2', '\x228', '\x229', '\a', '\x4', '\x2', '\x2', '\x229', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x22A', '\x22E', '\a', '\x3', '\x2', '\x2', '\x22B', 
		'\x22D', '\x5', 'Z', '.', '\x2', '\x22C', '\x22B', '\x3', '\x2', '\x2', 
		'\x2', '\x22D', '\x230', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22C', 
		'\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', '\x3', '\x2', '\x2', '\x2', 
		'\x22F', '\x231', '\x3', '\x2', '\x2', '\x2', '\x230', '\x22E', '\x3', 
		'\x2', '\x2', '\x2', '\x231', '\x232', '\a', '\x4', '\x2', '\x2', '\x232', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x233', '\x234', '\x5', 'h', '\x35', 
		'\x2', '\x234', '\x235', '\a', '\x5', '\x2', '\x2', '\x235', '\x236', 
		'\x5', 'j', '\x36', '\x2', '\x236', 'Y', '\x3', '\x2', '\x2', '\x2', '\x237', 
		'\x238', '\x5', 'h', '\x35', '\x2', '\x238', '\x239', '\a', '\x5', '\x2', 
		'\x2', '\x239', '\x23A', '\x5', 'l', '\x37', '\x2', '\x23A', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x23B', '\x23D', '\x5', '^', '\x30', '\x2', '\x23C', 
		'\x23B', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\x3', '\x2', '\x2', 
		'\x2', '\x23E', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x23F', 
		'\x3', '\x2', '\x2', '\x2', '\x23F', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x240', '\x241', '\a', '\v', '\x2', '\x2', '\x241', '\x243', '\x5', 'h', 
		'\x35', '\x2', '\x242', '\x244', '\x5', '`', '\x31', '\x2', '\x243', '\x242', 
		'\x3', '\x2', '\x2', '\x2', '\x243', '\x244', '\x3', '\x2', '\x2', '\x2', 
		'\x244', '_', '\x3', '\x2', '\x2', '\x2', '\x245', '\x247', '\a', '\a', 
		'\x2', '\x2', '\x246', '\x248', '\x5', '\x62', '\x32', '\x2', '\x247', 
		'\x246', '\x3', '\x2', '\x2', '\x2', '\x248', '\x249', '\x3', '\x2', '\x2', 
		'\x2', '\x249', '\x247', '\x3', '\x2', '\x2', '\x2', '\x249', '\x24A', 
		'\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', '\x3', '\x2', '\x2', '\x2', 
		'\x24B', '\x24C', '\a', '\b', '\x2', '\x2', '\x24C', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x24D', '\x24E', '\x5', 'h', '\x35', '\x2', '\x24E', '\x24F', 
		'\a', '\x5', '\x2', '\x2', '\x24F', '\x250', '\x5', 'l', '\x37', '\x2', 
		'\x250', '\x63', '\x3', '\x2', '\x2', '\x2', '\x251', '\x252', '\t', '\x3', 
		'\x2', '\x2', '\x252', '\x65', '\x3', '\x2', '\x2', '\x2', '\x253', '\x257', 
		'\x5', '\x64', '\x33', '\x2', '\x254', '\x257', '\a', '\x11', '\x2', '\x2', 
		'\x255', '\x257', '\a', '\x12', '\x2', '\x2', '\x256', '\x253', '\x3', 
		'\x2', '\x2', '\x2', '\x256', '\x254', '\x3', '\x2', '\x2', '\x2', '\x256', 
		'\x255', '\x3', '\x2', '\x2', '\x2', '\x257', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x258', '\x25D', '\x5', '\x64', '\x33', '\x2', '\x259', '\x25D', 
		'\a', '\x11', '\x2', '\x2', '\x25A', '\x25D', '\a', '\x12', '\x2', '\x2', 
		'\x25B', '\x25D', '\a', '!', '\x2', '\x2', '\x25C', '\x258', '\x3', '\x2', 
		'\x2', '\x2', '\x25C', '\x259', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25A', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', '\x25B', '\x3', '\x2', '\x2', '\x2', 
		'\x25D', 'i', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x267', '\x5', 'r', 
		':', '\x2', '\x25F', '\x267', '\a', '#', '\x2', '\x2', '\x260', '\x267', 
		'\a', '$', '\x2', '\x2', '\x261', '\x267', '\a', '\x11', '\x2', '\x2', 
		'\x262', '\x267', '\a', '\x12', '\x2', '\x2', '\x263', '\x267', '\x5', 
		'N', '(', '\x2', '\x264', '\x267', '\x5', 'P', ')', '\x2', '\x265', '\x267', 
		'\x5', 'T', '+', '\x2', '\x266', '\x25E', '\x3', '\x2', '\x2', '\x2', 
		'\x266', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x266', '\x260', '\x3', 
		'\x2', '\x2', '\x2', '\x266', '\x261', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x262', '\x3', '\x2', '\x2', '\x2', '\x266', '\x263', '\x3', '\x2', '\x2', 
		'\x2', '\x266', '\x264', '\x3', '\x2', '\x2', '\x2', '\x266', '\x265', 
		'\x3', '\x2', '\x2', '\x2', '\x267', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x268', '\x272', '\x5', 'n', '\x38', '\x2', '\x269', '\x272', '\x5', 
		'r', ':', '\x2', '\x26A', '\x272', '\a', '#', '\x2', '\x2', '\x26B', '\x272', 
		'\a', '$', '\x2', '\x2', '\x26C', '\x272', '\a', '\x11', '\x2', '\x2', 
		'\x26D', '\x272', '\a', '\x12', '\x2', '\x2', '\x26E', '\x272', '\x5', 
		'N', '(', '\x2', '\x26F', '\x272', '\x5', 'R', '*', '\x2', '\x270', '\x272', 
		'\x5', 'V', ',', '\x2', '\x271', '\x268', '\x3', '\x2', '\x2', '\x2', 
		'\x271', '\x269', '\x3', '\x2', '\x2', '\x2', '\x271', '\x26A', '\x3', 
		'\x2', '\x2', '\x2', '\x271', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x271', 
		'\x26C', '\x3', '\x2', '\x2', '\x2', '\x271', '\x26D', '\x3', '\x2', '\x2', 
		'\x2', '\x271', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x271', '\x26F', 
		'\x3', '\x2', '\x2', '\x2', '\x271', '\x270', '\x3', '\x2', '\x2', '\x2', 
		'\x272', 'm', '\x3', '\x2', '\x2', '\x2', '\x273', '\x274', '\a', '\xE', 
		'\x2', '\x2', '\x274', '\x275', '\x5', 'h', '\x35', '\x2', '\x275', 'o', 
		'\x3', '\x2', '\x2', '\x2', '\x276', '\x277', '\a', '\t', '\x2', '\x2', 
		'\x277', '\x278', '\x5', 'j', '\x36', '\x2', '\x278', 'q', '\x3', '\x2', 
		'\x2', '\x2', '\x279', '\x27A', '\t', '\x4', '\x2', '\x2', '\x27A', 's', 
		'\x3', '\x2', '\x2', '\x2', '\x27B', '\x27F', '\x5', 'v', '<', '\x2', 
		'\x27C', '\x27F', '\x5', 'x', '=', '\x2', '\x27D', '\x27F', '\x5', 'z', 
		'>', '\x2', '\x27E', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27C', 
		'\x3', '\x2', '\x2', '\x2', '\x27E', '\x27D', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', 'u', '\x3', '\x2', '\x2', '\x2', '\x280', '\x281', '\x5', 'h', 
		'\x35', '\x2', '\x281', 'w', '\x3', '\x2', '\x2', '\x2', '\x282', '\x283', 
		'\a', '\f', '\x2', '\x2', '\x283', '\x284', '\x5', 't', ';', '\x2', '\x284', 
		'\x285', '\a', '\r', '\x2', '\x2', '\x285', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x286', '\x287', '\x5', 'v', '<', '\x2', '\x287', '\x288', '\a', 
		'\xF', '\x2', '\x2', '\x288', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x289', 
		'\x28A', '\x5', 'x', '=', '\x2', '\x28A', '\x28B', '\a', '\xF', '\x2', 
		'\x2', '\x28B', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x286', 
		'\x3', '\x2', '\x2', '\x2', '\x28C', '\x289', '\x3', '\x2', '\x2', '\x2', 
		'\x28D', '{', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x29C', '\x5', '\x82', 
		'\x42', '\x2', '\x28F', '\x291', '\x5', 'J', '&', '\x2', '\x290', '\x292', 
		'\a', '\"', '\x2', '\x2', '\x291', '\x290', '\x3', '\x2', '\x2', '\x2', 
		'\x291', '\x292', '\x3', '\x2', '\x2', '\x2', '\x292', '\x294', '\x3', 
		'\x2', '\x2', '\x2', '\x293', '\x295', '\x5', '~', '@', '\x2', '\x294', 
		'\x293', '\x3', '\x2', '\x2', '\x2', '\x294', '\x295', '\x3', '\x2', '\x2', 
		'\x2', '\x295', '\x297', '\x3', '\x2', '\x2', '\x2', '\x296', '\x298', 
		'\x5', '\\', '/', '\x2', '\x297', '\x296', '\x3', '\x2', '\x2', '\x2', 
		'\x297', '\x298', '\x3', '\x2', '\x2', '\x2', '\x298', '\x299', '\x3', 
		'\x2', '\x2', '\x2', '\x299', '\x29A', '\x5', '\x82', '\x42', '\x2', '\x29A', 
		'\x29C', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x28E', '\x3', '\x2', '\x2', 
		'\x2', '\x29B', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x29C', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x29D', '\x29F', '\a', '\a', '\x2', '\x2', '\x29E', 
		'\x2A0', '\x5', '\x80', '\x41', '\x2', '\x29F', '\x29E', '\x3', '\x2', 
		'\x2', '\x2', '\x2A0', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x29F', 
		'\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A2', '\x3', '\x2', '\x2', '\x2', 
		'\x2A2', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A4', '\a', 
		'\b', '\x2', '\x2', '\x2A4', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x2A5', 
		'\x2A6', '\x5', 'n', '\x38', '\x2', '\x2A6', '\x2A7', '\a', '\x5', '\x2', 
		'\x2', '\x2A7', '\x2A9', '\x5', 't', ';', '\x2', '\x2A8', '\x2AA', '\x5', 
		'p', '\x39', '\x2', '\x2A9', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2A9', 
		'\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x2AB', '\x2AD', '\a', '\x3', '\x2', '\x2', '\x2AC', '\x2AE', 
		'\x5', '\x84', '\x43', '\x2', '\x2AD', '\x2AC', '\x3', '\x2', '\x2', '\x2', 
		'\x2AE', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2AD', '\x3', 
		'\x2', '\x2', '\x2', '\x2AF', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2B0', 
		'\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\a', '\x4', '\x2', 
		'\x2', '\x2B2', '\x83', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B7', 
		'\x5', '\x86', '\x44', '\x2', '\x2B4', '\x2B7', '\x5', '\x8A', '\x46', 
		'\x2', '\x2B5', '\x2B7', '\x5', '\x8C', 'G', '\x2', '\x2B6', '\x2B3', 
		'\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B4', '\x3', '\x2', '\x2', '\x2', 
		'\x2B6', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x2B8', '\x2BA', '\x5', '\x88', '\x45', '\x2', '\x2B9', 
		'\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BA', '\x3', '\x2', '\x2', 
		'\x2', '\x2BA', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BD', 
		'\x5', 'h', '\x35', '\x2', '\x2BC', '\x2BE', '\x5', '`', '\x31', '\x2', 
		'\x2BD', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2BE', '\x3', 
		'\x2', '\x2', '\x2', '\x2BE', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2BF', 
		'\x2C1', '\x5', '\\', '/', '\x2', '\x2C0', '\x2BF', '\x3', '\x2', '\x2', 
		'\x2', '\x2C0', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C3', 
		'\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C4', '\x5', '\x82', '\x42', '\x2', 
		'\x2C3', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C4', '\x3', 
		'\x2', '\x2', '\x2', '\x2C4', '\x87', '\x3', '\x2', '\x2', '\x2', '\x2C5', 
		'\x2C6', '\x5', 'h', '\x35', '\x2', '\x2C6', '\x2C7', '\a', '\x5', '\x2', 
		'\x2', '\x2C7', '\x89', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C9', 
		'\a', '\x10', '\x2', '\x2', '\x2C9', '\x2CB', '\x5', '\x66', '\x34', '\x2', 
		'\x2CA', '\x2CC', '\x5', '\\', '/', '\x2', '\x2CB', '\x2CA', '\x3', '\x2', 
		'\x2', '\x2', '\x2CB', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CF', '\a', '\x10', '\x2', '\x2', 
		'\x2CE', '\x2D0', '\x5', '\x90', 'I', '\x2', '\x2CF', '\x2CE', '\x3', 
		'\x2', '\x2', '\x2', '\x2CF', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D0', 
		'\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D3', '\x5', '\\', '/', 
		'\x2', '\x2D2', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D3', 
		'\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D4', '\x3', '\x2', '\x2', '\x2', 
		'\x2D4', '\x2D5', '\x5', '\x82', '\x42', '\x2', '\x2D5', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x2D6', '\x2D7', '\a', '\x13', '\x2', '\x2', '\x2D7', 
		'\x2D8', '\x5', '\x66', '\x34', '\x2', '\x2D8', '\x2DA', '\x5', '\x90', 
		'I', '\x2', '\x2D9', '\x2DB', '\x5', '\\', '/', '\x2', '\x2DA', '\x2D9', 
		'\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DB', '\x3', '\x2', '\x2', '\x2', 
		'\x2DB', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2DD', '\x5', 
		'\x82', '\x42', '\x2', '\x2DD', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x2DE', 
		'\x2DF', '\a', '!', '\x2', '\x2', '\x2DF', '\x2E0', '\x5', 'v', '<', '\x2', 
		'\x2E0', '\x91', '\x3', '\x2', '\x2', '\x2', '\x62', '\x95', '\x9A', '\x9D', 
		'\xA3', '\xA6', '\xAA', '\xB0', '\xB5', '\xC1', '\xC9', '\xCF', '\xD4', 
		'\xDC', '\xE1', '\xE4', '\xE7', '\xED', '\xF0', '\xF8', '\xFC', '\x103', 
		'\x108', '\x10D', '\x114', '\x11B', '\x124', '\x129', '\x12D', '\x132', 
		'\x138', '\x13D', '\x143', '\x146', '\x149', '\x14E', '\x151', '\x157', 
		'\x160', '\x162', '\x165', '\x16A', '\x16D', '\x173', '\x17C', '\x183', 
		'\x18C', '\x190', '\x195', '\x198', '\x19E', '\x1A7', '\x1A9', '\x1AF', 
		'\x1B8', '\x1BD', '\x1C1', '\x1C4', '\x1C9', '\x1CC', '\x1D2', '\x1DB', 
		'\x1DD', '\x1E3', '\x1EC', '\x1F1', '\x1F7', '\x206', '\x213', '\x21C', 
		'\x225', '\x22E', '\x23E', '\x243', '\x249', '\x256', '\x25C', '\x266', 
		'\x271', '\x27E', '\x28C', '\x291', '\x294', '\x297', '\x29B', '\x2A1', 
		'\x2A9', '\x2AF', '\x2B6', '\x2B9', '\x2BD', '\x2C0', '\x2C3', '\x2CB', 
		'\x2CF', '\x2D2', '\x2DA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace GraphLinqQL.Ast.Antlr
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /source/Graphql.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GraphLinqQL.Ast.Antlr {

     

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="GraphqlParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface IGraphqlVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.document"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDocument([NotNull] GraphqlParser.DocumentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.definition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefinition([NotNull] GraphqlParser.DefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.typeSystemDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeSystemDefinition([NotNull] GraphqlParser.TypeSystemDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.schemaDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSchemaDefinition([NotNull] GraphqlParser.SchemaDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.operationTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOperationTypeDefinition([NotNull] GraphqlParser.OperationTypeDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.typeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeDefinition([NotNull] GraphqlParser.TypeDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.typeExtension"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeExtension([NotNull] GraphqlParser.TypeExtensionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.emptyParentheses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmptyParentheses([NotNull] GraphqlParser.EmptyParenthesesContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.scalarTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitScalarTypeDefinition([NotNull] GraphqlParser.ScalarTypeDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.scalarTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitScalarTypeExtensionDefinition([NotNull] GraphqlParser.ScalarTypeExtensionDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.objectTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectTypeDefinition([NotNull] GraphqlParser.ObjectTypeDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.objectTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectTypeExtensionDefinition([NotNull] GraphqlParser.ObjectTypeExtensionDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.implementsInterfaces"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitImplementsInterfaces([NotNull] GraphqlParser.ImplementsInterfacesContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.fieldsDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFieldsDefinition([NotNull] GraphqlParser.FieldsDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.extensionFieldsDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExtensionFieldsDefinition([NotNull] GraphqlParser.ExtensionFieldsDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.fieldDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFieldDefinition([NotNull] GraphqlParser.FieldDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.argumentsDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentsDefinition([NotNull] GraphqlParser.ArgumentsDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.inputValueDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInputValueDefinition([NotNull] GraphqlParser.InputValueDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.interfaceTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInterfaceTypeDefinition([NotNull] GraphqlParser.InterfaceTypeDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.interfaceTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInterfaceTypeExtensionDefinition([NotNull] GraphqlParser.InterfaceTypeExtensionDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.unionTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnionTypeDefinition([NotNull] GraphqlParser.UnionTypeDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.unionTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnionTypeExtensionDefinition([NotNull] GraphqlParser.UnionTypeExtensionDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.unionMembership"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnionMembership([NotNull] GraphqlParser.UnionMembershipContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.unionMembers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnionMembers([NotNull] GraphqlParser.UnionMembersContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.enumTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEnumTypeDefinition([NotNull] GraphqlParser.EnumTypeDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.enumTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEnumTypeExtensionDefinition([NotNull] GraphqlParser.EnumTypeExtensionDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.enumValueDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEnumValueDefinitions([NotNull] GraphqlParser.EnumValueDefinitionsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.extensionEnumValueDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExtensionEnumValueDefinitions([NotNull] GraphqlParser.ExtensionEnumValueDefinitionsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.enumValueDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEnumValueDefinition([NotNull] GraphqlParser.EnumValueDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.inputObjectTypeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInputObjectTypeDefinition([NotNull] GraphqlParser.InputObjectTypeDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.inputObjectTypeExtensionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInputObjectTypeExtensionDefinition([NotNull] GraphqlParser.InputObjectTypeExtensionDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.inputObjectValueDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInputObjectValueDefinitions([NotNull] GraphqlParser.InputObjectValueDefinitionsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.extensionInputObjectValueDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExtensionInputObjectValueDefinitions([NotNull] GraphqlParser.ExtensionInputObjectValueDefinitionsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.directiveDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDirectiveDefinition([NotNull] GraphqlParser.DirectiveDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.directiveLocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDirectiveLocation([NotNull] GraphqlParser.DirectiveLocationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.directiveLocations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDirectiveLocations([NotNull] GraphqlParser.DirectiveLocationsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.operationType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOperationType([NotNull] GraphqlParser.OperationTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.description"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDescription([NotNull] GraphqlParser.DescriptionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.enumValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEnumValue([NotNull] GraphqlParser.EnumValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.arrayValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayValue([NotNull] GraphqlParser.ArrayValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.arrayValueWithVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayValueWithVariable([NotNull] GraphqlParser.ArrayValueWithVariableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.objectValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectValue([NotNull] GraphqlParser.ObjectValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.objectValueWithVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectValueWithVariable([NotNull] GraphqlParser.ObjectValueWithVariableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.objectField"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectField([NotNull] GraphqlParser.ObjectFieldContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.objectFieldWithVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectFieldWithVariable([NotNull] GraphqlParser.ObjectFieldWithVariableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.directives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDirectives([NotNull] GraphqlParser.DirectivesContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDirective([NotNull] GraphqlParser.DirectiveContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArguments([NotNull] GraphqlParser.ArgumentsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgument([NotNull] GraphqlParser.ArgumentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.baseName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBaseName([NotNull] GraphqlParser.BaseNameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.fragmentName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFragmentName([NotNull] GraphqlParser.FragmentNameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitName([NotNull] GraphqlParser.NameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValue([NotNull] GraphqlParser.ValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.valueWithVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValueWithVariable([NotNull] GraphqlParser.ValueWithVariableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariable([NotNull] GraphqlParser.VariableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.defaultValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefaultValue([NotNull] GraphqlParser.DefaultValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.stringValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringValue([NotNull] GraphqlParser.StringValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] GraphqlParser.TypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeName([NotNull] GraphqlParser.TypeNameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.listType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitListType([NotNull] GraphqlParser.ListTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.nonNullType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNonNullType([NotNull] GraphqlParser.NonNullTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.operationDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOperationDefinition([NotNull] GraphqlParser.OperationDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.variableDefinitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDefinitions([NotNull] GraphqlParser.VariableDefinitionsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.variableDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDefinition([NotNull] GraphqlParser.VariableDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.selectionSet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSelectionSet([NotNull] GraphqlParser.SelectionSetContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.selection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSelection([NotNull] GraphqlParser.SelectionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.field"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitField([NotNull] GraphqlParser.FieldContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.alias"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAlias([NotNull] GraphqlParser.AliasContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.fragmentSpread"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFragmentSpread([NotNull] GraphqlParser.FragmentSpreadContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.inlineFragment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInlineFragment([NotNull] GraphqlParser.InlineFragmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.fragmentDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFragmentDefinition([NotNull] GraphqlParser.FragmentDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GraphqlParser.typeCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeCondition([NotNull] GraphqlParser.TypeConditionContext context);
}
} // namespace GraphLinqQL.Ast.Antlr
